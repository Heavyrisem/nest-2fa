var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.03,1,2.364]],["body/modules/AppModule.html",[0,1.31,1,4.614,2,1.267,3,2.177,4,2.684,5,2.684,6,3.21,7,0.024,8,3.466,9,3.765,10,3.765,11,3.466,12,2.527,13,1.797,14,1.797,15,0.22,16,0.22,17,0.194,18,3.158,19,2.34,20,0.73,21,3.158,22,4.442,23,5.575,24,0.424,25,3.158,26,0.73,27,0.457,28,0.361,29,0.644,30,3.158,31,0.73,32,2.138,33,0.514,34,4.442,35,4.442,36,4.442,37,0.603,38,4.442,39,4.442,40,2.372,41,3.335,42,1.548,43,3.158,44,2.138,45,3.158,46,3.158,47,2.138,48,3.158,49,3.158,50,3.158,51,3.158,52,1.548,53,1.797,54,3.775,55,3.158,56,2.684,57,1.19,58,3.158,59,1.351,60,0.22,61,0.01,62,1.351,63,3.158,64,3.158,65,0.015,66,0.015]],["title/controllers/AuthController.html",[67,1.84,68,2.364]],["body/controllers/AuthController.html",[7,0.024,15,0.123,16,0.123,17,0.108,20,0.659,24,0.609,26,1.049,27,0.657,28,0.585,29,0.925,31,1.049,33,0.481,37,0.337,42,0.863,52,0.863,57,1.074,60,0.123,61,0.006,65,0.009,66,0.009,67,0.928,68,1.931,69,1.498,70,1.323,71,1.762,72,0.185,73,2.317,74,2.853,75,2.853,76,2.424,77,2.853,78,3.594,79,1.762,80,3.539,81,2.693,82,1.709,83,2.853,84,1.762,85,3.754,86,1.762,87,1.775,88,1.762,89,2.853,90,1.762,91,1.193,92,1.762,93,3.159,94,2.853,95,1.762,96,1.762,97,2.176,98,2.853,99,2.853,100,1.762,101,2.699,102,1.762,103,3.289,104,1.762,105,1.762,106,0.754,107,3.51,108,1.762,109,1.193,110,1.323,111,1.323,112,3.054,113,1.193,114,2.044,115,1.498,116,1.498,117,0.928,118,1.761,119,1.193,120,2.553,121,1.762,122,1.498,123,1.498,124,0.928,125,1.762,126,1.193,127,2.044,128,1.893,129,1.323,130,1.761,131,1.323,132,1.498,133,1.193,134,0.806,135,1.323,136,1.762,137,0.624,138,2.223,139,1.941,140,1.762,141,2.142,142,1.762,143,1.762,144,1.994,145,1.193,146,1.829,147,1.762,148,2.853,149,1.762,150,0.894,151,1.762,152,1.762,153,4.242,154,3.911,155,1.762,156,4.131,157,4.537,158,1.762,159,1.762,160,2.424,161,2.853,162,1.762,163,1.762,164,1.498,165,1.762,166,1.762,167,1.763,168,1.762,169,1.763,170,1.762,171,1.762,172,3.594,173,1.762,174,3.594,175,1.762,176,1.498,177,1.498,178,1.762,179,2.853,180,1.762,181,1.498,182,1.762,183,1.762,184,1.762,185,1.498,186,2.853,187,1.762]],["title/modules/AuthModule.html",[0,1.03,6,1.84]],["body/modules/AuthModule.html",[0,1.395,2,1.387,3,2.318,6,3.565,7,0.024,11,1.967,12,2.691,13,1.967,14,1.967,15,0.241,16,0.241,17,0.213,19,2.492,33,0.529,37,0.66,41,3.552,42,1.694,52,2.318,53,2.691,60,0.241,61,0.011,65,0.016,66,0.016,68,3.65,87,0.96,117,1.822,118,3.342,119,2.341,127,1.967,130,2.318,131,2.596,134,1.581,135,2.596,188,2.938,189,2.938,190,2.938,191,2.938,192,3.565,193,3.751,194,3.458,195,3.202,196,2.938,197,2.341,198,1.694,199,3.458,200,3.458,201,3.458,202,3.458,203,2.938,204,3.458,205,2.938,206,2.938,207,2.938,208,3.458]],["title/injectables/AuthService.html",[118,1.711,209,0.913]],["body/injectables/AuthService.html",[7,0.024,15,0.09,16,0.09,17,0.08,20,0.51,24,0.719,26,1.237,27,0.822,28,0.612,29,1.09,31,1.206,32,0.876,33,0.427,37,0.247,42,0.634,57,1.764,59,1.234,60,0.09,61,0.004,65,0.007,66,0.007,72,0.136,73,2.295,76,2.452,80,1.939,81,1.796,85,0.8,87,1.519,91,2.589,93,2.106,103,2.106,106,0.554,110,0.972,112,3.778,113,0.876,114,2.529,115,1.1,116,1.1,117,0.682,118,1.081,122,1.1,123,1.1,127,2.529,128,2.574,130,2.178,131,0.972,132,1.1,133,0.876,137,0.781,138,2.295,139,1.637,144,1.991,145,1.953,146,2.06,150,1.677,153,3.127,154,3.704,160,1.1,164,1.875,167,0.8,169,2.894,181,1.1,198,0.634,209,0.577,210,0.634,211,1.1,212,2.207,213,2.207,214,2.207,215,2.207,216,2.207,217,2.885,218,2.207,219,2.207,220,2.207,221,2.885,222,1.1,223,2.559,224,1.294,225,1.875,226,2.207,227,3.539,228,1.294,229,2.207,230,2.207,231,1.294,232,3.25,233,2.207,234,3.408,235,1.294,236,1.1,237,2.207,238,1.294,239,2.207,240,2.574,241,1.294,242,3.778,243,1.294,244,1.294,245,1.559,246,1.294,247,1.294,248,2.207,249,1.441,250,1.294,251,2.207,252,1.294,253,2.589,254,0.8,255,2.207,256,1.294,257,1.294,258,0.876,259,1.294,260,0.519,261,1.1,262,1.294,263,1.1,264,0.972,265,1.294,266,1.294,267,2.176,268,1.52,269,2.885,270,3.825,271,1.294,272,1.294,273,0.519,274,1.294,275,1.294,276,1.294,277,1.294,278,1.294,279,1.294,280,2.885,281,2.885,282,2.885,283,2.452,284,2.452,285,1.294,286,1.294,287,1.294,288,2.194,289,2.207,290,1.294,291,1.294,292,1.294,293,1.294,294,2.207,295,0.972,296,2.207,297,1.294,298,1.294,299,2.885,300,1.294,301,1.294,302,1.294,303,1.294,304,1.294,305,1.875,306,1.875,307,2.207,308,3.408,309,2.207,310,1.875,311,1.875,312,1.953,313,2.207,314,2.896,315,2.207,316,2.207,317,2.207,318,2.207,319,1.294,320,2.207,321,1.294,322,1.294,323,1.294,324,1.294,325,1.294,326,1.294,327,1.294,328,0.487,329,1.294,330,1.294,331,1.1,332,1.1,333,0.634]],["title/modules/ConfigurationModule.html",[0,1.03,8,1.987]],["body/modules/ConfigurationModule.html",[0,1.564,2,1.647,7,0.024,8,3.017,15,0.286,16,0.286,17,0.253,19,2.163,33,0.459,37,0.784,59,1.757,60,0.286,61,0.013,65,0.017,66,0.017,113,2.78,334,4.107,335,4.506,336,4.107,337,4.107,338,4.107,339,4.107,340,4.107,341,4.107,342,4.107,343,4.107,344,4.107,345,3.49,346,4.107,347,3.49,348,4.107,349,4.107,350,6.581,351,4.107,352,4.107,353,4.107,354,4.107,355,4.107,356,4.107,357,4.107,358,4.107,359,5.303,360,3.49,361,4.107,362,4.107,363,4.107,364,3.49,365,5.303,366,4.107,367,4.107,368,4.107,369,4.107]],["title/classes/CoreEntity.html",[61,0.011,370,1.987]],["body/classes/CoreEntity.html",[7,0.023,15,0.263,16,0.263,17,0.232,20,1.159,24,0.807,28,0.644,29,1.022,31,0.872,33,0.392,60,0.263,61,0.016,65,0.016,66,0.016,72,0.396,73,2.122,82,2.262,146,1.421,240,2.642,245,2.294,260,1.513,288,2.968,370,2.853,371,1.614,372,3.205,373,1.48,374,4.231,375,4.231,376,6.006,377,6.006,378,5.635,379,3.772,380,3.772,381,3.772,382,5.635,383,3.772,384,3.772,385,3.772,386,5.635,387,3.766,388,4.262,389,3.772,390,1.614,391,4.262,392,5.016,393,5.016,394,3.772]],["title/classes/CreateUserDto.html",[61,0.011,81,1.84]],["body/classes/CreateUserDto.html",[7,0.023,15,0.265,16,0.265,17,0.234,24,0.81,26,0.88,27,0.967,28,0.689,29,0.776,33,0.297,60,0.265,61,0.017,65,0.017,66,0.017,72,0.399,81,2.659,82,2.132,137,1.348,249,2.074,267,3.568,268,3.464,371,1.629,373,1.489,390,1.629,395,5.33,396,3.236,397,4.289,398,3.808,399,3.464,400,3.808,401,3.808,402,3.808,403,3.236,404,3.808,405,2.859]],["title/modules/DatabaseModule.html",[0,1.03,192,1.987]],["body/modules/DatabaseModule.html",[0,1.589,2,1.688,7,0.024,8,3.064,15,0.293,16,0.293,17,0.259,19,2.837,33,0.506,37,0.804,57,1.584,60,0.293,61,0.014,65,0.018,66,0.018,73,1.584,144,1.401,146,1.584,150,1.318,192,3.064,196,3.575,197,2.848,198,2.061,260,1.688,406,4.207,407,5.941,408,4.207,409,3.064,410,4.207,411,4.207,412,4.207,413,4.207,414,4.207,415,4.577,416,4.207,417,4.044,418,4.207,419,4.207,420,4.207]],["title/classes/JWT1669729219582.html",[61,0.011,421,2.622]],["body/classes/JWT1669729219582.html",[7,0.023,15,0.238,16,0.238,17,0.21,20,1.085,24,0.72,26,1.085,27,0.904,28,0.613,29,0.956,31,1.085,33,0.267,60,0.238,61,0.011,62,2.008,65,0.015,66,0.015,72,0.358,73,2.352,87,1.303,145,2.314,146,1.767,154,2.314,167,4.026,245,2.638,249,1.008,260,1.371,267,1.945,268,1.801,288,2.472,371,1.463,373,1.384,374,2.567,375,2.567,421,4.331,422,4.902,423,2.905,424,4.554,425,5.307,426,3.988,427,3.524,428,3.177,429,2.113,430,3.419,431,3.988,432,5.617,433,3.419,434,3.988,435,3.419,436,2.905,437,3.524,438,2.905,439,2.905,440,3.988,441,2.905,442,5.137,443,2.905,444,2.314,445,2.905,446,2.905]],["title/guards/JwtAuthGuard.html",[124,1.84,447,2.364]],["body/guards/JwtAuthGuard.html",[7,0.024,15,0.232,16,0.232,17,0.205,20,1.064,24,0.618,26,1.064,27,0.667,28,0.526,29,0.938,31,0.768,33,0.468,37,0.635,57,1.734,60,0.232,61,0.011,62,1.422,65,0.015,66,0.015,72,0.349,87,1.719,97,2.782,106,1.422,110,2.496,117,1.751,118,3.034,119,2.25,124,2.425,137,1.177,144,1.993,150,1.042,169,2.845,176,2.825,209,1.203,245,2.105,253,3.575,254,2.845,258,3.116,448,2.25,449,3.575,450,2.496,451,4.28,452,2.825,453,3.324,454,3.457,455,3.859,456,2.825,457,2.25,458,3.965,459,2.25,460,2.825,461,2.25,462,2.25,463,3.912,464,2.825,465,2.496,466,2.825,467,5.281,468,3.324,469,2.825,470,3.324,471,3.324,472,3.324]],["title/interfaces/JwtAuthPayload.html",[128,1.84,473,2.158]],["body/interfaces/JwtAuthPayload.html",[7,0.023,15,0.304,16,0.304,17,0.268,28,0.691,33,0.43,60,0.304,65,0.018,66,0.018,72,0.457,128,2.902,167,3.733,240,3.182,254,3.733,288,3.343,305,5.393,328,2.586,373,1.625,473,2.694,474,3.273,475,3.705,476,3.405,477,6.04,478,3.705,479,3.273]],["title/injectables/JwtMiddleware.html",[47,2.364,209,0.913]],["body/injectables/JwtMiddleware.html",[7,0.024,15,0.227,16,0.227,17,0.2,20,1.048,24,0.609,26,1.048,27,0.656,28,0.518,29,0.924,31,0.752,33,0.464,37,0.621,42,1.594,47,3.069,57,1.225,60,0.227,61,0.011,62,1.392,65,0.015,66,0.015,72,0.341,73,1.966,80,3.212,85,3.226,87,1.259,97,2.975,101,2.442,106,1.392,127,3.498,128,2.388,129,2.442,134,2.886,135,2.442,137,1.151,138,1.594,139,1.94,144,1.738,146,1.225,153,3.404,169,2.01,177,3.853,185,2.764,209,1.185,210,1.594,306,2.764,310,2.764,311,2.764,332,2.764,333,1.594,465,2.442,480,2.764,481,3.853,482,3.252,483,3.252,484,3.853,485,4.798,486,4.798,487,3.252,488,3.252,489,3.853,490,2.01,491,3.252,492,3.252,493,3.252,494,3.252,495,3.252,496,3.252,497,3.252,498,3.252,499,3.252,500,2.442]],["title/injectables/LoggerMiddleware.html",[44,2.364,209,0.913]],["body/injectables/LoggerMiddleware.html",[7,0.024,15,0.247,16,0.247,17,0.218,20,1.113,24,0.477,26,0.821,27,0.514,28,0.406,29,0.723,31,0.821,32,2.403,33,0.427,37,0.678,44,3.26,57,1.337,60,0.247,61,0.012,62,1.519,65,0.016,66,0.016,72,0.372,80,3.333,85,3.377,97,3.087,101,2.665,106,1.519,130,2.359,144,2.151,209,1.258,210,1.739,481,4.092,484,4.092,485,4.979,486,4.979,489,4.092,501,3.016,502,3.55,503,3.55,504,3.55,505,4.815,506,3.55,507,3.55,508,3.55,509,3.55,510,3.55,511,3.55,512,3.55,513,3.55,514,3.55,515,3.55,516,4.815,517,3.55,518,3.55,519,3.55,520,3.55,521,3.55,522,3.55]],["title/classes/LoggerService.html",[61,0.011,130,1.711]],["body/classes/LoggerService.html",[7,0.024,15,0.187,16,0.187,17,0.165,20,0.914,24,0.801,26,1.333,27,0.835,28,0.682,29,1.175,31,1.275,32,3.733,33,0.366,37,0.513,57,1.012,59,1.149,60,0.187,61,0.009,62,1.692,65,0.013,66,0.013,72,0.282,130,2.298,137,0.951,138,2.298,144,0.894,249,2.034,371,1.149,373,1.166,415,2.283,523,2.017,524,4.691,525,3.986,526,4.691,527,3.953,528,3.953,529,3.953,530,3.953,531,3.953,532,3.953,533,3.953,534,3.953,535,3.953,536,2.686,537,5.767,538,3.953,539,5.173,540,2.686,541,3.953,542,2.686,543,3.953,544,2.686,545,3.953,546,2.686,547,2.686,548,2.686,549,1.819,550,3.986,551,3.953,552,3.953,553,3.953,554,3.36,555,3.953,556,3.953,557,2.283,558,2.283,559,2.686,560,4.691,561,2.686,562,2.686,563,2.686,564,2.686,565,2.686,566,2.686,567,2.686,568,2.017,569,3.953,570,3.953,571,2.686,572,2.686,573,2.686,574,2.686]],["title/classes/LoginDto.html",[61,0.011,93,2.158]],["body/classes/LoginDto.html",[7,0.023,15,0.288,16,0.288,17,0.255,24,0.791,26,0.956,27,0.599,28,0.674,29,0.843,33,0.323,60,0.288,61,0.017,65,0.017,66,0.017,72,0.434,82,2.006,93,3.292,137,1.464,249,2.042,267,3.663,268,3.533,371,1.769,373,1.571,390,1.769,397,4.526,399,3.392,403,3.514,405,3.105,575,3.514,576,4.135,577,4.135,578,4.135,579,3.514,580,3.105]],["title/entities/Role.html",[273,1.401,581,1.84]],["body/entities/Role.html",[7,0.024,15,0.286,16,0.286,17,0.253,24,0.712,27,0.85,28,0.606,33,0.459,59,2.269,60,0.37,61,0.017,65,0.017,66,0.017,72,0.431,82,1.997,249,1.564,260,1.647,273,2.127,328,2.212,370,3.017,373,1.564,390,1.757,399,2.794,476,2.538,581,2.794,582,2.538,583,3.084,584,2.686,585,3.084,586,4.107,587,4.107,588,4.107,589,3.49,590,3.976,591,3.49,592,4.107,593,3.49,594,3.084,595,3.49,596,3.084,597,3.49,598,3.084]],["title/classes/Role1670203037069.html",[61,0.011,599,2.622]],["body/classes/Role1670203037069.html",[7,0.022,15,0.155,16,0.155,17,0.137,20,0.793,24,0.562,26,0.793,27,0.858,28,0.479,29,0.699,31,0.793,33,0.174,60,0.155,61,0.007,62,1.467,65,0.011,66,0.011,72,0.664,73,2.022,87,1.604,146,2.545,167,3.913,245,2.151,249,0.656,260,0.892,273,1.679,288,2.478,314,3.557,371,0.952,373,1.012,374,2.575,375,2.575,424,3.557,425,4.562,426,2.914,427,2.575,428,2.833,429,1.375,431,2.914,432,5.036,434,2.914,436,3.997,437,4.895,438,4.318,439,2.914,440,3.997,441,2.914,442,3.997,443,3.557,444,4.012,445,3.557,446,4.909,584,1.568,590,1.506,598,3.532,599,3.532,600,3.997,601,1.89,602,2.225,603,2.225,604,2.225,605,3.43,606,4.185,607,3.43,608,4.909,609,5.926,610,4.703,611,3.43,612,3.43,613,6.052,614,5.081,615,3.43,616,3.43,617,4.185,618,3.43,619,5.368,620,4.185,621,3.43,622,3.43,623,4.185,624,3.43,625,4.703,626,3.43,627,2.225,628,5.081]],["title/entities/RoleGroup.html",[333,1.711,581,1.84]],["body/entities/RoleGroup.html",[7,0.024,15,0.258,16,0.258,17,0.228,24,0.75,27,0.863,28,0.638,33,0.466,59,2.389,60,0.258,61,0.016,65,0.016,66,0.016,72,0.388,82,2.102,249,1.758,260,1.485,273,2.565,328,2.102,333,2.427,370,2.818,373,1.461,387,2.78,390,1.584,399,2.941,476,2.288,581,2.61,582,2.288,584,2.553,585,2.78,590,3.779,591,3.146,598,2.78,608,4.21,629,4.476,630,3.146,631,3.702,632,3.702,633,3.702,634,3.702,635,4.954,636,4.954,637,3.702,638,3.702,639,4.954,640,4.954,641,3.702]],["title/guards/RoleGuard.html",[447,2.364,642,2.364]],["body/guards/RoleGuard.html",[7,0.024,15,0.231,16,0.231,17,0.204,20,1.062,24,0.617,26,1.062,27,0.665,28,0.525,29,0.936,31,0.766,33,0.496,37,0.633,40,2.489,59,1.418,60,0.231,61,0.011,62,1.418,65,0.015,66,0.015,72,0.348,87,1.718,97,2.778,106,1.418,117,1.746,137,1.173,144,1.896,150,1.784,209,1.201,245,2.101,254,2.839,258,3.854,312,3.11,328,1.248,448,2.244,451,4.275,454,3.45,455,3.854,457,2.244,458,3.959,459,2.244,461,2.244,462,2.244,479,2.489,490,2.049,642,3.11,643,2.817,644,3.315,645,6.186,646,3.315,647,3.315,648,2.489,649,3.315,650,5.273,651,3.315,652,3.315,653,4.595,654,3.315,655,3.315,656,3.315,657,3.315]],["title/modules/RoleModule.html",[0,1.03,9,2.158]],["body/modules/RoleModule.html",[0,1.289,2,1.238,3,2.141,7,0.024,9,3.842,12,2.486,13,1.755,14,1.755,15,0.215,16,0.215,17,0.19,19,1.625,20,0.713,24,0.414,27,0.843,31,0.713,33,0.455,37,0.589,53,2.486,57,1.162,59,1.32,60,0.215,61,0.01,62,1.32,65,0.014,66,0.014,73,1.646,87,0.857,130,1.512,139,1.87,144,1.027,146,2.193,195,2.958,197,2.089,198,1.512,273,2.213,328,2.277,333,2.141,490,1.907,525,4.311,554,2.622,558,2.622,584,2.663,594,2.317,596,2.317,658,2.622,659,2.622,660,2.622,661,4.197,662,3.086,663,5.823,664,3.086,665,2.622,666,2.317,667,2.089,668,3.086,669,3.086,670,3.086,671,3.086,672,4.369,673,4.369,674,3.086,675,4.369,676,2.622,677,3.086,678,3.086,679,5.073,680,3.086,681,3.086,682,4.369,683,3.086,684,3.086,685,3.086]],["title/injectables/RoleService.html",[209,0.913,661,2.158]],["body/injectables/RoleService.html",[7,0.024,15,0.172,16,0.172,17,0.152,20,0.858,24,0.75,26,1.292,27,0.946,28,0.639,29,1.139,31,1.23,33,0.453,37,0.471,60,0.172,61,0.008,65,0.012,66,0.012,72,0.259,73,2.482,91,3.601,137,1.313,138,1.818,139,1.587,144,1.771,146,2.003,150,1.667,198,1.208,209,0.969,210,1.208,223,4.353,240,2.349,249,1.315,260,0.989,264,1.852,273,1.488,288,1.299,328,2.105,333,1.208,584,2.268,661,2.293,665,2.096,666,1.852,667,1.67,686,2.096,687,3.71,688,3.71,689,3.71,690,4.459,691,4.459,692,2.466,693,4.459,694,2.466,695,3.71,696,3.71,697,2.466,698,3.71,699,2.466,700,3.71,701,2.466,702,2.466,703,2.466,704,3.358,705,2.466,706,2.466,707,3.358,708,2.466,709,3.71,710,2.466,711,2.466,712,2.466,713,2.466,714,3.71,715,2.466,716,2.466,717,2.466,718,2.466,719,2.466,720,2.466,721,3.71,722,2.466,723,2.466,724,2.466,725,2.466,726,2.466,727,2.466,728,2.466,729,2.466,730,2.466,731,2.466,732,3.71,733,2.466]],["title/classes/SaveRoleDto.html",[61,0.011,704,2.364]],["body/classes/SaveRoleDto.html",[7,0.023,15,0.311,16,0.311,17,0.274,24,0.75,27,0.883,28,0.639,33,0.436,60,0.311,61,0.018,65,0.018,66,0.018,72,0.467,82,2.104,249,1.648,328,2.298,371,1.907,373,1.648,390,1.907,399,3.214,584,2.79,589,3.787,597,4.747,667,3.017,704,3.782,734,4.581,735,3.787,736,4.456,737,4.456]],["title/classes/SaveRoleGroupDto.html",[61,0.011,707,2.364]],["body/classes/SaveRoleGroupDto.html",[7,0.023,15,0.29,16,0.29,17,0.256,24,0.794,27,0.856,28,0.676,33,0.418,60,0.29,61,0.018,65,0.018,66,0.018,72,0.437,82,2.226,249,1.84,273,2.695,328,2.226,371,1.781,373,1.578,387,3.126,390,1.781,399,3.4,584,2.703,667,2.819,707,3.622,734,4.685,738,3.538,739,4.163,740,4.163,741,5.35,742,4.163,743,3.538]],["title/controllers/TestController.html",[67,1.84,744,2.364]],["body/controllers/TestController.html",[7,0.024,15,0.238,16,0.238,17,0.21,20,1.083,24,0.629,26,1.083,27,0.678,28,0.536,29,0.955,31,1.083,33,0.522,37,0.651,52,1.67,60,0.238,61,0.011,65,0.015,66,0.015,67,1.796,70,2.56,72,0.357,80,1.939,82,1.764,85,2.107,87,1.874,106,1.459,109,3.171,111,2.56,117,1.796,120,2.107,124,1.796,126,3.171,139,1.459,141,2.56,150,1.468,273,1.367,328,1.284,449,2.308,469,3.98,479,2.56,490,2.107,642,2.308,676,2.897,744,3.171,745,2.897,746,2.897,747,3.98,748,4.684,749,3.409,750,3.409,751,3.409,752,3.409,753,3.409,754,3.409,755,3.409,756,3.409,757,2.897,758,2.308,759,2.56,760,3.409,761,3.044,762,2.897,763,3.409,764,3.409,765,3.409,766,3.409,767,4.684,768,3.409,769,3.409,770,3.409]],["title/modules/TestModule.html",[0,1.03,10,2.158]],["body/modules/TestModule.html",[0,1.578,2,1.67,3,2.622,6,3.48,7,0.023,10,4.205,12,3.043,13,2.368,14,2.368,15,0.29,16,0.29,17,0.256,19,2.818,33,0.504,37,0.795,41,4.017,42,2.04,52,2.622,53,3.043,60,0.29,61,0.014,65,0.018,66,0.018,127,2.368,744,4.002,761,3.757,762,3.538,771,3.538,772,4.163,773,3.538,774,4.163,775,3.538,776,4.163]],["title/injectables/TestService.html",[209,0.913,761,1.987]],["body/injectables/TestService.html",[7,0.023,15,0.337,16,0.337,17,0.297,20,1.357,24,0.649,31,1.117,33,0.377,37,0.923,60,0.337,61,0.016,65,0.019,66,0.019,72,0.507,150,1.514,209,1.535,210,2.368,249,1.425,747,5.592,761,3.34,777,4.106,778,4.832,779,4.832,780,4.832]],["title/modules/TotpModule.html",[0,1.03,193,2.158]],["body/modules/TotpModule.html",[0,1.747,2,1.676,7,0.024,15,0.291,16,0.291,17,0.257,20,0.966,24,0.561,26,0.966,27,0.605,28,0.478,29,0.851,31,0.966,33,0.488,37,0.798,53,2.377,54,3.55,56,3.55,60,0.291,61,0.014,65,0.018,66,0.018,114,3.368,150,1.309,193,3.659,195,2.828,409,3.05,781,4.178,782,5.362,783,4.178,784,5.362,785,3.861,786,4.178,787,5.921,788,3.63,789,3.55,790,3.55,791,4.178]],["title/interfaces/TotpModuleOptions.html",[473,2.158,785,2.158]],["body/interfaces/TotpModuleOptions.html",[7,0.023,15,0.34,16,0.34,17,0.3,28,0.675,60,0.34,65,0.019,66,0.019,72,0.511,205,5.607,207,5.607,240,3.619,373,1.741,473,3.01,474,3.657,785,3.647,792,4.139]],["title/injectables/TotpService.html",[114,1.987,209,0.913]],["body/injectables/TotpService.html",[7,0.024,15,0.189,16,0.189,17,0.166,20,0.918,24,0.776,26,1.278,27,0.801,28,0.632,29,1.127,31,1.278,33,0.479,37,0.517,60,0.189,61,0.009,65,0.013,66,0.013,72,0.284,80,2.679,106,1.157,114,2.26,137,0.957,138,2.543,139,1.157,144,1.323,150,1.245,209,1.038,210,1.325,240,2.093,249,1.96,312,2.69,409,2.26,428,3.188,429,2.455,444,2.69,549,3.514,568,3.897,580,2.031,785,3.207,788,1.831,789,2.298,790,2.298,793,2.298,794,3.973,795,4.709,796,3.973,797,3.973,798,3.973,799,2.704,800,2.704,801,2.704,802,3.376,803,2.704,804,2.704,805,2.704,806,3.973,807,5.19,808,2.704,809,3.973,810,3.973,811,2.704,812,3.973,813,4.709,814,4.709,815,2.704,816,2.704,817,2.704,818,2.704,819,2.298,820,2.298,821,3.376,822,3.376,823,2.298,824,2.704,825,2.704,826,4.002,827,2.704,828,2.704,829,2.704,830,2.704,831,2.704,832,2.704,833,3.973,834,2.704,835,2.704,836,2.298,837,2.704,838,2.704]],["title/guards/TwoFactorAuthGuard.html",[447,2.364,758,2.364]],["body/guards/TwoFactorAuthGuard.html",[7,0.024,15,0.218,16,0.218,17,0.193,20,1.021,24,0.593,26,1.021,27,0.64,28,0.505,29,0.9,31,0.724,33,0.498,37,0.599,42,1.536,60,0.218,61,0.01,62,1.341,65,0.015,66,0.015,72,0.329,87,1.688,97,2.695,106,1.341,117,1.651,118,2.978,119,2.122,124,2.695,126,2.122,127,3.552,128,1.651,129,2.353,137,1.109,139,1.341,144,1.95,150,1.603,209,1.154,227,2.663,232,2.663,245,2.02,253,2.122,254,2.73,258,2.991,312,2.991,448,2.122,450,2.353,451,4.171,452,2.663,454,3.317,455,3.761,456,2.663,457,2.122,458,3.842,459,2.122,460,2.663,461,2.122,462,2.122,463,3.754,464,2.663,465,2.353,466,2.663,476,2.73,500,2.353,758,2.991,759,3.842,839,3.134,840,3.134,841,3.134,842,3.134,843,3.134]],["title/classes/TwoFactorLoginDto.html",[61,0.011,103,2.158]],["body/classes/TwoFactorLoginDto.html",[7,0.023,15,0.306,16,0.306,17,0.27,24,0.743,26,1.015,27,0.636,28,0.633,29,0.895,33,0.343,60,0.306,61,0.018,65,0.018,66,0.018,72,0.46,82,1.654,103,3.42,137,1.554,206,4.703,249,1.935,295,4.925,371,1.879,373,1.633,390,1.879,579,4.703,580,3.297,844,5.15,845,3.732,846,5.534,847,4.391,848,4.391,849,4.391,850,4.391,851,4.391]],["title/entities/User.html",[87,0.97,581,1.84]],["body/entities/User.html",[7,0.024,15,0.204,16,0.204,17,0.18,24,0.798,27,0.713,28,0.679,29,1.211,33,0.464,59,2.442,60,0.204,61,0.016,65,0.014,66,0.014,72,0.307,73,1.585,82,2.238,87,1.169,145,3.336,146,1.585,150,0.918,154,3.336,245,1.925,249,1.934,260,1.174,267,2.803,268,2.596,333,3.126,360,2.488,370,2.394,373,1.242,388,4.578,390,1.253,391,3.577,399,3.13,405,3.16,476,1.809,581,2.217,582,1.809,585,3.16,590,4.023,629,2.199,666,2.199,743,2.488,852,2.488,853,2.928,854,2.928,855,2.928,856,2.928,857,2.928,858,4.209,859,2.928,860,2.928,861,2.928,862,2.928,863,2.928,864,2.928,865,2.928,866,2.488,867,4.209,868,2.488,869,4.928,870,4.209,871,4.209,872,2.928,873,2.928,874,4.209,875,2.928,876,2.928,877,2.928,878,2.928,879,2.928,880,2.928]],["title/controllers/UserController.html",[67,1.84,881,2.364]],["body/controllers/UserController.html",[7,0.024,15,0.239,16,0.239,17,0.211,20,1.087,24,0.46,26,0.792,27,0.496,28,0.392,29,0.699,31,0.792,33,0.509,37,0.655,52,1.68,60,0.239,61,0.011,65,0.015,66,0.015,67,1.806,70,2.574,72,0.36,73,1.771,81,1.806,82,1.291,87,1.858,107,2.913,109,2.321,111,2.574,120,2.119,124,1.806,126,2.321,133,2.321,134,2.454,139,1.467,141,2.574,146,1.771,150,1.682,449,2.321,490,2.119,757,2.913,881,3.183,882,2.913,883,4.702,884,3.428,885,3.428,886,3.428,887,4.561,888,4.702,889,3.428,890,3.428,891,3.428,892,3.428,893,2.913,894,2.574,895,2.913,896,3.428,897,3.428,898,3.428,899,3.428,900,3.428,901,4.702,902,3.428,903,3.428,904,3.428,905,3.428]],["title/modules/UserModule.html",[0,1.03,11,1.987]],["body/modules/UserModule.html",[0,1.511,2,1.562,3,2.51,6,3.417,7,0.024,11,3.861,12,2.914,13,2.215,14,2.215,15,0.271,16,0.271,17,0.24,19,2.698,33,0.517,37,0.744,52,2.51,53,2.914,60,0.271,61,0.013,65,0.017,66,0.017,87,1.081,134,3.178,192,2.215,195,3.468,197,2.636,198,1.908,203,3.309,775,3.309,881,3.875,894,2.924,895,3.309,906,3.309,907,3.894,908,3.309,909,3.309,910,3.894,911,3.894,912,3.894]],["title/injectables/UserService.html",[134,1.597,209,0.913]],["body/injectables/UserService.html",[7,0.024,15,0.257,16,0.257,17,0.227,20,1.143,24,0.664,26,1.143,27,0.716,28,0.565,29,1.007,31,0.853,33,0.485,37,0.705,57,1.39,60,0.257,61,0.012,65,0.016,66,0.016,72,0.387,73,2.099,81,1.944,87,1.653,133,2.499,134,2.261,137,1.307,138,1.809,139,1.579,144,1.229,146,1.39,150,1.157,169,2.281,198,1.809,209,1.292,210,1.809,222,3.137,223,4.471,225,4.201,236,3.137,240,2.936,242,4.201,245,2.261,260,1.481,261,3.137,263,3.137,264,2.772,283,3.137,284,3.137,288,1.944,331,3.137,409,3.387,893,3.137,894,2.772,913,3.137,914,4.944,915,3.691,916,4.944,917,5.954,918,3.691,919,3.691]],["title/coverage.html",[920,4.047]],["body/coverage.html",[7,0.023,17,0.167,28,0.311,44,1.839,47,1.839,57,1.023,61,0.021,65,0.013,66,0.013,67,2.487,68,1.839,69,2.309,81,1.431,87,0.754,93,1.679,103,1.679,114,1.545,118,1.331,120,1.679,124,1.431,128,1.431,130,1.331,134,1.242,209,1.564,211,2.309,273,1.894,333,1.331,370,1.545,372,2.309,395,2.309,396,2.309,409,1.545,421,2.04,422,2.309,423,2.309,437,2.04,447,3.196,449,1.839,450,2.993,473,2.463,475,2.309,480,2.309,501,2.309,523,2.993,575,2.309,581,2.487,583,2.04,599,2.04,600,2.309,601,2.309,629,2.04,630,2.309,642,1.839,643,2.309,648,2.04,661,1.679,686,2.309,704,1.839,707,1.839,734,2.993,735,2.309,738,2.309,744,1.839,745,2.309,758,1.839,759,2.04,761,1.545,777,2.309,785,1.679,788,1.839,792,2.309,793,2.309,836,6.055,844,2.309,845,2.309,852,2.309,881,1.839,882,2.309,913,2.309,920,2.309,921,2.717,922,2.717,923,2.717,924,5.539,925,2.717,926,2.717,927,3.387,928,5.983,929,6.453,930,2.309,931,6.262,932,3.986,933,2.309,934,2.717,935,2.309,936,3.387,937,2.309,938,4.721,939,2.717,940,2.309,941,3.986,942,2.717]],["title/dependencies.html",[3,2.058,943,2.48]],["body/dependencies.html",[3,2.033,7,0.024,37,0.793,40,3.115,42,2.033,61,0.018,65,0.018,66,0.018,106,1.775,113,2.809,198,2.033,260,1.664,335,3.526,390,1.775,459,2.809,478,3.526,549,2.809,550,4.536,819,3.526,820,3.526,821,3.526,822,3.526,823,3.526,866,3.526,868,3.526,944,5.902,945,4.149,946,5.338,947,4.149,948,4.149,949,5.338,950,4.149,951,4.149,952,4.149,953,4.149,954,4.149,955,4.149,956,4.149,957,4.149,958,4.149,959,4.149,960,4.149,961,4.149,962,4.149,963,4.149,964,4.149,965,4.149,966,4.149,967,4.149,968,4.149]],["title/miscellaneous/enumerations.html",[969,1.66,970,3.569]],["body/miscellaneous/enumerations.html",[7,0.022,65,0.02,66,0.02,72,0.549,328,2.319,429,3.805,583,3.928,593,4.445,594,3.928,595,4.445,596,3.928,969,2.976,970,4.445,971,5.231]],["title/miscellaneous/functions.html",[969,1.66,972,3.569]],["body/miscellaneous/functions.html",[7,0.021,65,0.021,66,0.021,72,0.566,933,4.585,935,5.632,969,3.069,972,4.585,973,5.395]],["title/index.html",[72,0.306,974,2.919,975,2.919]],["body/index.html",[7,0.024,27,0.494,65,0.015,66,0.015,109,3.171,138,1.67,253,2.308,267,2.665,268,2.467,295,2.56,364,2.897,417,2.56,427,2.56,444,2.308,500,2.56,549,2.308,568,4.535,584,1.559,746,2.897,802,2.897,826,3.98,887,2.897,976,3.409,977,3.409,978,3.409,979,3.409,980,3.409,981,3.409,982,3.409,983,3.409,984,3.409,985,3.409,986,3.409,987,5.761,988,3.409,989,5.351,990,4.684,991,4.684,992,3.409,993,3.409,994,3.409,995,3.409,996,3.409,997,3.409,998,3.409,999,2.897,1000,3.409,1001,3.409,1002,4.684,1003,3.409,1004,4.684,1005,4.684,1006,4.684,1007,3.409,1008,4.684,1009,3.409,1010,3.409,1011,3.409,1012,5.761,1013,3.409,1014,2.897,1015,3.409,1016,3.409,1017,3.409,1018,3.409,1019,3.409]],["title/modules.html",[2,1.91]],["body/modules.html",[1,3.219,2,1.908,6,2.505,7,0.019,8,2.705,9,2.939,10,2.939,11,2.705,65,0.019,66,0.019,192,2.705,193,2.939,1020,6.713,1021,6.713,1022,6.713,1023,6.982,1024,6.282,1025,6.282]],["title/overview.html",[1026,4.047]],["body/overview.html",[1,4.627,2,1.403,3,2.336,4,2.973,5,2.973,6,3.6,7,0.023,8,3.085,9,3.886,10,3.977,11,3.726,12,2.712,13,1.99,14,1.99,52,1.714,65,0.016,66,0.016,118,3.153,134,2.943,188,2.973,189,2.973,190,2.973,191,2.973,192,3.085,193,3.352,210,1.714,371,1.497,448,2.368,474,2.627,582,2.162,658,2.973,659,2.973,660,2.973,661,3.977,761,3.085,771,2.973,773,2.973,906,2.973,908,2.973,909,2.973,1014,2.973,1026,2.973,1027,3.498,1028,5.423,1029,3.498,1030,3.498]],["title/properties.html",[373,1.239,943,2.48]],["body/properties.html",[7,0.023,65,0.02,66,0.02,373,1.57,584,2.434,1031,5.323,1032,5.323,1033,5.323,1034,5.323,1035,5.323]],["title/miscellaneous/variables.html",[969,1.66,1036,3.569]],["body/miscellaneous/variables.html",[7,0.024,28,0.681,57,1.39,59,1.579,65,0.016,66,0.016,72,0.387,91,2.499,97,1.944,120,3.055,144,1.229,150,1.157,249,1.458,268,1.944,273,1.983,328,2.242,345,4.201,347,3.137,409,2.812,417,2.772,428,4.417,429,4.032,455,2.499,457,2.499,461,2.499,462,2.499,523,2.772,557,3.137,582,2.281,648,3.712,788,3.774,927,3.137,930,3.137,936,3.137,937,4.201,940,3.137,969,2.1,999,3.137,1036,3.137,1037,4.944,1038,3.691,1039,3.691,1040,4.944,1041,3.691,1042,3.691,1043,3.691,1044,3.691,1045,3.691,1046,3.691,1047,3.691,1048,3.691,1049,3.691,1050,3.691,1051,3.691,1052,3.691,1053,4.944,1054,3.691,1055,3.691,1056,3.691,1057,3.691,1058,3.691,1059,3.691,1060,3.691]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":836,"title":{},"body":{"injectables/TotpService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1032,"title":{},"body":{"properties.html":{}}}],["0.0.14",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":929,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":932,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":925,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":939,"title":{},"body":{"coverage.html":{}}}],["0123456789abcdefghijklmnopqrstuvwxtzabcdefghiklmnopqrstuvwxyz",{"_index":834,"title":{},"body":{"injectables/TotpService.html":{}}}],["035579",{"_index":1016,"title":{},"body":{"index.html":{}}}],["1",{"_index":364,"title":{},"body":{"modules/ConfigurationModule.html":{},"index.html":{}}}],["1.4.6",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["1.5.1",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":360,"title":{},"body":{"modules/ConfigurationModule.html":{},"entities/User.html":{}}}],["1000",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["10s",{"_index":361,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["17.6.0",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["1h",{"_index":365,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["2",{"_index":1014,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.2.0",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["2fa",{"_index":568,"title":{},"body":{"classes/LoggerService.html":{},"injectables/TotpService.html":{},"index.html":{}}}],["2fa&algorithm=sha1&digits=6&period=30",{"_index":1011,"title":{},"body":{"index.html":{}}}],["3",{"_index":1028,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["3.8.1",{"_index":968,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":809,"title":{},"body":{"injectables/TotpService.html":{}}}],["423",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["5.1.0",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"classes/TwoFactorLoginDto.html":{}}}],["60",{"_index":363,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["7",{"_index":1029,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1027,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1030,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":465,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["_auth",{"_index":508,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["_auth}`.replace",{"_index":522,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["_body",{"_index":516,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["_headers",{"_index":510,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["_query",{"_index":513,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["_url",{"_index":519,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["a3vkmvorwzbcs7dayvkxp_nrfxxgbaqetlnjld9zuznc8grei4xgwvviv2utc4f2l3hy6q_krlvxtcfgfsdagqmxokxtg46zfmtkhuxksmtvpchvjfp8ziutwj8cefx2wnkrdalrdr3ukbfnijdtenpobefsgwioweefq1dup",{"_index":1018,"title":{},"body":{"index.html":{}}}],["accesspayload",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtMiddleware.html":{}}}],["accesspayload['id",{"_index":494,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["accesstoken",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{}}}],["action",{"_index":622,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["add",{"_index":614,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["admin",{"_index":683,"title":{},"body":{"modules/RoleModule.html":{}}}],["already",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["api",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["app",{"_index":989,"title":{},"body":{"index.html":{}}}],["app_interceptor",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app_pipe",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["appdatasource",{"_index":937,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["applications",{"_index":984,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arr",{"_index":702,"title":{},"body":{"injectables/RoleService.html":{}}}],["async",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"injectables/JwtMiddleware.html":{},"classes/Role1670203037069.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":450,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":453,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["auth.guard.ts:14",{"_index":456,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["auth.guard.ts:19",{"_index":839,"title":{},"body":{"guards/TwoFactorAuthGuard.html":{}}}],["auth.interface",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtMiddleware.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["auth.service",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["auth/auth.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/dto/create",{"_index":893,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth/middleware/jwt.middleware",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":68,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":891,"title":{},"body":{"controllers/UserController.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TestModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1035,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":463,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["authorization.split",{"_index":466,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["authservice",{"_index":118,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["authuser",{"_index":888,"title":{},"body":{"controllers/UserController.html":{}}}],["auto_increment",{"_index":439,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["available",{"_index":1025,"title":{},"body":{"modules.html":{}}}],["await",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"injectables/JwtMiddleware.html":{},"classes/Role1670203037069.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["base",{"_index":674,"title":{},"body":{"modules/RoleModule.html":{}}}],["base32",{"_index":820,"title":{},"body":{"injectables/TotpService.html":{},"dependencies.html":{}}}],["bcrypt",{"_index":866,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["bearer",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["beforeinsert",{"_index":391,"title":{},"body":{"classes/CoreEntity.html":{},"entities/User.html":{}}}],["beforeinsert()@beforeupdate",{"_index":384,"title":{},"body":{"classes/CoreEntity.html":{}}}],["beforeupdate",{"_index":392,"title":{},"body":{"classes/CoreEntity.html":{}}}],["body",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["bootstrap",{"_index":935,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1023,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1020,"title":{},"body":{"modules.html":{}}}],["build",{"_index":990,"title":{},"body":{"index.html":{}}}],["building",{"_index":979,"title":{},"body":{"index.html":{}}}],["bytes",{"_index":831,"title":{},"body":{"injectables/TotpService.html":{}}}],["bytes.length",{"_index":838,"title":{},"body":{"injectables/TotpService.html":{}}}],["canactivate",{"_index":451,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["canactivate(context",{"_index":454,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["cascade",{"_index":625,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["catch",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{}}}],["checkpassword(inputpassword",{"_index":879,"title":{},"body":{"entities/User.html":{}}}],["class",{"_index":61,"title":{"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"classes/Role1670203037069.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"classes/TwoFactorLoginDto.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":371,"title":{},"body":{"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"classes/Role1670203037069.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"classes/TwoFactorLoginDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_rolemodule",{"_index":658,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_rolemodule_exports",{"_index":659,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_rolemodule_providers",{"_index":660,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_testmodule",{"_index":771,"title":{},"body":{"modules/TestModule.html":{},"overview.html":{}}}],["cluster_testmodule_imports",{"_index":772,"title":{},"body":{"modules/TestModule.html":{}}}],["cluster_testmodule_providers",{"_index":773,"title":{},"body":{"modules/TestModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":906,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":909,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":907,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":908,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":826,"title":{},"body":{"injectables/TotpService.html":{},"index.html":{}}}],["column",{"_index":590,"title":{},"body":{"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"entities/User.html":{}}}],["combine",{"_index":552,"title":{},"body":{"classes/LoggerService.html":{}}}],["combine(nestwinstonmoduleutilities.format.nestlike('nest",{"_index":567,"title":{},"body":{"classes/LoggerService.html":{}}}],["compare",{"_index":865,"title":{},"body":{"entities/User.html":{}}}],["compare(inputpassword",{"_index":880,"title":{},"body":{"entities/User.html":{}}}],["completed",{"_index":685,"title":{},"body":{"modules/RoleModule.html":{}}}],["compose",{"_index":993,"title":{},"body":{"index.html":{}}}],["config/config.module",{"_index":408,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config_options",{"_index":788,"title":{},"body":{"modules/TotpModule.html":{},"injectables/TotpService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":336,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configmodule.forroot",{"_index":337,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["configurationmodule",{"_index":8,"title":{"modules/ConfigurationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["configure",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["conflictexception('account",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["connect",{"_index":419,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["connecting",{"_index":416,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["console.log",{"_index":415,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/LoggerService.html":{}}}],["console.log('unauthorized",{"_index":470,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["console.log(`generated2facode",{"_index":829,"title":{},"body":{"injectables/TotpService.html":{}}}],["console.log(err",{"_index":497,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["console.log(user",{"_index":469,"title":{},"body":{"guards/JwtAuthGuard.html":{},"controllers/TestController.html":{}}}],["const",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":617,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["constructor",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"guards/RoleGuard.html":{},"injectables/RoleService.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(config_options",{"_index":825,"title":{},"body":{"injectables/TotpService.html":{}}}],["constructor(@injectrepository(user",{"_index":919,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":452,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["constructor(email",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["constructor(jwtservice",{"_index":482,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["constructor(options",{"_index":799,"title":{},"body":{"injectables/TotpService.html":{}}}],["constructor(private",{"_index":490,"title":{},"body":{"injectables/JwtMiddleware.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{}}}],["constructor(readonly",{"_index":460,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["constructor(reflector",{"_index":644,"title":{},"body":{"guards/RoleGuard.html":{}}}],["constructor(rolerepository",{"_index":692,"title":{},"body":{"injectables/RoleService.html":{}}}],["constructor(service",{"_index":531,"title":{},"body":{"classes/LoggerService.html":{}}}],["constructor(twofactorcode",{"_index":846,"title":{},"body":{"classes/TwoFactorLoginDto.html":{}}}],["constructor(userrepository",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["consumer",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(jwtmiddleware).forroutes",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(loggermiddleware).forroutes",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":457,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["context.gethandler",{"_index":652,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":461,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":67,"title":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('/auth",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('/test",{"_index":763,"title":{},"body":{"controllers/TestController.html":{}}}],["controller('/user",{"_index":896,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["coreentity",{"_index":370,"title":{"classes/CoreEntity.html":{}},"body":{"classes/CoreEntity.html":{},"entities/Role.html":{},"entities/RoleGroup.html":{},"entities/User.html":{},"coverage.html":{}}}],["coverage",{"_index":920,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["createdat",{"_index":374,"title":{},"body":{"classes/CoreEntity.html":{},"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["createdatecolumn",{"_index":378,"title":{},"body":{"classes/CoreEntity.html":{}}}],["createparamdecorator((data",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createrole(@body",{"_index":900,"title":{},"body":{"controllers/UserController.html":{}}}],["createroledto",{"_index":901,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuser(@res",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuser(res",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuserdto",{"_index":81,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["crypto",{"_index":817,"title":{},"body":{"injectables/TotpService.html":{}}}],["current_timestamp(6",{"_index":441,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["d",{"_index":994,"title":{},"body":{"index.html":{}}}],["data",{"_index":672,"title":{},"body":{"modules/RoleModule.html":{}}}],["database",{"_index":417,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["databasemodule",{"_index":192,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["datasource",{"_index":407,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["datasource(opt).initialize",{"_index":418,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["datasource(options",{"_index":1042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasourcefactory",{"_index":413,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["datasourceoptions",{"_index":1043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":377,"title":{},"body":{"classes/CoreEntity.html":{}}}],["datetime(6",{"_index":440,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["db",{"_index":996,"title":{},"body":{"index.html":{}}}],["db_host",{"_index":349,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["db_name",{"_index":355,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["db_password",{"_index":354,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["db_port",{"_index":351,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["db_user",{"_index":353,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["debug",{"_index":526,"title":{},"body":{"classes/LoggerService.html":{}}}],["debug(message",{"_index":535,"title":{},"body":{"classes/LoggerService.html":{}}}],["decorator/role.decorator",{"_index":649,"title":{},"body":{"guards/RoleGuard.html":{}}}],["decorator/user.decorator",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"entities/RoleGroup.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":428,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{},"injectables/TotpService.html":{},"miscellaneous/variables.html":{}}}],["defaultmeta",{"_index":563,"title":{},"body":{"classes/LoggerService.html":{}}}],["defined",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"classes/Role1670203037069.html":{}}}],["deletedatecolumn",{"_index":393,"title":{},"body":{"classes/CoreEntity.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":584,"title":{},"body":{"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"index.html":{},"properties.html":{}}}],["destroyedat",{"_index":375,"title":{},"body":{"classes/CoreEntity.html":{},"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["digits",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/TotpModuleOptions.html":{}}}],["dist/**/*.entity.{js,ts",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dist/migrations/*{.ts,.js",{"_index":1056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["docker",{"_index":992,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["down",{"_index":426,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["down(queryrunner",{"_index":431,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["drop",{"_index":628,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["dto/2fa",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/save",{"_index":709,"title":{},"body":{"injectables/RoleService.html":{}}}],["dynamicmodule",{"_index":787,"title":{},"body":{"modules/TotpModule.html":{}}}],["eager",{"_index":636,"title":{},"body":{"entities/RoleGroup.html":{}}}],["efficient",{"_index":980,"title":{},"body":{"index.html":{}}}],["email",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"index.html":{}}}],["encode",{"_index":818,"title":{},"body":{"injectables/TotpService.html":{}}}],["engine=innodb",{"_index":445,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["entities",{"_index":582,"title":{},"body":{"entities/Role.html":{},"entities/RoleGroup.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":581,"title":{"entities/Role.html":{},"entities/RoleGroup.html":{},"entities/User.html":{}},"body":{"entities/Role.html":{},"entities/RoleGroup.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity/role",{"_index":665,"title":{},"body":{"modules/RoleModule.html":{},"injectables/RoleService.html":{}}}],["entity/role.entity",{"_index":667,"title":{},"body":{"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{}}}],["enum",{"_index":592,"title":{},"body":{"entities/Role.html":{}}}],["enumerations",{"_index":970,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env.${process.env.node_env",{"_index":340,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["envfilepath",{"_index":339,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["err",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{}}}],["error",{"_index":527,"title":{},"body":{"classes/LoggerService.html":{}}}],["error(message",{"_index":538,"title":{},"body":{"classes/LoggerService.html":{}}}],["errors",{"_index":551,"title":{},"body":{"classes/LoggerService.html":{}}}],["example",{"_index":985,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":867,"title":{},"body":{"entities/User.html":{}}}],["exclude({toplainonly",{"_index":855,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":455,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["existrole",{"_index":714,"title":{},"body":{"injectables/RoleService.html":{}}}],["existrolegroup",{"_index":721,"title":{},"body":{"injectables/RoleService.html":{}}}],["exists",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/TotpModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TestController.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":476,"title":{},"body":{"interfaces/JwtAuthPayload.html":{},"entities/Role.html":{},"entities/RoleGroup.html":{},"guards/TwoFactorAuthGuard.html":{},"entities/User.html":{}}}],["eyjhbgcioijsuzi1niisinr5cci6ikpxvcj9.eyjpzci6nywizw1hawwioij0zxn0qgv4yw1wbguuy29tiiwibmftzsi6inrlc3qilcjpyxqioje2njg3ntuymjl9.a3kfquifib5bqesgqn1irbotud7lytkn5vkbjkf0r25q47x_mk25iziioym7gpjkainnca8to_fgeo_c",{"_index":1017,"title":{},"body":{"index.html":{}}}],["failed",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"guards/RoleGuard.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["file",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["filter",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["findbyid",{"_index":914,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(userid",{"_index":916,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneoptions",{"_index":917,"title":{},"body":{"injectables/UserService.html":{}}}],["findrolebyname",{"_index":687,"title":{},"body":{"injectables/RoleService.html":{}}}],["findrolebyname(name",{"_index":696,"title":{},"body":{"injectables/RoleService.html":{}}}],["findrolegroupbyname",{"_index":688,"title":{},"body":{"injectables/RoleService.html":{}}}],["findrolegroupbyname(name",{"_index":698,"title":{},"body":{"injectables/RoleService.html":{}}}],["findrolesbyid",{"_index":689,"title":{},"body":{"injectables/RoleService.html":{}}}],["findrolesbyid(arr",{"_index":700,"title":{},"body":{"injectables/RoleService.html":{}}}],["finduser",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduser(filter",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["fk_171d67ef8913e9dc113831b9fad",{"_index":624,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["fk_34e11176bdc021644092329708f",{"_index":618,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["fk_90430aa399740cac39bff3ca7b8",{"_index":626,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["foreign",{"_index":619,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["format",{"_index":560,"title":{},"body":{"classes/LoggerService.html":{}}}],["forroot",{"_index":783,"title":{},"body":{"modules/TotpModule.html":{}}}],["forroot(options",{"_index":784,"title":{},"body":{"modules/TotpModule.html":{}}}],["found",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":978,"title":{},"body":{"index.html":{}}}],["function",{"_index":934,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":972,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateaccesstoken",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(payload",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatepayload",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatepayload(user",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateqrcode",{"_index":794,"title":{},"body":{"injectables/TotpService.html":{}}}],["generateqrcode(stream",{"_index":801,"title":{},"body":{"injectables/TotpService.html":{}}}],["generaterefreshtoken",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["generaterefreshtoken(payload",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatesecret",{"_index":795,"title":{},"body":{"injectables/TotpService.html":{}}}],["generatesecretascii",{"_index":796,"title":{},"body":{"injectables/TotpService.html":{}}}],["generatesecretascii(length",{"_index":806,"title":{},"body":{"injectables/TotpService.html":{}}}],["generatetwofactorcode",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["generatetwofactorcode(@res",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["generatetwofactorcode(res",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["generatetwofactorsecretforuser",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetwofactorsecretforuser(userid",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["generator",{"_index":823,"title":{},"body":{"injectables/TotpService.html":{},"dependencies.html":{}}}],["get('/2fa",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/2fa')@useguards(jwtauthguard)@header('content",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/me",{"_index":897,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/me')@useguards(jwtauthguard",{"_index":885,"title":{},"body":{"controllers/UserController.html":{}}}],["getcode",{"_index":797,"title":{},"body":{"injectables/TotpService.html":{}}}],["getcode(key",{"_index":810,"title":{},"body":{"injectables/TotpService.html":{}}}],["getcurrentuser",{"_index":883,"title":{},"body":{"controllers/UserController.html":{}}}],["getcurrentuser(@authuser",{"_index":904,"title":{},"body":{"controllers/UserController.html":{}}}],["getcurrentuser(@getuser",{"_index":898,"title":{},"body":{"controllers/UserController.html":{}}}],["getcurrentuser(user",{"_index":884,"title":{},"body":{"controllers/UserController.html":{}}}],["gethello",{"_index":747,"title":{},"body":{"controllers/TestController.html":{},"injectables/TestService.html":{}}}],["gethello(@getuser",{"_index":766,"title":{},"body":{"controllers/TestController.html":{}}}],["gethello(user",{"_index":749,"title":{},"body":{"controllers/TestController.html":{}}}],["getting",{"_index":974,"title":{"index.html":{}},"body":{}}],["geturl",{"_index":798,"title":{},"body":{"injectables/TotpService.html":{}}}],["geturl(key",{"_index":812,"title":{},"body":{"injectables/TotpService.html":{}}}],["getuser",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["graph",{"_index":1024,"title":{},"body":{"modules.html":{}}}],["group.dto",{"_index":710,"title":{},"body":{"injectables/RoleService.html":{}}}],["group.dto.ts",{"_index":738,"title":{},"body":{"classes/SaveRoleGroupDto.html":{},"coverage.html":{}}}],["group.dto.ts:12",{"_index":742,"title":{},"body":{"classes/SaveRoleGroupDto.html":{}}}],["group.dto.ts:6",{"_index":740,"title":{},"body":{"classes/SaveRoleGroupDto.html":{}}}],["group.dto.ts:9",{"_index":739,"title":{},"body":{"classes/SaveRoleGroupDto.html":{}}}],["group.entity",{"_index":666,"title":{},"body":{"modules/RoleModule.html":{},"injectables/RoleService.html":{},"entities/User.html":{}}}],["group.entity.ts",{"_index":630,"title":{},"body":{"entities/RoleGroup.html":{},"coverage.html":{}}}],["group.entity.ts:10",{"_index":633,"title":{},"body":{"entities/RoleGroup.html":{}}}],["group.entity.ts:14",{"_index":631,"title":{},"body":{"entities/RoleGroup.html":{}}}],["group.entity.ts:18",{"_index":638,"title":{},"body":{"entities/RoleGroup.html":{}}}],["groups",{"_index":678,"title":{},"body":{"modules/RoleModule.html":{}}}],["guard",{"_index":447,"title":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{}},"body":{"coverage.html":{}}}],["guard/jwt",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards",{"_index":448,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"overview.html":{}}}],["hash",{"_index":864,"title":{},"body":{"entities/User.html":{}}}],["hash(this.password",{"_index":878,"title":{},"body":{"entities/User.html":{}}}],["hashpassword",{"_index":877,"title":{},"body":{"entities/User.html":{}}}],["header",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["header('content",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["hello",{"_index":779,"title":{},"body":{"injectables/TestService.html":{}}}],["hi",{"_index":819,"title":{},"body":{"injectables/TotpService.html":{},"dependencies.html":{}}}],["host",{"_index":1045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:3000/user/login",{"_index":1015,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/user/register",{"_index":1003,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('resource",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["httponly",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/JWT1669729219582.html":{},"interfaces/JwtAuthPayload.html":{},"classes/Role1670203037069.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["idx_171d67ef8913e9dc113831b9fa",{"_index":611,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["idx_34e11176bdc021644092329708",{"_index":615,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["idx_90430aa399740cac39bff3ca7b",{"_index":612,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["idx_ae4578dcaed5adff96595e6166",{"_index":605,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["idx_bae3cfbe67c8cad245cd04a319",{"_index":607,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["image/png",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["implements",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/Role1670203037069.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["import",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":72,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"injectables/TestService.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":824,"title":{},"body":{"injectables/TotpService.html":{}}}],["injectable",{"_index":209,"title":{"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RoleService.html":{},"injectables/TestService.html":{},"injectables/TotpService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/RoleService.html":{},"injectables/TestService.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RoleService.html":{},"injectables/TestService.html":{},"injectables/TotpService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["injectrepository(role",{"_index":712,"title":{},"body":{"injectables/RoleService.html":{}}}],["injectrepository(rolegroup",{"_index":713,"title":{},"body":{"injectables/RoleService.html":{}}}],["injectrepository(user",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["installation",{"_index":986,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":988,"title":{},"body":{"index.html":{}}}],["int",{"_index":438,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["interface",{"_index":473,"title":{"interfaces/JwtAuthPayload.html":{},"interfaces/TotpModuleOptions.html":{}},"body":{"interfaces/JwtAuthPayload.html":{},"interfaces/TotpModuleOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":474,"title":{},"body":{"interfaces/JwtAuthPayload.html":{},"interfaces/TotpModuleOptions.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":488,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["internalservererrorexception('error",{"_index":498,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["isaccessvalid",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["isdate",{"_index":386,"title":{},"body":{"classes/CoreEntity.html":{}}}],["isenum",{"_index":589,"title":{},"body":{"entities/Role.html":{},"classes/SaveRoleDto.html":{}}}],["isenum(roles",{"_index":597,"title":{},"body":{"entities/Role.html":{},"classes/SaveRoleDto.html":{}}}],["isenum(roles)@column({unique",{"_index":587,"title":{},"body":{"entities/Role.html":{}}}],["isglobal",{"_index":338,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["isinstance",{"_index":743,"title":{},"body":{"classes/SaveRoleGroupDto.html":{},"entities/User.html":{}}}],["isinstance(role",{"_index":741,"title":{},"body":{"classes/SaveRoleGroupDto.html":{}}}],["isinstance(rolegroup",{"_index":875,"title":{},"body":{"entities/User.html":{}}}],["isnotempty",{"_index":869,"title":{},"body":{"entities/User.html":{}}}],["isnumber",{"_index":387,"title":{},"body":{"classes/CoreEntity.html":{},"entities/RoleGroup.html":{},"classes/SaveRoleGroupDto.html":{}}}],["isnumberstring",{"_index":579,"title":{},"body":{"classes/LoginDto.html":{},"classes/TwoFactorLoginDto.html":{}}}],["isnumberstring()@length(6",{"_index":848,"title":{},"body":{"classes/TwoFactorLoginDto.html":{}}}],["isodatetime",{"_index":562,"title":{},"body":{"classes/LoggerService.html":{}}}],["isoptional",{"_index":388,"title":{},"body":{"classes/CoreEntity.html":{},"entities/User.html":{}}}],["isoptional()@deletedatecolumn",{"_index":380,"title":{},"body":{"classes/CoreEntity.html":{}}}],["isoptional()@isinstance(rolegroup)@onetoone(undefined",{"_index":860,"title":{},"body":{"entities/User.html":{}}}],["isoptional()@isnotempty()@isstring()@column({nullable",{"_index":858,"title":{},"body":{"entities/User.html":{}}}],["isrefreshvalid",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["isstring",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"entities/RoleGroup.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"entities/User.html":{}}}],["isstring()@column",{"_index":585,"title":{},"body":{"entities/Role.html":{},"entities/RoleGroup.html":{},"entities/User.html":{}}}],["isstring()@column({unique",{"_index":632,"title":{},"body":{"entities/RoleGroup.html":{}}}],["issue",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["issuer",{"_index":814,"title":{},"body":{"injectables/TotpService.html":{}}}],["isvalidtoken",{"_index":467,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["item.name",{"_index":655,"title":{},"body":{"guards/RoleGuard.html":{}}}],["joi",{"_index":335,"title":{},"body":{"modules/ConfigurationModule.html":{},"dependencies.html":{}}}],["joi.number().default(0",{"_index":367,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.number().default(1000",{"_index":359,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.number().default(30",{"_index":369,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.number().default(3000",{"_index":348,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.number().required",{"_index":352,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.object",{"_index":342,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.string().required",{"_index":350,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.string().valid('development",{"_index":344,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joincolumn",{"_index":870,"title":{},"body":{"entities/User.html":{}}}],["jointable",{"_index":639,"title":{},"body":{"entities/RoleGroup.html":{}}}],["json",{"_index":553,"title":{},"body":{"classes/LoggerService.html":{}}}],["json.stringify(req.body",{"_index":517,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["json.stringify(req.headers",{"_index":511,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["json.stringify(req.query",{"_index":514,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["json.stringify(tempurl",{"_index":520,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["jsonwebtoken",{"_index":478,"title":{},"body":{"interfaces/JwtAuthPayload.html":{},"dependencies.html":{}}}],["jwt",{"_index":500,"title":{},"body":{"injectables/JwtMiddleware.html":{},"guards/TwoFactorAuthGuard.html":{},"index.html":{}}}],["jwt.ts",{"_index":423,"title":{},"body":{"classes/JWT1669729219582.html":{},"coverage.html":{}}}],["jwt.ts:10",{"_index":433,"title":{},"body":{"classes/JWT1669729219582.html":{}}}],["jwt.ts:4",{"_index":430,"title":{},"body":{"classes/JWT1669729219582.html":{}}}],["jwt.ts:6",{"_index":435,"title":{},"body":{"classes/JWT1669729219582.html":{}}}],["jwt1669729219582",{"_index":421,"title":{"classes/JWT1669729219582.html":{}},"body":{"classes/JWT1669729219582.html":{},"coverage.html":{}}}],["jwt_access_expires",{"_index":358,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["jwt_access_secret",{"_index":356,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["jwt_cookie_expires",{"_index":366,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["jwt_refresh_expires",{"_index":362,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["jwt_refresh_secret",{"_index":357,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["jwtauthguard",{"_index":124,"title":{"guards/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"controllers/TestController.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtauthpayload",{"_index":128,"title":{"interfaces/JwtAuthPayload.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"guards/TwoFactorAuthGuard.html":{},"coverage.html":{}}}],["jwtmiddleware",{"_index":47,"title":{"injectables/JwtMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/JwtMiddleware.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TestModule.html":{}}}],["jwtpayload",{"_index":477,"title":{},"body":{"interfaces/JwtAuthPayload.html":{}}}],["jwtservice",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"modules/TestModule.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["key",{"_index":444,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{},"injectables/TotpService.html":{},"index.html":{}}}],["l",{"_index":837,"title":{},"body":{"injectables/TotpService.html":{}}}],["label",{"_index":813,"title":{},"body":{"injectables/TotpService.html":{}}}],["length",{"_index":580,"title":{},"body":{"classes/LoginDto.html":{},"injectables/TotpService.html":{},"classes/TwoFactorLoginDto.html":{}}}],["length(6",{"_index":851,"title":{},"body":{"classes/TwoFactorLoginDto.html":{}}}],["level",{"_index":566,"title":{},"body":{"classes/LoggerService.html":{}}}],["license",{"_index":1033,"title":{},"body":{"properties.html":{}}}],["locked",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["log",{"_index":528,"title":{},"body":{"classes/LoggerService.html":{}}}],["log(message",{"_index":541,"title":{},"body":{"classes/LoggerService.html":{}}}],["logger",{"_index":525,"title":{},"body":{"classes/LoggerService.html":{},"modules/RoleModule.html":{}}}],["logger('rolemodule",{"_index":670,"title":{},"body":{"modules/RoleModule.html":{}}}],["logger.service",{"_index":503,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["loggermiddleware",{"_index":44,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["loggerservice",{"_index":130,"title":{"classes/LoggerService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"modules/RoleModule.html":{},"coverage.html":{}}}],["loggerservice(req.url.slice(1).split('/')[0",{"_index":504,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["loggerservice.log(`${_url",{"_index":521,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["logging",{"_index":1054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@res",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(res",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["login.dto",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.dto.ts",{"_index":845,"title":{},"body":{"classes/TwoFactorLoginDto.html":{},"coverage.html":{}}}],["login.dto.ts:10",{"_index":849,"title":{},"body":{"classes/TwoFactorLoginDto.html":{}}}],["login.dto.ts:3",{"_index":847,"title":{},"body":{"classes/TwoFactorLoginDto.html":{}}}],["logindto",{"_index":93,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["ls",{"_index":524,"title":{},"body":{"classes/LoggerService.html":{}}}],["manage_user",{"_index":595,"title":{},"body":{"entities/Role.html":{},"miscellaneous/enumerations.html":{}}}],["manageuser",{"_index":596,"title":{},"body":{"entities/Role.html":{},"modules/RoleModule.html":{},"miscellaneous/enumerations.html":{}}}],["manytomany",{"_index":640,"title":{},"body":{"entities/RoleGroup.html":{}}}],["manytomany(undefined",{"_index":634,"title":{},"body":{"entities/RoleGroup.html":{}}}],["matching",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maxage",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["message",{"_index":537,"title":{},"body":{"classes/LoggerService.html":{}}}],["metadata",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/Role1670203037069.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"controllers/TestController.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["middlewareconsumer",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["migration",{"_index":995,"title":{},"body":{"index.html":{}}}],["migrationinterface",{"_index":424,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["migrations",{"_index":999,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migrations/1669729219582",{"_index":422,"title":{},"body":{"classes/JWT1669729219582.html":{},"coverage.html":{}}}],["migrations/1670203037069",{"_index":600,"title":{},"body":{"classes/Role1670203037069.html":{},"coverage.html":{}}}],["migrationsrun",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":969,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/TotpModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/TotpModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/TotpModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth",{"_index":889,"title":{},"body":{"controllers/UserController.html":{}}}],["modules/auth/auth.guard",{"_index":892,"title":{},"body":{"controllers/UserController.html":{}}}],["modules/config/config.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/database/core.entity",{"_index":591,"title":{},"body":{"entities/Role.html":{},"entities/RoleGroup.html":{}}}],["modules/database/database.module",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["modules/logging/logger.middleware",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/logging/logger.service",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["modules/totp/totp.module",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["modules/totp/totp.service",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["ms",{"_index":555,"title":{},"body":{"classes/LoggerService.html":{}}}],["mysql",{"_index":1044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["nest",{"_index":549,"title":{},"body":{"classes/LoggerService.html":{},"injectables/TotpService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"modules/TestModule.html":{},"guards/TwoFactorAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":489,"title":{},"body":{"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["nestmodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["nestwinstonmoduleutilities",{"_index":548,"title":{},"body":{"classes/LoggerService.html":{}}}],["new",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"modules/RoleModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newaccesstoken",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["newrefreshtoken",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["newrole",{"_index":716,"title":{},"body":{"injectables/RoleService.html":{}}}],["newrole.description",{"_index":719,"title":{},"body":{"injectables/RoleService.html":{}}}],["newrole.name",{"_index":718,"title":{},"body":{"injectables/RoleService.html":{}}}],["newrolegroup",{"_index":725,"title":{},"body":{"injectables/RoleService.html":{}}}],["newrolegroup.description",{"_index":728,"title":{},"body":{"injectables/RoleService.html":{}}}],["newrolegroup.name",{"_index":727,"title":{},"body":{"injectables/RoleService.html":{}}}],["newrolegroup.roles",{"_index":729,"title":{},"body":{"injectables/RoleService.html":{}}}],["next",{"_index":485,"title":{},"body":{"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["nextfunction",{"_index":486,"title":{},"body":{"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["nngharshozgva5cqjzbhmucujbgwwzrukr3do6bvkbthqt2koj3q",{"_index":1007,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":977,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":343,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["notfoundexception",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('otp",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('user",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["null",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JWT1669729219582.html":{},"interfaces/JwtAuthPayload.html":{},"classes/Role1670203037069.html":{}}}],["nullable",{"_index":874,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/RoleService.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"injectables/UserService.html":{}}}],["number(process.env.db_port",{"_index":1047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(process.env.two_factor_period",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["object",{"_index":493,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["observable",{"_index":458,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["onetoone",{"_index":871,"title":{},"body":{"entities/User.html":{}}}],["onmoduleinit",{"_index":663,"title":{},"body":{"modules/RoleModule.html":{}}}],["opt",{"_index":414,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["optional",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"classes/Role1670203037069.html":{},"guards/RoleGuard.html":{},"injectables/RoleService.html":{},"controllers/TestController.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options",{"_index":409,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["otp",{"_index":1012,"title":{},"body":{"index.html":{}}}],["otpauth://totp/${label}:?secret=${key}&issuer=${issuer}&algorithm=sha1&digits=${this.options.digits}&period=${this.options.period",{"_index":830,"title":{},"body":{"injectables/TotpService.html":{}}}],["otpauth://totp/nest",{"_index":1009,"title":{},"body":{"index.html":{}}}],["otpurl",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["out",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["output",{"_index":835,"title":{},"body":{"injectables/TotpService.html":{}}}],["override",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["overview",{"_index":1026,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":943,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"classes/Role1670203037069.html":{},"guards/RoleGuard.html":{},"injectables/RoleService.html":{},"controllers/TestController.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["params",{"_index":569,"title":{},"body":{"classes/LoggerService.html":{}}}],["parser",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["parsing",{"_index":499,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["partial",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["password",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["payload.exp",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.iat",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.id",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.twofactorauthenticated",{"_index":843,"title":{},"body":{"guards/TwoFactorAuthGuard.html":{}}}],["period",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/TotpModuleOptions.html":{}}}],["port",{"_index":347,"title":{},"body":{"modules/ConfigurationModule.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["post('/')@useguards(jwtauthguard)@role(roles.test_role",{"_index":750,"title":{},"body":{"controllers/TestController.html":{}}}],["post('/2fa",{"_index":768,"title":{},"body":{"controllers/TestController.html":{}}}],["post('/2fa')@useguards(twofactorauthguard",{"_index":754,"title":{},"body":{"controllers/TestController.html":{}}}],["post('/login",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login/2fa",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login/2fa')@useguards(jwtauthguard",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/re",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/role/create",{"_index":899,"title":{},"body":{"controllers/UserController.html":{}}}],["prefix",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{}}}],["prettyprint",{"_index":556,"title":{},"body":{"classes/LoggerService.html":{}}}],["primary",{"_index":443,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["primarygeneratedcolumn",{"_index":382,"title":{},"body":{"classes/CoreEntity.html":{}}}],["private",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"classes/LoggerService.html":{},"injectables/RoleService.html":{},"injectables/TotpService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["process.env.db_host",{"_index":1046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":1051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":1050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":1049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":1053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":345,"title":{},"body":{"modules/ConfigurationModule.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":976,"title":{},"body":{"index.html":{}}}],["promise",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"classes/Role1670203037069.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["promise.all(arr.map((id",{"_index":731,"title":{},"body":{"injectables/RoleService.html":{}}}],["properties",{"_index":373,"title":{"properties.html":{}},"body":{"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"interfaces/JwtAuthPayload.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"interfaces/TotpModuleOptions.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/TotpModule.html":{}}}],["provided",{"_index":471,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["providers",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/TotpModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":425,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["pw",{"_index":1005,"title":{},"body":{"index.html":{}}}],["qr",{"_index":1013,"title":{},"body":{"index.html":{}}}],["qrcode",{"_index":821,"title":{},"body":{"injectables/TotpService.html":{},"dependencies.html":{}}}],["queryrunner",{"_index":432,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["queryrunner.query(`alter",{"_index":613,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["queryrunner.query(`create",{"_index":436,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["queryrunner.query(`drop",{"_index":446,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["randombytes",{"_index":816,"title":{},"body":{"injectables/TotpService.html":{}}}],["randombytes(length",{"_index":832,"title":{},"body":{"injectables/TotpService.html":{}}}],["readonly",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"controllers/TestController.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["references",{"_index":620,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["reflect",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":645,"title":{},"body":{"guards/RoleGuard.html":{}}}],["refreshpayload",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JWT1669729219582.html":{},"entities/User.html":{}}}],["register",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(undefined",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["registered",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["reissuetoken",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["reissuetoken(@req",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["reissuetoken(req",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["rel_34e11176bdc021644092329708",{"_index":616,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["relatedroles",{"_index":723,"title":{},"body":{"injectables/RoleService.html":{}}}],["relations",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{}}}],["repository",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["req",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["req.baseurl.split('?')[0",{"_index":507,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.body",{"_index":518,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.cookies['refreshtoken']?.replace('bearer",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.headers",{"_index":512,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.headers.authorization",{"_index":509,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.headers.authorization?.replace('bearer",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.headers.authorization?.split",{"_index":491,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["req.method",{"_index":506,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.query",{"_index":515,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req['user",{"_index":496,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["request",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["request.headers",{"_index":464,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["request.user",{"_index":462,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["requiredroles",{"_index":650,"title":{},"body":{"guards/RoleGuard.html":{}}}],["requiredroles.every((role",{"_index":656,"title":{},"body":{"guards/RoleGuard.html":{}}}],["res",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"controllers/TestController.html":{}}}],["res.cookie('refreshtoken",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.send",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"controllers/TestController.html":{},"injectables/TotpService.html":{}}}],["result",{"_index":887,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["results",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"injectables/RoleService.html":{},"controllers/TestController.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/Role1670203037069.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"controllers/TestController.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":273,"title":{"entities/Role.html":{}},"body":{"injectables/AuthService.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["role(roles.test_role",{"_index":764,"title":{},"body":{"controllers/TestController.html":{}}}],["role.dto",{"_index":711,"title":{},"body":{"injectables/RoleService.html":{}}}],["role.dto.ts",{"_index":735,"title":{},"body":{"classes/SaveRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:6",{"_index":737,"title":{},"body":{"classes/SaveRoleDto.html":{}}}],["role.dto.ts:9",{"_index":736,"title":{},"body":{"classes/SaveRoleDto.html":{}}}],["role.entity",{"_index":641,"title":{},"body":{"entities/RoleGroup.html":{}}}],["role.id",{"_index":635,"title":{},"body":{"entities/RoleGroup.html":{}}}],["role.name",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["role.service",{"_index":668,"title":{},"body":{"modules/RoleModule.html":{}}}],["role.ts",{"_index":601,"title":{},"body":{"classes/Role1670203037069.html":{},"coverage.html":{}}}],["role.ts:18",{"_index":603,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["role.ts:4",{"_index":602,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["role.ts:6",{"_index":604,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["role/role.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["role1670203037069",{"_index":599,"title":{"classes/Role1670203037069.html":{}},"body":{"classes/Role1670203037069.html":{},"coverage.html":{}}}],["role\\`(\\`id",{"_index":627,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["role_group",{"_index":606,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["role_group\\`(\\`id",{"_index":621,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["role_group_join",{"_index":608,"title":{},"body":{"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{}}}],["role_key",{"_index":648,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolegroup",{"_index":333,"title":{"entities/RoleGroup.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"entities/RoleGroup.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"entities/User.html":{},"coverage.html":{}}}],["rolegroup.id",{"_index":876,"title":{},"body":{"entities/User.html":{}}}],["rolegroup.id)@joincolumn",{"_index":861,"title":{},"body":{"entities/User.html":{}}}],["rolegroupid",{"_index":609,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["rolegrouprepository",{"_index":693,"title":{},"body":{"injectables/RoleService.html":{}}}],["roleguard",{"_index":642,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"controllers/TestController.html":{},"coverage.html":{}}}],["roleid",{"_index":610,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["rolemodule",{"_index":9,"title":{"modules/RoleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoleModule.html":{},"modules.html":{},"overview.html":{}}}],["rolename",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["rolerepository",{"_index":695,"title":{},"body":{"injectables/RoleService.html":{}}}],["roles",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtAuthPayload.html":{},"entities/Role.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roles.manage_user",{"_index":676,"title":{},"body":{"modules/RoleModule.html":{},"controllers/TestController.html":{}}}],["roles.manage_user)@useguards(roleguard",{"_index":751,"title":{},"body":{"controllers/TestController.html":{}}}],["roles.manageuser",{"_index":681,"title":{},"body":{"modules/RoleModule.html":{}}}],["roles.map((rolename",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.test_role",{"_index":677,"title":{},"body":{"modules/RoleModule.html":{}}}],["roles.testrole",{"_index":682,"title":{},"body":{"modules/RoleModule.html":{}}}],["roleservice",{"_index":661,"title":{"injectables/RoleService.html":{}},"body":{"modules/RoleModule.html":{},"injectables/RoleService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1000,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":459,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"dependencies.html":{}}}],["saverole",{"_index":690,"title":{},"body":{"injectables/RoleService.html":{}}}],["saverole(undefined",{"_index":703,"title":{},"body":{"injectables/RoleService.html":{}}}],["saveroledto",{"_index":704,"title":{"classes/SaveRoleDto.html":{}},"body":{"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"coverage.html":{}}}],["saverolegroup",{"_index":691,"title":{},"body":{"injectables/RoleService.html":{}}}],["saverolegroup(undefined",{"_index":706,"title":{},"body":{"injectables/RoleService.html":{}}}],["saverolegroupdto",{"_index":707,"title":{"classes/SaveRoleGroupDto.html":{}},"body":{"injectables/RoleService.html":{},"classes/SaveRoleGroupDto.html":{},"coverage.html":{}}}],["scalable",{"_index":981,"title":{},"body":{"index.html":{}}}],["schema",{"_index":997,"title":{},"body":{"index.html":{}}}],["secret",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["secret=nngharshozgva5cqjzbhmucujbgwwzrukr3do6bvkbthqt2koj3q&issuer=nest",{"_index":1010,"title":{},"body":{"index.html":{}}}],["server",{"_index":982,"title":{},"body":{"index.html":{}}}],["servertwofactorcode",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["service",{"_index":533,"title":{},"body":{"classes/LoggerService.html":{}}}],["set",{"_index":833,"title":{},"body":{"injectables/TotpService.html":{}}}],["setmetadata(role_key",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setrefreshcookie",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["setrefreshcookie(res",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["side",{"_index":983,"title":{},"body":{"index.html":{}}}],["source",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/.../logger.service.ts",{"_index":1041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":973,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.decorator.ts",{"_index":1040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.entity.ts",{"_index":971,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../totp.constants.ts",{"_index":1038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../typeorm.datasource.ts",{"_index":1037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":18,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:37",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:43",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:50",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:58",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:67",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:82",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.interface",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.interface.ts",{"_index":475,"title":{},"body":{"interfaces/JwtAuthPayload.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":775,"title":{},"body":{"modules/TestModule.html":{},"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:105",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:113",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:123",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:133",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:145",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:152",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:161",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:34",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:56",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:72",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:84",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorator/role.decorator",{"_index":756,"title":{},"body":{"controllers/TestController.html":{}}}],["src/auth/decorator/role.decorator.ts",{"_index":927,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/user.decorator",{"_index":757,"title":{},"body":{"controllers/TestController.html":{},"controllers/UserController.html":{}}}],["src/auth/decorator/user.decorator.ts",{"_index":930,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/2fa",{"_index":844,"title":{},"body":{"classes/TwoFactorLoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/create",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":575,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:10",{"_index":577,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:13",{"_index":578,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:3",{"_index":576,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/guard/2fa",{"_index":759,"title":{},"body":{"controllers/TestController.html":{},"guards/TwoFactorAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/jwt",{"_index":449,"title":{},"body":{"guards/JwtAuthGuard.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/guard/role.guard",{"_index":760,"title":{},"body":{"controllers/TestController.html":{}}}],["src/auth/guard/role.guard.ts",{"_index":643,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/auth/guard/role.guard.ts:12",{"_index":646,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/guard/role.guard.ts:15",{"_index":647,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/middleware/jwt.middleware.ts",{"_index":480,"title":{},"body":{"injectables/JwtMiddleware.html":{},"coverage.html":{}}}],["src/auth/middleware/jwt.middleware.ts:11",{"_index":483,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["src/auth/middleware/jwt.middleware.ts:14",{"_index":487,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["src/main.ts",{"_index":933,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/config/config.module.ts",{"_index":334,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["src/modules/database/core.entity",{"_index":872,"title":{},"body":{"entities/User.html":{}}}],["src/modules/database/core.entity.ts",{"_index":372,"title":{},"body":{"classes/CoreEntity.html":{},"coverage.html":{}}}],["src/modules/database/core.entity.ts:13",{"_index":383,"title":{},"body":{"classes/CoreEntity.html":{}}}],["src/modules/database/core.entity.ts:17",{"_index":379,"title":{},"body":{"classes/CoreEntity.html":{}}}],["src/modules/database/core.entity.ts:22",{"_index":381,"title":{},"body":{"classes/CoreEntity.html":{}}}],["src/modules/database/core.entity.ts:26",{"_index":385,"title":{},"body":{"classes/CoreEntity.html":{}}}],["src/modules/database/database.module",{"_index":911,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/database/database.module.ts",{"_index":406,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/modules/database/typeorm.datasource.ts",{"_index":936,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/logging/logger.middleware.ts",{"_index":501,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/modules/logging/logger.middleware.ts:9",{"_index":502,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/modules/logging/logger.service.ts",{"_index":523,"title":{},"body":{"classes/LoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/logging/logger.service.ts:34",{"_index":542,"title":{},"body":{"classes/LoggerService.html":{}}}],["src/modules/logging/logger.service.ts:37",{"_index":540,"title":{},"body":{"classes/LoggerService.html":{}}}],["src/modules/logging/logger.service.ts:40",{"_index":546,"title":{},"body":{"classes/LoggerService.html":{}}}],["src/modules/logging/logger.service.ts:43",{"_index":536,"title":{},"body":{"classes/LoggerService.html":{}}}],["src/modules/logging/logger.service.ts:46",{"_index":544,"title":{},"body":{"classes/LoggerService.html":{}}}],["src/modules/logging/logger.service.ts:9",{"_index":532,"title":{},"body":{"classes/LoggerService.html":{}}}],["src/modules/totp/totp.constants.ts",{"_index":940,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/totp/totp.interface.ts",{"_index":792,"title":{},"body":{"interfaces/TotpModuleOptions.html":{},"coverage.html":{}}}],["src/modules/totp/totp.module.ts",{"_index":781,"title":{},"body":{"modules/TotpModule.html":{}}}],["src/modules/totp/totp.module.ts:9",{"_index":786,"title":{},"body":{"modules/TotpModule.html":{}}}],["src/modules/totp/totp.service.ts",{"_index":793,"title":{},"body":{"injectables/TotpService.html":{},"coverage.html":{}}}],["src/modules/totp/totp.service.ts:14",{"_index":800,"title":{},"body":{"injectables/TotpService.html":{}}}],["src/modules/totp/totp.service.ts:17",{"_index":811,"title":{},"body":{"injectables/TotpService.html":{}}}],["src/modules/totp/totp.service.ts:25",{"_index":815,"title":{},"body":{"injectables/TotpService.html":{}}}],["src/modules/totp/totp.service.ts:29",{"_index":808,"title":{},"body":{"injectables/TotpService.html":{}}}],["src/modules/totp/totp.service.ts:43",{"_index":805,"title":{},"body":{"injectables/TotpService.html":{}}}],["src/modules/totp/totp.service.ts:48",{"_index":803,"title":{},"body":{"injectables/TotpService.html":{}}}],["src/role/dto/save",{"_index":734,"title":{},"body":{"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"coverage.html":{}}}],["src/role/entity/role",{"_index":629,"title":{},"body":{"entities/RoleGroup.html":{},"entities/User.html":{},"coverage.html":{}}}],["src/role/entity/role.entity",{"_index":479,"title":{},"body":{"interfaces/JwtAuthPayload.html":{},"guards/RoleGuard.html":{},"controllers/TestController.html":{}}}],["src/role/entity/role.entity.ts",{"_index":583,"title":{},"body":{"entities/Role.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/role/entity/role.entity.ts:14",{"_index":588,"title":{},"body":{"entities/Role.html":{}}}],["src/role/entity/role.entity.ts:18",{"_index":586,"title":{},"body":{"entities/Role.html":{}}}],["src/role/role.module.ts",{"_index":662,"title":{},"body":{"modules/RoleModule.html":{}}}],["src/role/role.module.ts:18",{"_index":664,"title":{},"body":{"modules/RoleModule.html":{}}}],["src/role/role.service.ts",{"_index":686,"title":{},"body":{"injectables/RoleService.html":{},"coverage.html":{}}}],["src/role/role.service.ts:10",{"_index":694,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:16",{"_index":705,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:26",{"_index":708,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:38",{"_index":701,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:42",{"_index":697,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:46",{"_index":699,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/test/test.controller.ts",{"_index":745,"title":{},"body":{"controllers/TestController.html":{},"coverage.html":{}}}],["src/test/test.controller.ts:22",{"_index":752,"title":{},"body":{"controllers/TestController.html":{}}}],["src/test/test.controller.ts:29",{"_index":755,"title":{},"body":{"controllers/TestController.html":{}}}],["src/test/test.module.ts",{"_index":774,"title":{},"body":{"modules/TestModule.html":{}}}],["src/test/test.service.ts",{"_index":777,"title":{},"body":{"injectables/TestService.html":{},"coverage.html":{}}}],["src/test/test.service.ts:5",{"_index":778,"title":{},"body":{"injectables/TestService.html":{}}}],["src/user/user.controller.ts",{"_index":882,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:18",{"_index":886,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"controllers/TestController.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["src/user/user.entity.ts",{"_index":852,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:13",{"_index":853,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:17",{"_index":854,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:22",{"_index":857,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:28",{"_index":863,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:34",{"_index":859,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:40",{"_index":862,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.module",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/user/user.module.ts",{"_index":910,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtMiddleware.html":{}}}],["src/user/user.service.ts",{"_index":913,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:10",{"_index":915,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:13",{"_index":918,"title":{},"body":{"injectables/UserService.html":{}}}],["stack",{"_index":561,"title":{},"body":{"classes/LoggerService.html":{}}}],["start",{"_index":991,"title":{},"body":{"index.html":{}}}],["start:produsage",{"_index":1001,"title":{},"body":{"index.html":{}}}],["started",{"_index":975,"title":{"index.html":{}},"body":{}}],["statements",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":782,"title":{},"body":{"modules/TotpModule.html":{}}}],["step",{"_index":1002,"title":{},"body":{"index.html":{}}}],["stream",{"_index":804,"title":{},"body":{"injectables/TotpService.html":{}}}],["string",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"injectables/TestService.html":{},"injectables/TotpService.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["success",{"_index":420,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["super(authservice",{"_index":840,"title":{},"body":{"guards/TwoFactorAuthGuard.html":{}}}],["super.canactivate(context",{"_index":841,"title":{},"body":{"guards/TwoFactorAuthGuard.html":{}}}],["superadmin",{"_index":680,"title":{},"body":{"modules/RoleModule.html":{}}}],["support",{"_index":1021,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1022,"title":{},"body":{"modules.html":{}}}],["symbols",{"_index":807,"title":{},"body":{"injectables/TotpService.html":{}}}],["synchronize",{"_index":1052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":437,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["tempurl",{"_index":505,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["test",{"_index":746,"title":{},"body":{"controllers/TestController.html":{},"index.html":{}}}],["test').required",{"_index":346,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["test.controller",{"_index":776,"title":{},"body":{"modules/TestModule.html":{}}}],["test.service",{"_index":762,"title":{},"body":{"controllers/TestController.html":{},"modules/TestModule.html":{}}}],["test/test.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["test@example.com",{"_index":1004,"title":{},"body":{"index.html":{}}}],["test_role",{"_index":593,"title":{},"body":{"entities/Role.html":{},"miscellaneous/enumerations.html":{}}}],["testcontroller",{"_index":744,"title":{"controllers/TestController.html":{}},"body":{"controllers/TestController.html":{},"modules/TestModule.html":{},"coverage.html":{}}}],["testmodule",{"_index":10,"title":{"modules/TestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TestModule.html":{},"modules.html":{},"overview.html":{}}}],["testrole",{"_index":594,"title":{},"body":{"entities/Role.html":{},"modules/RoleModule.html":{},"miscellaneous/enumerations.html":{}}}],["testservice",{"_index":761,"title":{"injectables/TestService.html":{}},"body":{"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"coverage.html":{},"overview.html":{}}}],["this.authservice.generateaccesstoken(accesspayload",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.generaterefreshtoken(refreshpayload",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.generatetwofactorsecretforuser(user.id",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(logindto",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(createuserdto",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.setrefreshcookie(res",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyaccesstoken(accesstoken",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyaccesstoken(token",{"_index":468,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["this.authservice.verifyrefreshtoken(user.id",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifytwofactorcode",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt_access_expires",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_cookie_expires",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_expires",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.email",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["this.findrolebyname(name",{"_index":715,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.findrolegroupbyname(name",{"_index":722,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.findrolesbyid(roles",{"_index":724,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.finduser",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generateaccesstoken(payload",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatepayload(user",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generaterefreshtoken(payload",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.decode(accesstoken",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtMiddleware.html":{}}}],["this.jwtservice.decode(refreshtoken",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.decode(token",{"_index":842,"title":{},"body":{"guards/TwoFactorAuthGuard.html":{}}}],["this.jwtservice.sign(payload",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger",{"_index":558,"title":{},"body":{"classes/LoggerService.html":{},"modules/RoleModule.html":{}}}],["this.logger.debug(message",{"_index":570,"title":{},"body":{"classes/LoggerService.html":{}}}],["this.logger.error(message",{"_index":572,"title":{},"body":{"classes/LoggerService.html":{}}}],["this.logger.info(message",{"_index":571,"title":{},"body":{"classes/LoggerService.html":{}}}],["this.logger.log('creating",{"_index":673,"title":{},"body":{"modules/RoleModule.html":{}}}],["this.logger.log('initialize",{"_index":684,"title":{},"body":{"modules/RoleModule.html":{}}}],["this.logger.log('initializing",{"_index":671,"title":{},"body":{"modules/RoleModule.html":{}}}],["this.logger.verbose(message",{"_index":574,"title":{},"body":{"classes/LoggerService.html":{}}}],["this.logger.warning(message",{"_index":573,"title":{},"body":{"classes/LoggerService.html":{}}}],["this.loggerservice.debug('re",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.loggerservice.log(`generatedcode",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.name",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["this.options",{"_index":828,"title":{},"body":{"injectables/TotpService.html":{}}}],["this.password",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/User.html":{}}}],["this.reflector.get(role_key",{"_index":651,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.rolegrouprepository.create",{"_index":726,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolegrouprepository.findone",{"_index":733,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolegrouprepository.save(newrolegroup",{"_index":730,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolerepository.create",{"_index":717,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolerepository.findone",{"_index":732,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolerepository.save(newrole",{"_index":720,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.roleservice.saverole",{"_index":675,"title":{},"body":{"modules/RoleModule.html":{}}}],["this.roleservice.saverolegroup",{"_index":679,"title":{},"body":{"modules/RoleModule.html":{}}}],["this.testservice.gethello",{"_index":767,"title":{},"body":{"controllers/TestController.html":{}}}],["this.totpservice.generateqrcode(res",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.totpservice.generatesecret",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.totpservice.getcode(user.twofactorsecret",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.totpservice.geturl(twofactorsecret",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.twofactorcode",{"_index":850,"title":{},"body":{"classes/TwoFactorLoginDto.html":{}}}],["this.userrepository.create",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.findone",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.update",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrolerepository.find",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.createrole(createroledto",{"_index":902,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyid(accesspayload.id",{"_index":495,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["this.userservice.findbyid(authuser.id",{"_index":905,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/UserService.html":{}}}],["timestamp",{"_index":554,"title":{},"body":{"classes/LoggerService.html":{},"modules/RoleModule.html":{}}}],["todo",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["token",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"index.html":{}}}],["toplainonly",{"_index":873,"title":{},"body":{"entities/User.html":{}}}],["totp",{"_index":822,"title":{},"body":{"injectables/TotpService.html":{},"dependencies.html":{}}}],["totp(key",{"_index":827,"title":{},"body":{"injectables/TotpService.html":{}}}],["totp.constants",{"_index":789,"title":{},"body":{"modules/TotpModule.html":{},"injectables/TotpService.html":{}}}],["totp.interface",{"_index":790,"title":{},"body":{"modules/TotpModule.html":{},"injectables/TotpService.html":{}}}],["totp.service",{"_index":791,"title":{},"body":{"modules/TotpModule.html":{}}}],["totpmodule",{"_index":193,"title":{"modules/TotpModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/TotpModule.html":{},"modules.html":{},"overview.html":{}}}],["totpmodule.forroot",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["totpmoduleoptions",{"_index":785,"title":{"interfaces/TotpModuleOptions.html":{}},"body":{"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"coverage.html":{}}}],["totpservice",{"_index":114,"title":{"injectables/TotpService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"coverage.html":{}}}],["trace",{"_index":539,"title":{},"body":{"classes/LoggerService.html":{}}}],["transaction",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":868,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["transports",{"_index":564,"title":{},"body":{"classes/LoggerService.html":{}}}],["true",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/LoggerService.html":{},"entities/Role.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring()@column",{"_index":856,"title":{},"body":{"entities/User.html":{}}}],["true})@jointable({name",{"_index":637,"title":{},"body":{"entities/RoleGroup.html":{}}}],["try",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{}}}],["two_factor_period",{"_index":368,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["twofactorauthenticated",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtAuthPayload.html":{}}}],["twofactorauthguard",{"_index":758,"title":{"guards/TwoFactorAuthGuard.html":{}},"body":{"controllers/TestController.html":{},"guards/TwoFactorAuthGuard.html":{},"coverage.html":{}}}],["twofactorcode",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"classes/TwoFactorLoginDto.html":{},"index.html":{}}}],["twofactorkey",{"_index":1006,"title":{},"body":{"index.html":{}}}],["twofactorlogindto",{"_index":103,"title":{"classes/TwoFactorLoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TwoFactorLoginDto.html":{},"coverage.html":{}}}],["twofactorsecret",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JWT1669729219582.html":{},"entities/User.html":{}}}],["twofactortest",{"_index":748,"title":{},"body":{"controllers/TestController.html":{}}}],["twofactortest(@getuser",{"_index":770,"title":{},"body":{"controllers/TestController.html":{}}}],["twofactortest(user",{"_index":753,"title":{},"body":{"controllers/TestController.html":{}}}],["twofactorurl",{"_index":1008,"title":{},"body":{"index.html":{}}}],["type",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":492,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["typeorm",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"injectables/RoleService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm.datasource",{"_index":410,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeorm:run",{"_index":998,"title":{},"body":{"index.html":{}}}],["typeormmodule",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":669,"title":{},"body":{"modules/RoleModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":411,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["unauthorizedexception",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["unauthorizedexception('2fa",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('no",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception('notokenprovided",{"_index":472,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["unauthorizedexception('password",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('tokenexpired",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{}}}],["undefined",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["unique",{"_index":598,"title":{},"body":{"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{}}}],["unknown",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RoleService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1034,"title":{},"body":{"properties.html":{}}}],["up",{"_index":427,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{},"index.html":{}}}],["up(queryrunner",{"_index":434,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["update",{"_index":623,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["url",{"_index":802,"title":{},"body":{"injectables/TotpService.html":{},"index.html":{}}}],["use",{"_index":481,"title":{},"body":{"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["use(req",{"_index":484,"title":{},"body":{"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["useclass",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":412,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["useguards",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":903,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{}}}],["useguards(roleguard",{"_index":765,"title":{},"body":{"controllers/TestController.html":{}}}],["useguards(twofactorauthguard",{"_index":769,"title":{},"body":{"controllers/TestController.html":{}}}],["user",{"_index":87,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"classes/Role1670203037069.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"controllers/TestController.html":{},"guards/TwoFactorAuthGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.checkpassword(password",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.controller",{"_index":912,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator",{"_index":890,"title":{},"body":{"controllers/UserController.html":{}}}],["user.dto",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:14",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:17",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":894,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user.rolegroup?.roles.map((item",{"_index":654,"title":{},"body":{"guards/RoleGuard.html":{}}}],["user.rolegroup?.roles.map((role",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":895,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.twofactorsecret",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/user.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["user?.refreshtoken",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["usercontroller",{"_index":881,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userentity",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":11,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":1048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["userroles",{"_index":653,"title":{},"body":{"guards/RoleGuard.html":{}}}],["userroles.includes(role",{"_index":657,"title":{},"body":{"guards/RoleGuard.html":{}}}],["userservice",{"_index":134,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usertwofactorcode",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["usevalue",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/TotpModule.html":{}}}],["utilities",{"_index":547,"title":{},"body":{"classes/LoggerService.html":{}}}],["validate",{"_index":376,"title":{},"body":{"classes/CoreEntity.html":{}}}],["validateorreject",{"_index":389,"title":{},"body":{"classes/CoreEntity.html":{}}}],["validateorreject(this",{"_index":394,"title":{},"body":{"classes/CoreEntity.html":{}}}],["validationpipe",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["validationschema",{"_index":341,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["validator",{"_index":390,"title":{},"body":{"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"entities/RoleGroup.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["value",{"_index":429,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{},"injectables/TotpService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar(255",{"_index":442,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["variable",{"_index":928,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1036,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":529,"title":{},"body":{"classes/LoggerService.html":{}}}],["verbose(message",{"_index":543,"title":{},"body":{"classes/LoggerService.html":{}}}],["verifyaccesstoken",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyaccesstoken(token",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyrefreshtoken",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyrefreshtoken(userid",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifytwofactor",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifytwofactor(res",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifytwofactorcode",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifytwofactorcode(userid",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1031,"title":{},"body":{"properties.html":{}}}],["void",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{}}}],["warn",{"_index":530,"title":{},"body":{"classes/LoggerService.html":{}}}],["warn(message",{"_index":545,"title":{},"body":{"classes/LoggerService.html":{}}}],["whitelist",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["winston",{"_index":550,"title":{},"body":{"classes/LoggerService.html":{},"dependencies.html":{}}}],["winston.createlogger",{"_index":559,"title":{},"body":{"classes/LoggerService.html":{}}}],["winston.format",{"_index":557,"title":{},"body":{"classes/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["winston.logger",{"_index":534,"title":{},"body":{"classes/LoggerService.html":{}}}],["winston.transports.console",{"_index":565,"title":{},"body":{"classes/LoggerService.html":{}}}],["world",{"_index":780,"title":{},"body":{"injectables/TestService.html":{}}}],["wrong",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["yarn",{"_index":987,"title":{},"body":{"index.html":{}}}],["yes",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["zoom",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["ztmpdhdqu8la7yknbn4xtfreioedmhdwmr6_by6igcrjdckxborgh6ruph4mterdqeecxcozzyfpp3jipvzqqyrhm7w",{"_index":1019,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nTestModule\n\nTestModule\n\nAppModule -->\n\nTestModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConfigurationModule\n                        \n                        \n                            RoleModule\n                        \n                        \n                            TestModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { APP_INTERCEPTOR, APP_PIPE } from '@nestjs/core';\nimport { JwtModule } from '@nestjs/jwt';\n\nimport { ConfigurationModule } from '~modules/config/config.module';\nimport { LoggerMiddleware } from '~modules/logging/logger.middleware';\n\nimport { AuthModule } from './auth/auth.module';\nimport { JwtMiddleware } from './auth/middleware/jwt.middleware';\nimport { TestModule } from './test/test.module';\nimport { UserModule } from './user/user.module';\nimport { RoleModule } from './role/role.module';\n\n@Module({\n  imports: [ConfigurationModule, UserModule, TestModule, AuthModule, JwtModule, RoleModule],\n  controllers: [],\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: ClassSerializerInterceptor,\n    },\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe({\n        whitelist: true,\n      }),\n    },\n  ],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware).forRoutes('*');\n    consumer.apply(JwtMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                generateTwoFactorCode\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                reIssueToken\n                            \n                            \n                                    Async\n                                verifyTwoFactor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(res: Response, createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateTwoFactorCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorCode(res: Response, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/2fa')@UseGuards(JwtAuthGuard)@Header('Content-Type', 'image/png')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(res: Response, loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reIssueToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    reIssueToken(req: Request, res: Response, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/re-issue')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyTwoFactor\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyTwoFactor(res: Response, user: User, twoFactorLoginDto: TwoFactorLoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login/2fa')@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    twoFactorLoginDto\n                                    \n                                                TwoFactorLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Request, Response } from 'express';\n\nimport {\n  Body,\n  Controller,\n  Get,\n  Header,\n  Post,\n  Req,\n  Res,\n  UnauthorizedException,\n  UseGuards,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { TotpService } from '~modules/totp/totp.service';\nimport { LoginDto } from '~src/auth/dto/login.dto';\nimport { User } from '~src/user/user.entity';\n\nimport { AuthService } from './auth.service';\nimport { GetUser } from './decorator/user.decorator';\nimport { TwoFactorLoginDto } from './dto/2fa-login.dto';\nimport { JwtAuthGuard } from './guard/jwt-auth.guard';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtAuthPayload } from './auth.interface';\nimport { LoggerService } from '~modules/logging/logger.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UserService } from '~src/user/user.service';\n\n@Controller('/auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly totpService: TotpService,\n    private readonly configService: ConfigService,\n    private readonly jwtService: JwtService,\n    private readonly loggerService: LoggerService,\n  ) {}\n\n  @Get('/2fa')\n  @UseGuards(JwtAuthGuard)\n  @Header('Content-Type', 'image/png')\n  async generateTwoFactorCode(@Res() res: Response, @GetUser() user: User) {\n    const twoFactorSecret = await this.authService.generateTwoFactorSecretForUser(user.id);\n    const otpURL = this.totpService.getURL(twoFactorSecret);\n    return this.totpService.generateQrCode(res, otpURL);\n  }\n\n  @Post('/register')\n  async createUser(@Res() res: Response, @Body() createUserDto: CreateUserDto) {\n    const { accessToken, refreshToken } = await this.authService.register(createUserDto);\n\n    this.authService.setRefreshCookie(res, refreshToken);\n    res.send({ accessToken });\n  }\n\n  @Post('/login')\n  async login(@Res() res: Response, @Body() loginDto: LoginDto) {\n    const { accessToken, refreshToken } = await this.authService.login(loginDto);\n    this.authService.setRefreshCookie(res, refreshToken);\n\n    res.send({ accessToken }); // TODO: API 응답 형식 통일\n  }\n\n  @Post('/login/2fa')\n  @UseGuards(JwtAuthGuard)\n  async verifyTwoFactor(\n    @Res() res: Response,\n    @GetUser() user: User,\n    @Body() twoFactorLoginDto: TwoFactorLoginDto,\n  ) {\n    const { accessToken, refreshToken } = await this.authService.verifyTwoFactorCode(\n      user.id,\n      twoFactorLoginDto,\n    );\n\n    this.authService.setRefreshCookie(res, refreshToken);\n    res.send({ accessToken }); // TODO: API 응답 형식 통일\n  }\n\n  @Post('/re-issue')\n  async reIssueToken(@Req() req: Request, @Res() res: Response, @GetUser() user: User) {\n    const accessToken = req.headers.authorization?.replace('Bearer ', '') || null;\n    const refreshToken = req.cookies['refreshToken']?.replace('Bearer ', '') || null;\n    if (!accessToken || !refreshToken) throw new UnauthorizedException('No Param');\n\n    const isAccessValid = this.authService.verifyAccessToken(accessToken);\n    const isRefreshValid = await this.authService.verifyRefreshToken(user.id, refreshToken);\n    if (!isAccessValid && !isRefreshValid) throw new UnauthorizedException('TokenExpired');\n\n    const accessPayload = this.jwtService.decode(refreshToken) as JwtAuthPayload;\n    const newAccessToken = this.authService.generateAccessToken(accessPayload);\n\n    if (isAccessValid && !isRefreshValid && refreshToken === user?.refreshToken) {\n      this.loggerService.debug('Re-Create refreshToken');\n      const refreshPayload = this.jwtService.decode(accessToken) as JwtAuthPayload;\n      const newRefreshToken = await this.authService.generateRefreshToken(refreshPayload);\n\n      this.authService.setRefreshCookie(res, newRefreshToken);\n      res.send({ accessToken });\n      return;\n    }\n\n    res.send({ accessToken: newAccessToken });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\n\n\nTotpModule\n\nTotpModule\n\nAuthModule -->\n\nTotpModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            TotpModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { DatabaseModule } from '~modules/database/database.module';\nimport { LoggerService } from '~modules/logging/logger.service';\nimport { TotpModule } from '~modules/totp/totp.module';\nimport { User } from '~src/user/user.entity';\nimport { UserModule } from '~src/user/user.module';\nimport { UserService } from '~src/user/user.service';\n\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\n\n@Module({\n  imports: [\n    DatabaseModule,\n    TypeOrmModule.forFeature([User]),\n    TotpModule.ForRoot({ digits: 6, period: Number(process.env.TWO_FACTOR_PERIOD) }),\n    JwtModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LoggerService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                findUser\n                            \n                            \n                                generateAccessToken\n                            \n                            \n                                generatePayload\n                            \n                            \n                                    Async\n                                generateRefreshToken\n                            \n                            \n                                    Async\n                                generateTwoFactorSecretForUser\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                setRefreshCookie\n                            \n                            \n                                verifyAccessToken\n                            \n                            \n                                    Async\n                                verifyRefreshToken\n                            \n                            \n                                    Async\n                                verifyTwoFactorCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, jwtService: JwtService, totpService: TotpService, configService: ConfigService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        totpService\n                                                  \n                                                        \n                                                                        TotpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUser(filter: Partial>)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Partial>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \ngenerateAccessToken(payload: JwtAuthPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generatePayload\n                        \n                    \n                \n            \n            \n                \ngeneratePayload(user: User, override?: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    override\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtAuthPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateRefreshToken(payload: JwtAuthPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateTwoFactorSecretForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorSecretForUser(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(undefined: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRefreshCookie\n                        \n                    \n                \n            \n            \n                \nsetRefreshCookie(res: Response, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyAccessToken\n                        \n                    \n                \n            \n            \n                \nverifyAccessToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyRefreshToken(userId: number, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyTwoFactorCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyTwoFactorCode(userId: number, undefined: TwoFactorLoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\n\nimport {\n  ConflictException,\n  HttpException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\n\nimport { TotpService } from '~modules/totp/totp.service';\nimport { JwtAuthPayload } from '~src/auth/auth.interface';\nimport { LoginDto } from '~src/auth/dto/login.dto';\nimport { User } from '~src/user/user.entity';\n\nimport { TwoFactorLoginDto } from './dto/2fa-login.dto';\nimport { LoggerService } from '~modules/logging/logger.service';\nimport { Response } from 'express';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository,\n    private readonly jwtService: JwtService,\n    private readonly totpService: TotpService,\n    private readonly configService: ConfigService,\n    private readonly loggerService: LoggerService,\n  ) {}\n\n  async register({\n    email,\n    password,\n    name,\n  }: CreateUserDto): Promise {\n    const exists = await this.findUser({ email });\n    if (exists) throw new ConflictException('Account Already Exists');\n\n    // const role = await this.userRoleRepository.find({\n    //   where: roles.map((roleName) => ({ name: roleName })),\n    // });\n    // TODO: transaction 추가\n    const user = this.userRepository.create({ email, password, name });\n    await this.userRepository.save(user);\n\n    const payload = this.generatePayload(user);\n\n    const accessToken = this.generateAccessToken(payload);\n    const refreshToken = await this.generateRefreshToken(payload);\n    return { accessToken, refreshToken };\n  }\n\n  async login({\n    email,\n    password,\n  }: LoginDto): Promise {\n    const user = await this.findUser({ email });\n    if (!user) throw new NotFoundException('User Not Found');\n    if (!(await user.checkPassword(password))) throw new UnauthorizedException('Password is Wrong');\n\n    const payload = this.generatePayload(user);\n\n    const accessToken = this.generateAccessToken(payload);\n    const refreshToken = await this.generateRefreshToken(payload);\n\n    return { accessToken, refreshToken };\n  }\n\n  async generateTwoFactorSecretForUser(userId: number) {\n    const user = await this.findUser({ id: userId });\n    if (!user) throw new NotFoundException('User Not Found');\n\n    if (user.twoFactorSecret) throw new HttpException('Resource Locked', 423);\n\n    const twoFactorSecret = this.totpService.generateSecret();\n    await this.userRepository.update({ id: user.id }, { twoFactorSecret });\n\n    return twoFactorSecret;\n  }\n\n  async verifyTwoFactorCode(\n    userId: number,\n    { twoFactorCode: userTwoFactorCode }: TwoFactorLoginDto,\n  ) {\n    const user = await this.findUser({ id: userId });\n    if (!user) throw new NotFoundException('User Not Found');\n    if (!user.twoFactorSecret) throw new NotFoundException('OTP is not registered');\n\n    const serverTwoFactorCode = this.totpService.getCode(user.twoFactorSecret);\n    this.loggerService.log(`GeneratedCode ${serverTwoFactorCode}`);\n    if (serverTwoFactorCode !== userTwoFactorCode)\n      throw new UnauthorizedException('2FA authentication failed');\n\n    const payload = this.generatePayload(user, { twoFactorAuthenticated: true });\n\n    const accessToken = this.generateAccessToken(payload);\n    const refreshToken = await this.generateRefreshToken(payload);\n\n    return { accessToken, refreshToken };\n  }\n\n  verifyAccessToken(token: string) {\n    try {\n      this.jwtService.verify(token, { secret: this.configService.get('JWT_ACCESS_SECRET') });\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n  async verifyRefreshToken(userId: number, token: string) {\n    try {\n      this.jwtService.verify(token, { secret: this.configService.get('JWT_REFRESH_SECRET') });\n      const user = await this.findUser({ id: userId });\n      return user?.refreshToken === token;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  generateAccessToken(payload: JwtAuthPayload) {\n    delete payload.exp;\n    delete payload.iat;\n\n    return this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_ACCESS_SECRET'),\n      expiresIn: this.configService.get('JWT_ACCESS_EXPIRES') / 1000,\n    });\n  }\n\n  async generateRefreshToken(payload: JwtAuthPayload) {\n    delete payload.exp;\n    delete payload.iat;\n\n    const refreshToken = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_SECRET'),\n      expiresIn: this.configService.get('JWT_REFRESH_EXPIRES') / 1000,\n    });\n    await this.userRepository.update({ id: payload.id }, { refreshToken });\n    return refreshToken;\n  }\n\n  setRefreshCookie(res: Response, refreshToken: string) {\n    res.cookie('refreshToken', `Bearer ${refreshToken}`, {\n      httpOnly: true,\n      // maxAge: this.configService.get('JWT_COOKIE_EXPIRES'),\n    });\n  }\n\n  generatePayload(user: User, override?: Partial): JwtAuthPayload {\n    return {\n      id: user.id,\n      twoFactorAuthenticated: false,\n      roles: user.roleGroup?.roles.map((role) => role.name) || null,\n      ...override,\n    };\n  }\n\n  private async findUser(filter: Partial>) {\n    return this.userRepository.findOne({ where: { ...filter }, relations: ['roleGroup'] });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigurationModule.html":{"url":"modules/ConfigurationModule.html","title":"module - ConfigurationModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/config/config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import * as Joi from 'joi';\n\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: `.env.${process.env.NODE_ENV}`,\n      validationSchema: Joi.object({\n        NODE_ENV: Joi.string().valid('development', 'production', 'test').required(),\n        PORT: Joi.number().default(3000),\n        DB_HOST: Joi.string().required(),\n        DB_PORT: Joi.number().required(),\n        DB_USER: Joi.string().required(),\n        DB_PASSWORD: Joi.string().required(),\n        DB_NAME: Joi.string().required(),\n        JWT_ACCESS_SECRET: Joi.string().required(),\n        JWT_REFRESH_SECRET: Joi.string().required(),\n        JWT_ACCESS_EXPIRES: Joi.number().default(1000 * 10), // 10s\n        JWT_REFRESH_EXPIRES: Joi.number().default(1000 * 60 * 1), // 1h\n        JWT_COOKIE_EXPIRES: Joi.number().default(0), // 1h\n        TWO_FACTOR_PERIOD: Joi.number().default(30),\n      }),\n    }),\n  ],\n})\nexport class ConfigurationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CoreEntity.html":{"url":"classes/CoreEntity.html","title":"class - CoreEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CoreEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/database/core.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                    Optional\n                                destroyedAt\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/database/core.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        destroyedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/database/core.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/database/core.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeInsert()@BeforeUpdate()\n                \n            \n\n            \n                \n                    Defined in src/modules/database/core.entity.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsNumber, IsOptional, validateOrReject } from 'class-validator';\nimport {\n  BeforeInsert,\n  BeforeUpdate,\n  CreateDateColumn,\n  DeleteDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nexport class CoreEntity {\n  // @IsNumber()\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  // @IsDate()\n  @CreateDateColumn()\n  createdAt: Date;\n\n  // @IsDate()\n  @IsOptional()\n  @DeleteDateColumn()\n  destroyedAt?: Date;\n\n  @BeforeInsert()\n  @BeforeUpdate()\n  async validate(): Promise {\n    await validateOrReject(this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(email: string, name: string, password: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/create-user.dto.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        password\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class CreateUserDto {\n  constructor(email: string, name: string, password: string) {\n    this.email = email;\n    this.name = name;\n    this.password = password;\n  }\n\n  @IsString()\n  email: string;\n\n  @IsString()\n  name: string;\n\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { DataSource } from 'typeorm';\n\nimport { Global, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { ConfigurationModule } from '../config/config.module';\n\nimport { options } from './typeorm.datasource';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigurationModule],\n      useFactory: () => options,\n      dataSourceFactory: async (opt) => {\n        console.log('♺ Connecting to DataBase');\n        const dataSource = await new DataSource(opt).initialize();\n        console.log('✔ DataBase connect Success ');\n        return dataSource;\n      },\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JWT1669729219582.html":{"url":"classes/JWT1669729219582.html","title":"class - JWT1669729219582","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JWT1669729219582\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1669729219582-JWT.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'JWT1669729219582'\n                    \n                \n                    \n                        \n                                Defined in migrations/1669729219582-JWT.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1669729219582-JWT.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1669729219582-JWT.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class JWT1669729219582 implements MigrationInterface {\n    name = 'JWT1669729219582'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`user\\` (\\`id\\` int NOT NULL AUTO_INCREMENT, \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`destroyedAt\\` datetime(6) NULL, \\`email\\` varchar(255) NOT NULL, \\`name\\` varchar(255) NOT NULL, \\`password\\` varchar(255) NOT NULL, \\`twoFactorSecret\\` varchar(255) NULL, \\`refreshToken\\` varchar(255) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`DROP TABLE \\`user\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/JwtAuthGuard.html":{"url":"guards/JwtAuthGuard.html","title":"guard - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/jwt-auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/jwt-auth.guard.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Request } from 'express';\nimport { Observable } from 'rxjs';\n\nimport { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\n\nimport { User } from '~src/user/user.entity';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class JwtAuthGuard implements CanActivate {\n  constructor(readonly authService: AuthService) {}\n\n  canActivate(context: ExecutionContext): boolean | Promise | Observable {\n    const request: Request & { user?: User } = context.switchToHttp().getRequest();\n    const user: User | undefined = request.user;\n\n    const { authorization } = request.headers;\n    if (authorization) {\n      const [_, token] = authorization.split(' ');\n      const isValidToken = this.authService.verifyAccessToken(token);\n      // console.log(user, isValidToken, token);\n      if (!isValidToken) throw new UnauthorizedException('TokenExpired');\n      return user !== undefined;\n    }\n\n    console.log('UnAuthorized no token provided');\n    throw new UnauthorizedException('NoTokenProvided');\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtAuthPayload.html":{"url":"interfaces/JwtAuthPayload.html","title":"interface - JwtAuthPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtAuthPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    JwtPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            twoFactorAuthenticated\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:         Roles[] | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Roles[] | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        twoFactorAuthenticated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        twoFactorAuthenticated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { JwtPayload } from 'jsonwebtoken';\nimport { Roles } from '~src/role/entity/role.entity';\n\nexport interface JwtAuthPayload extends JwtPayload {\n  id: number;\n  twoFactorAuthenticated: boolean;\n  roles: Roles[] | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtMiddleware.html":{"url":"injectables/JwtMiddleware.html","title":"injectable - JwtMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/middleware/jwt.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/middleware/jwt.middleware.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/middleware/jwt.middleware.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { NextFunction, Request, Response } from 'express';\n\nimport { Injectable, InternalServerErrorException, NestMiddleware } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UserService } from '~src/user/user.service';\n\nimport { JwtAuthPayload } from '../auth.interface';\n\n@Injectable()\nexport class JwtMiddleware implements NestMiddleware {\n  constructor(private readonly jwtService: JwtService, private readonly userService: UserService) {}\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    try {\n      const [_, accessToken] = req.headers.authorization?.split(' ') || [];\n      if (accessToken) {\n        const accessPayload = this.jwtService.decode(accessToken) as JwtAuthPayload;\n\n        if (typeof accessPayload === 'object' && accessPayload['id']) {\n          const user = await this.userService.findById(accessPayload.id, {\n            relations: ['roleGroup'],\n          });\n          req['user'] = user;\n        }\n      }\n\n      next();\n    } catch (err) {\n      console.log(err);\n      throw new InternalServerErrorException('Error With Parsing JWT');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/logging/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logging/logger.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { NextFunction, Request, Response } from 'express';\n\nimport { Injectable, NestMiddleware } from '@nestjs/common';\n\nimport { LoggerService } from './logger.service';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const loggerService = new LoggerService(req.url.slice(1).split('/')[0]);\n    const tempUrl = req.method + ' ' + req.baseUrl.split('?')[0];\n    const _auth = req.headers.authorization;\n    // const _headers = JSON.stringify(req.headers ? req.headers : {});\n    // const _query = JSON.stringify(req.query ? req.query : {});\n    const _body = JSON.stringify(req.body ? req.body : {});\n    const _url = JSON.stringify(tempUrl ? tempUrl : {});\n\n    loggerService.log(`${_url} ${_body} ${_auth}`.replace(/\\\\/, ''));\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerService.html":{"url":"classes/LoggerService.html","title":"class - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/logging/logger.service.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        LS\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(service: string)\n                    \n                \n                        \n                            \n                                Defined in src/modules/logging/logger.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     winston.Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/logging/logger.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logging/logger.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, trace: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logging/logger.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logging/logger.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logging/logger.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logging/logger.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { utilities as nestWinstonModuleUtilities } from 'nest-winston';\nimport * as winston from 'winston';\n\nimport { LoggerService as LS } from '@nestjs/common';\n\nconst { errors, combine, json, timestamp, ms, prettyPrint } = winston.format;\n\nexport class LoggerService implements LS {\n  private logger: winston.Logger;\n\n  constructor(service: string) {\n    this.logger = winston.createLogger({\n      format: combine(\n        errors({ stack: true }),\n        json(),\n        timestamp({ format: 'isoDateTime' }),\n        ms(),\n        prettyPrint(),\n      ),\n      defaultMeta: { service },\n      transports: [\n        new winston.transports.Console({\n          level: 'debug',\n          format: combine(nestWinstonModuleUtilities.format.nestLike('Nest-2FA')),\n        }),\n      ],\n    });\n\n    // console.log = (message: any, ...params: any) => {\n    //   this.logger.debug(message, ...params);\n    // };\n  }\n\n  log(message: string) {\n    this.logger.info(message);\n  }\n  error(message: string, trace: string) {\n    this.logger.error(message, trace);\n  }\n  warn(message: string) {\n    this.logger.warning(message);\n  }\n  debug(message: string) {\n    this.logger.debug(message);\n  }\n  verbose(message: string) {\n    this.logger.verbose(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(email: string, password: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/login.dto.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        password\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString, IsString, Length } from 'class-validator';\n\nexport class LoginDto {\n  constructor(email: string, password: string) {\n    this.email = email;\n    this.password = password;\n  }\n\n  @IsString()\n  email: string;\n\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/entity/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/entity/role.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Roles)@Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/entity/role.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsEnum, IsString } from 'class-validator';\nimport { Column, Entity } from 'typeorm';\nimport { CoreEntity } from '~modules/database/core.entity';\n\nexport enum Roles {\n  TEST_ROLE = 'TestRole',\n  MANAGE_USER = 'ManageUser',\n}\n\n@Entity()\nexport class Role extends CoreEntity {\n  @IsEnum(Roles)\n  @Column({ unique: true })\n  name: Roles;\n\n  @IsString()\n  @Column()\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Role1670203037069.html":{"url":"classes/Role1670203037069.html","title":"class - Role1670203037069","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role1670203037069\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1670203037069-Role.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Role1670203037069'\n                    \n                \n                    \n                        \n                                Defined in migrations/1670203037069-Role.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1670203037069-Role.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1670203037069-Role.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class Role1670203037069 implements MigrationInterface {\n    name = 'Role1670203037069'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`role\\` (\\`id\\` int NOT NULL AUTO_INCREMENT, \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`destroyedAt\\` datetime(6) NULL, \\`name\\` varchar(255) NOT NULL, \\`description\\` varchar(255) NOT NULL, UNIQUE INDEX \\`IDX_ae4578dcaed5adff96595e6166\\` (\\`name\\`), PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`role_group\\` (\\`id\\` int NOT NULL AUTO_INCREMENT, \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`destroyedAt\\` datetime(6) NULL, \\`name\\` varchar(255) NOT NULL, \\`description\\` varchar(255) NOT NULL, UNIQUE INDEX \\`IDX_bae3cfbe67c8cad245cd04a319\\` (\\`name\\`), PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`role_group_join\\` (\\`roleGroupId\\` int NOT NULL, \\`roleId\\` int NOT NULL, INDEX \\`IDX_171d67ef8913e9dc113831b9fa\\` (\\`roleGroupId\\`), INDEX \\`IDX_90430aa399740cac39bff3ca7b\\` (\\`roleId\\`), PRIMARY KEY (\\`roleGroupId\\`, \\`roleId\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`roleGroupId\\` int NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD UNIQUE INDEX \\`IDX_34e11176bdc021644092329708\\` (\\`roleGroupId\\`)`);\n        await queryRunner.query(`CREATE UNIQUE INDEX \\`REL_34e11176bdc021644092329708\\` ON \\`user\\` (\\`roleGroupId\\`)`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD CONSTRAINT \\`FK_34e11176bdc021644092329708f\\` FOREIGN KEY (\\`roleGroupId\\`) REFERENCES \\`role_group\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`role_group_join\\` ADD CONSTRAINT \\`FK_171d67ef8913e9dc113831b9fad\\` FOREIGN KEY (\\`roleGroupId\\`) REFERENCES \\`role_group\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE CASCADE`);\n        await queryRunner.query(`ALTER TABLE \\`role_group_join\\` ADD CONSTRAINT \\`FK_90430aa399740cac39bff3ca7b8\\` FOREIGN KEY (\\`roleId\\`) REFERENCES \\`role\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE CASCADE`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`role_group_join\\` DROP FOREIGN KEY \\`FK_90430aa399740cac39bff3ca7b8\\``);\n        await queryRunner.query(`ALTER TABLE \\`role_group_join\\` DROP FOREIGN KEY \\`FK_171d67ef8913e9dc113831b9fad\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP FOREIGN KEY \\`FK_34e11176bdc021644092329708f\\``);\n        await queryRunner.query(`DROP INDEX \\`REL_34e11176bdc021644092329708\\` ON \\`user\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP INDEX \\`IDX_34e11176bdc021644092329708\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`roleGroupId\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_90430aa399740cac39bff3ca7b\\` ON \\`role_group_join\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_171d67ef8913e9dc113831b9fa\\` ON \\`role_group_join\\``);\n        await queryRunner.query(`DROP TABLE \\`role_group_join\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_bae3cfbe67c8cad245cd04a319\\` ON \\`role_group\\``);\n        await queryRunner.query(`DROP TABLE \\`role_group\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_ae4578dcaed5adff96595e6166\\` ON \\`role\\``);\n        await queryRunner.query(`DROP TABLE \\`role\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RoleGroup.html":{"url":"entities/RoleGroup.html","title":"entity - RoleGroup","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RoleGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/entity/role-group.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/entity/role-group.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/entity/role-group.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, role => role.id, {eager: true})@JoinTable({name: 'role_group_join'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/entity/role-group.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsNumber, IsString } from 'class-validator';\nimport { Column, Entity, JoinTable, ManyToMany } from 'typeorm';\nimport { CoreEntity } from '~modules/database/core.entity';\nimport { Role } from './role.entity';\n\n@Entity()\nexport class RoleGroup extends CoreEntity {\n  @IsString()\n  @Column({ unique: true })\n  name: string;\n\n  @IsString()\n  @Column()\n  description: string;\n\n  @ManyToMany(() => Role, (role) => role.id, { eager: true })\n  @JoinTable({ name: 'role_group_join' })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/role.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/role.guard.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Request } from 'express';\nimport { Observable } from 'rxjs';\n\nimport { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\nimport { User } from '~src/user/user.entity';\n\nimport { Roles } from '~src/role/entity/role.entity';\nimport { Reflector } from '@nestjs/core';\nimport { ROLE_KEY } from '../decorator/role.decorator';\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean | Promise | Observable {\n    const request: Request & { user?: User } = context.switchToHttp().getRequest();\n    const user: User | undefined = request.user;\n    if (!user) return false;\n\n    const requiredRoles = this.reflector.get(ROLE_KEY, context.getHandler());\n    const userRoles = user.roleGroup?.roles.map((item) => item.name);\n    if (requiredRoles === undefined) return true;\n    if (userRoles === undefined || requiredRoles === undefined) return false;\n\n    return requiredRoles.every((role) => userRoles.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoleModule.html":{"url":"modules/RoleModule.html","title":"module - RoleModule","body":"\n                   \n\n\n\n\n    Modules\n    RoleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_exports\n\n\n\ncluster_RoleModule_providers\n\n\n\n\nRoleService \n\nRoleService \n\n\n\nRoleModule\n\nRoleModule\n\nRoleService  -->\n\nRoleModule->RoleService \n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/role/role.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoleService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoleService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.module.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Logger, LoggerService, Module, OnModuleInit } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { RoleGroup } from './entity/role-group.entity';\nimport { Role, Roles } from './entity/role.entity';\nimport { RoleService } from './role.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, RoleGroup])],\n  providers: [RoleService],\n  exports: [RoleService],\n})\nexport class RoleModule implements OnModuleInit {\n  readonly logger: Logger;\n  constructor(private readonly roleService: RoleService) {\n    this.logger = new Logger('RoleModule', { timestamp: true });\n  }\n\n  async onModuleInit() {\n    this.logger.log('Initializing Role data');\n\n    this.logger.log('Creating base roles');\n    const roles = {\n      ManageUser: await this.roleService.saveRole({\n        name: Roles.MANAGE_USER,\n        description: '유저 관리 권한',\n      }),\n      TestRole: await this.roleService.saveRole({\n        name: Roles.TEST_ROLE,\n        description: '테스트 권한',\n      }),\n    };\n\n    this.logger.log('Creating role groups');\n    await this.roleService.saveRoleGroup({\n      name: 'SuperAdmin',\n      description: '슈퍼 어드민',\n      roles: [roles.ManageUser, roles.TestRole],\n    });\n    await this.roleService.saveRoleGroup({\n      name: 'Admin',\n      description: '어드민',\n      roles: [roles.TestRole],\n    });\n    await this.roleService.saveRoleGroup({\n      name: 'User',\n      description: '기본 유저',\n      roles: [],\n    });\n\n    this.logger.log('Initialize Role data Completed');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoleService.html":{"url":"injectables/RoleService.html","title":"injectable - RoleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/role.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findRoleByName\n                            \n                            \n                                    Async\n                                findRoleGroupByName\n                            \n                            \n                                    Async\n                                findRolesById\n                            \n                            \n                                    Async\n                                saveRole\n                            \n                            \n                                    Async\n                                saveRoleGroup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roleRepository: Repository, roleGroupRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/role/role.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roleGroupRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRoleByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRoleByName(name: Roles)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                Roles\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRoleGroupByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRoleGroupByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRolesById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRolesById(arr: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveRole(undefined: SaveRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SaveRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveRoleGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveRoleGroup(undefined: SaveRoleGroupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SaveRoleGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { SaveRoleGroupDto } from './dto/save-role-group.dto';\nimport { SaveRoleDto } from './dto/save-role.dto';\nimport { RoleGroup } from './entity/role-group.entity';\nimport { Role, Roles } from './entity/role.entity';\n\n@Injectable()\nexport class RoleService {\n  constructor(\n    @InjectRepository(Role) private readonly roleRepository: Repository,\n    @InjectRepository(RoleGroup) private readonly roleGroupRepository: Repository,\n  ) {}\n\n  async saveRole({ name, description }: SaveRoleDto) {\n    const existRole = await this.findRoleByName(name);\n\n    const newRole = existRole || this.roleRepository.create();\n    newRole.name = name;\n    newRole.description = description;\n\n    return await this.roleRepository.save(newRole);\n  }\n\n  async saveRoleGroup({ name, description, roles }: SaveRoleGroupDto) {\n    const existRoleGroup = await this.findRoleGroupByName(name);\n\n    // const relatedRoles = await this.findRolesById(roles);\n    const newRoleGroup = existRoleGroup || this.roleGroupRepository.create();\n    newRoleGroup.name = name;\n    newRoleGroup.description = description;\n    newRoleGroup.roles = roles;\n\n    return await this.roleGroupRepository.save(newRoleGroup);\n  }\n\n  async findRolesById(arr: number[]) {\n    return Promise.all(arr.map((id) => this.roleRepository.findOne({ where: { id } })));\n  }\n\n  async findRoleByName(name: Roles) {\n    return this.roleRepository.findOne({ where: { name } });\n  }\n\n  async findRoleGroupByName(name: string) {\n    return this.roleGroupRepository.findOne({ where: { name } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveRoleDto.html":{"url":"classes/SaveRoleDto.html","title":"class - SaveRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/dto/save-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/dto/save-role.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/dto/save-role.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsString } from 'class-validator';\nimport { Roles } from '../entity/role.entity';\n\nexport class SaveRoleDto {\n  @IsEnum(Roles)\n  name: Roles;\n\n  @IsString()\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveRoleGroupDto.html":{"url":"classes/SaveRoleGroupDto.html","title":"class - SaveRoleGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveRoleGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/dto/save-role-group.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/dto/save-role-group.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/dto/save-role-group.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInstance(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/dto/save-role-group.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInstance, IsNumber, IsString } from 'class-validator';\nimport { Role } from '../entity/role.entity';\n\nexport class SaveRoleGroupDto {\n  @IsString()\n  name: string;\n\n  @IsString()\n  description: string;\n\n  @IsInstance(Role)\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TestController.html":{"url":"controllers/TestController.html","title":"controller - TestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/test/test.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /test\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                            \n                                twoFactorTest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@UseGuards(JwtAuthGuard)@Role(Roles.TEST_ROLE, Roles.MANAGE_USER)@UseGuards(RoleGuard)\n                \n            \n\n            \n                \n                    Defined in src/test/test.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        twoFactorTest\n                        \n                    \n                \n            \n            \n                \ntwoFactorTest(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/2fa')@UseGuards(TwoFactorAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/test/test.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Res, UseGuards } from '@nestjs/common';\nimport { Response } from 'express';\nimport { Role } from '~src/auth/decorator/role.decorator';\n\nimport { GetUser } from '~src/auth/decorator/user.decorator';\nimport { TwoFactorAuthGuard } from '~src/auth/guard/2fa-auth.guard';\nimport { JwtAuthGuard } from '~src/auth/guard/jwt-auth.guard';\nimport { RoleGuard } from '~src/auth/guard/role.guard';\nimport { Roles } from '~src/role/entity/role.entity';\nimport { User } from '~src/user/user.entity';\n\nimport { TestService } from './test.service';\n\n@Controller('/test')\nexport class TestController {\n  constructor(private readonly testService: TestService) {}\n\n  @Post('/')\n  @UseGuards(JwtAuthGuard)\n  @Role(Roles.TEST_ROLE, Roles.MANAGE_USER)\n  @UseGuards(RoleGuard)\n  getHello(@GetUser() user: User) {\n    // console.log(user);\n    return this.testService.getHello();\n  }\n\n  @Post('/2fa')\n  @UseGuards(TwoFactorAuthGuard)\n  twoFactorTest(@GetUser() user: User) {\n    console.log(user);\n    return this.testService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TestModule.html":{"url":"modules/TestModule.html","title":"module - TestModule","body":"\n                   \n\n\n\n\n    Modules\n    TestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TestModule\n\n\n\ncluster_TestModule_imports\n\n\n\ncluster_TestModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTestModule\n\nTestModule\n\nTestModule -->\n\nAuthModule->TestModule\n\n\n\n\n\nTestService\n\nTestService\n\nTestModule -->\n\nTestService->TestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/test/test.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TestController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\n\nimport { AuthModule } from '~src/auth/auth.module';\n\nimport { TestController } from './test.controller';\nimport { TestService } from './test.service';\n\n@Module({\n  imports: [AuthModule, JwtModule],\n  controllers: [TestController],\n  providers: [TestService],\n})\nexport class TestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TestService.html":{"url":"injectables/TestService.html","title":"injectable - TestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/test/test.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/test/test.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class TestService {\n  getHello() {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TotpModule.html":{"url":"modules/TotpModule.html","title":"module - TotpModule","body":"\n                   \n\n\n\n\n    Modules\n    TotpModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/totp/totp.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        ForRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    ForRoot(options: TotpModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/totp/totp.module.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                TotpModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Module } from '@nestjs/common';\n\nimport { CONFIG_OPTIONS } from './totp.constants';\nimport { TotpModuleOptions } from './totp.interface';\nimport { TotpService } from './totp.service';\n\n@Module({})\nexport class TotpModule {\n  static ForRoot(options: TotpModuleOptions): DynamicModule {\n    return {\n      module: TotpModule,\n      providers: [\n        {\n          provide: CONFIG_OPTIONS,\n          useValue: options,\n        },\n        TotpService,\n      ],\n      exports: [TotpService],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TotpModuleOptions.html":{"url":"interfaces/TotpModuleOptions.html","title":"interface - TotpModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TotpModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/totp/totp.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            digits\n                                        \n                                \n                                \n                                        \n                                            period\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        digits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        digits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        period\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        period:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TotpModuleOptions {\n  period: number;\n  digits: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TotpService.html":{"url":"injectables/TotpService.html","title":"injectable - TotpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TotpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/totp/totp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateQrCode\n                            \n                            \n                                generateSecret\n                            \n                            \n                                    Private\n                                generateSecretASCII\n                            \n                            \n                                getCode\n                            \n                            \n                                getURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: TotpModuleOptions)\n                    \n                \n                        \n                            \n                                Defined in src/modules/totp/totp.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        TotpModuleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateQrCode\n                        \n                    \n                \n            \n            \n                \ngenerateQrCode(stream: Response, url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/totp/totp.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateSecret\n                        \n                    \n                \n            \n            \n                \ngenerateSecret()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/totp/totp.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generateSecretASCII\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateSecretASCII(length: number, symbols)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/totp/totp.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        32\n                                    \n\n                                \n                                \n                                    symbols\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCode\n                        \n                    \n                \n            \n            \n                \ngetCode(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/totp/totp.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getURL\n                        \n                    \n                \n            \n            \n                \ngetURL(key: string, label: string, issuer: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/totp/totp.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'Nest-2FA 테스트'\n                                    \n\n                                \n                                \n                                    issuer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'NEST-2FA'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomBytes } from 'crypto';\n\nimport { Response } from 'express';\nimport { encode } from 'hi-base32';\nimport QRCode from 'qrcode';\nimport { default as totp } from 'totp-generator';\n\nimport { Inject, Injectable } from '@nestjs/common';\n\nimport { CONFIG_OPTIONS } from './totp.constants';\nimport { TotpModuleOptions } from './totp.interface';\n\n@Injectable()\nexport class TotpService {\n  constructor(@Inject(CONFIG_OPTIONS) private readonly options: TotpModuleOptions) {}\n\n  getCode(key: string) {\n    const code = totp(key, {\n      ...this.options,\n    });\n    // console.log(`Generated2FAcode ${code}`);\n    return code;\n  }\n\n  getURL(key: string, label = 'Nest-2FA 테스트', issuer = 'NEST-2FA') {\n    return `otpauth://totp/${label}:?secret=${key}&issuer=${issuer}&algorithm=SHA1&digits=${this.options.digits}&period=${this.options.period}`;\n  }\n\n  private generateSecretASCII(length = 32, symbols = false) {\n    const bytes = randomBytes(length);\n    let set = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz';\n    if (symbols) {\n      set += '!@#$%^&*()<>?/[]{},.:;';\n    }\n\n    let output = '';\n    for (let i = 0, l = bytes.length; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/TwoFactorAuthGuard.html":{"url":"guards/TwoFactorAuthGuard.html","title":"guard - TwoFactorAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    TwoFactorAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/2fa-auth.guard.ts\n            \n\n\n\n                \n                Extends\n                \n                \n                            JwtAuthGuard\n                \n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/2fa-auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/2fa-auth.guard.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Request } from 'express';\nimport { Observable } from 'rxjs';\n\nimport { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { User } from '~src/user/user.entity';\n\nimport { JwtAuthPayload } from '../auth.interface';\nimport { AuthService } from '../auth.service';\nimport { JwtAuthGuard } from './jwt-auth.guard';\n\n@Injectable()\nexport class TwoFactorAuthGuard extends JwtAuthGuard implements CanActivate {\n  constructor(readonly authService: AuthService, readonly jwtService: JwtService) {\n    super(authService);\n  }\n\n  canActivate(context: ExecutionContext): boolean | Promise | Observable {\n    if (!super.canActivate(context)) return false;\n\n    const request: Request & { user?: User } = context.switchToHttp().getRequest();\n    const user: User | undefined = request.user;\n\n    const { authorization } = request.headers;\n    if (authorization) {\n      const [_, token] = authorization.split(' ');\n      const payload = this.jwtService.decode(token) as Partial;\n\n      return user !== undefined && payload.twoFactorAuthenticated;\n    }\n\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TwoFactorLoginDto.html":{"url":"classes/TwoFactorLoginDto.html","title":"class - TwoFactorLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TwoFactorLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/2fa-login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                twoFactorCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(twoFactorCode: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/2fa-login.dto.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        twoFactorCode\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        twoFactorCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()@Length(6, 6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/2fa-login.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString, Length } from 'class-validator';\n\nexport class TwoFactorLoginDto {\n  constructor(twoFactorCode: string) {\n    this.twoFactorCode = twoFactorCode;\n  }\n\n  @IsNumberString()\n  @Length(6, 6)\n  twoFactorCode: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                refreshToken\n                            \n                            \n                                    Optional\n                                roleGroup\n                            \n                            \n                                    Optional\n                                twoFactorSecret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})@IsString()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty()@IsString()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        roleGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleGroup\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInstance(RoleGroup)@OneToOne(undefined, roleGroup => roleGroup.id)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        twoFactorSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNotEmpty()@IsString()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { hash, compare } from 'bcrypt';\nimport { Exclude } from 'class-transformer';\nimport { IsInstance, IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { BeforeInsert, Column, Entity, JoinColumn, OneToOne } from 'typeorm';\n\nimport { CoreEntity } from '~src/modules/database/core.entity';\nimport { RoleGroup } from '~src/role/entity/role-group.entity';\n\n@Entity()\nexport class User extends CoreEntity {\n  @IsString()\n  @Column()\n  email: string;\n\n  @IsString()\n  @Column()\n  name: string;\n\n  @Exclude({ toPlainOnly: true })\n  @IsString()\n  @Column()\n  password: string;\n\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @Column({ nullable: true })\n  twoFactorSecret?: string;\n\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @Column({ nullable: true })\n  refreshToken?: string;\n\n  @IsOptional()\n  @IsInstance(RoleGroup)\n  @OneToOne(() => RoleGroup, (roleGroup) => roleGroup.id)\n  @JoinColumn()\n  roleGroup?: RoleGroup;\n\n  @BeforeInsert()\n  async hashPassword(): Promise {\n    this.password = await hash(this.password, 10);\n  }\n\n  async checkPassword(inputPassword: string): Promise {\n    return await compare(inputPassword, this.password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \ngetCurrentUser(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/me')@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         { result: User; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { GetUser } from '~src/auth/decorator/user.decorator';\nimport { JwtAuthGuard } from '~src/auth/guard/jwt-auth.guard';\n\n// import { AuthUser } from '~modules/auth/auth-user.decorator';\n// import { AuthGuard } from '~modules/auth/auth.guard';\n\nimport { CreateUserDto } from '../auth/dto/create-user.dto';\nimport { User } from './user.entity';\nimport { UserService } from './user.service';\n\n@Controller('/user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get('/me')\n  @UseGuards(JwtAuthGuard)\n  getCurrentUser(@GetUser() user: User) {\n    return { result: user };\n  }\n\n  //   @Post('/role/create')\n  //   async createRole(@Body() createRoleDto: CreateRoleDto) {\n  //     return { result: await this.userService.createRole(createRoleDto) };\n  //   }\n\n  //   @UseGuards(AuthGuard)\n  //   @Get()\n  //   async getCurrentUser(@AuthUser() authUser: User) {\n  //     return await this.userService.findById(authUser.id);\n  //   }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from '~src/auth/auth.module';\n\nimport { DatabaseModule } from '~src/modules/database/database.module';\n\nimport { UserController } from './user.controller';\nimport { User } from './user.entity';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), AuthModule],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(userId: number, options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FindOneOptions, Repository } from 'typeorm';\n\nimport { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\n\nimport { CreateUserDto } from '../auth/dto/create-user.dto';\nimport { User } from './user.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(@InjectRepository(User) private readonly userRepository: Repository) {}\n\n  async findById(userId: number, options?: FindOneOptions): Promise {\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      ...options,\n    });\n    if (!user) throw new NotFoundException('User Not Found');\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                migrations/1669729219582-JWT.ts\n            \n            class\n            JWT1669729219582\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1670203037069-Role.ts\n            \n            class\n            Role1670203037069\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.interface.ts\n            \n            interface\n            JwtAuthPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/auth/decorator/role.decorator.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorator/role.decorator.ts\n            \n            variable\n            ROLE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorator/user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/2fa-login.dto.ts\n            \n            class\n            TwoFactorLoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guard/2fa-auth.guard.ts\n            \n            guard\n            TwoFactorAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guard/jwt-auth.guard.ts\n            \n            guard\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guard/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/middleware/jwt.middleware.ts\n            \n            injectable\n            JwtMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/database/core.entity.ts\n            \n            class\n            CoreEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/database/typeorm.datasource.ts\n            \n            variable\n            AppDataSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/database/typeorm.datasource.ts\n            \n            variable\n            options\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/logging/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/logging/logger.service.ts\n            \n            class\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/logging/logger.service.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/totp/totp.constants.ts\n            \n            variable\n            CONFIG_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/totp/totp.interface.ts\n            \n            interface\n            TotpModuleOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/totp/totp.service.ts\n            \n            injectable\n            TotpService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/role/dto/save-role-group.dto.ts\n            \n            class\n            SaveRoleGroupDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/role/dto/save-role.dto.ts\n            \n            class\n            SaveRoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/role/entity/role-group.entity.ts\n            \n            entity\n            RoleGroup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/role/entity/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/role/role.service.ts\n            \n            injectable\n            RoleService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/test/test.controller.ts\n            \n            controller\n            TestController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/test/test.service.ts\n            \n            injectable\n            TestService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/typeorm : ^9.0.0\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            hi-base32 : ^0.5.1\n        \n            joi : ^17.6.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            mysql2 : ^2.3.3\n        \n            nest-winston : ^1.7.0\n        \n            qrcode : ^1.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            totp-generator : ^0.0.14\n        \n            typeorm : ^0.3.7\n        \n            winston : ^3.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../role.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/role/entity/role.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Roles\n                    \n                \n                        \n                            \n                                 TEST_ROLE\n                            \n                        \n                        \n                            \n                                Value : TestRole\n                            \n                        \n                        \n                            \n                                 MANAGE_USER\n                            \n                        \n                        \n                            \n                                Value : ManageUser\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest 2FA Example\nInstallation\n$ yarn installRunning the app\n# build app\n$ yarn build\n\n# start database\n$ docker-compose up -d\n\n# migration db schema\n$ yarn typeorm:run-migrations\n\n# start app\n$ yarn run start:prodUsage\nStep 1\n계정 등록을 위해 서버로 계정 등록 요청을 보냅니다 \nPOST http://localhost:3000/user/register\n{\n  \"email\": \"test@example.com\",\n  \"name\": \"test\",\n  \"password\": \"pw\",\n}정상적으로 등록이 된 경우, 2fa private Key와 등록이 가능한 2fa url이 반환됩니다.\n{\n  \"result\": {\n    \"twoFactorKey\": \"NNGHARSHOZGVA5CQJZBHMUCUJBGWWZRUKR3DO6BVKBTHQT2KOJ3Q\",\n    \"twoFactorUrl\": \"otpauth://totp/Nest-2FA 테스트?secret=NNGHARSHOZGVA5CQJZBHMUCUJBGWWZRUKR3DO6BVKBTHQT2KOJ3Q&issuer=NEST-2FA&algorithm=SHA1&digits=6&period=30\"\n  }\n}twoFactorKey를 바로 OTP클라이언트에 등록하거나, twoFactorUrl을 QR 형태로 변환하여 OTP클라이언트에 등록 가능합니다.\nStep 2\nOTP 클라이언트에 표시된 OTP CODE를 앞서 등록한 계정 정보와 함께 전송합니다. \nPOST http://localhost:3000/user/login \n{\n  \"email\": \"test@example.com\",\n  \"password\": \"pw\",\n  \"twoFactorCode\": \"035579\" // YOUR 2FA CODE\n}정상적으로 인증이 완료되면 jwt 토큰 정보가 반환됩니다.\n{\n  \"token\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NywiZW1haWwiOiJ0ZXN0QGV4YW1wbGUuY29tIiwibmFtZSI6InRlc3QiLCJpYXQiOjE2Njg3NTUyMjl9.a3kfquIFIB5BQEsGQn1IRbOTud7LyTkn5VkBjkF0R25Q47x_mK25IZIIoYM7gpJkaInNCA8To_FgeO_c-A3vKmVOrWzBCS7dAYVKxp_nrFxXGBAqeTlnJlD9ZUzNC8grEi4XGwvvIv2uTC4F2L3hy6Q_kRLvXtCFgfSDAGQmXOKXtG46ZFmtkHuxksmtVpchVjFP8zIUTWj8cefx2WNkrdalRdR3UKbFNIjdTenPobEFsgwIOwEefQ1dUP-ztMPdHdQu8lA7YkNbn4XTfrEIOeDmHDwMR6_bY6igCrJDcKxbOrGH6ruPh4mtERdqEeCXCoZZyFpP3jipvzQqYrHm7w\"\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TotpModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_exports\n\n\n\ncluster_RoleModule_providers\n\n\n\ncluster_TestModule\n\n\n\ncluster_TestModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTestModule\n\nTestModule\n\nTestModule -->\n\nAuthModule->TestModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nRoleService \n\nRoleService \n\nRoleService  -->\n\nRoleModule->RoleService \n\n\n\nAppModule -->\n\nTestModule->AppModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\n\n\nTotpModule\n\nTotpModule\n\nAuthModule -->\n\nTotpModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\nTestService\n\nTestService\n\nTestModule -->\n\nTestService->TestModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppDataSource   (src/.../typeorm.datasource.ts)\n                        \n                        \n                            CONFIG_OPTIONS   (src/.../totp.constants.ts)\n                        \n                        \n                            GetUser   (src/.../user.decorator.ts)\n                        \n                        \n                            options   (src/.../typeorm.datasource.ts)\n                        \n                        \n                            Role   (src/.../role.decorator.ts)\n                        \n                        \n                            ROLE_KEY   (src/.../role.decorator.ts)\n                        \n                        \n                               (src/.../logger.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/database/typeorm.datasource.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppDataSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource(options)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataSourceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST,\n  port: Number(process.env.DB_PORT),\n  username: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  // synchronize: process.env.NODE_ENV !== 'production',\n  // logging: process.env.NODE_ENV !== 'production',\n  entities: ['dist/**/*.entity.{js,ts}'],\n  migrations: ['dist/migrations/*{.ts,.js}'],\n  migrationsRun: true,\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/totp/totp.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CONFIG_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CONFIG_OPTIONS'\n                    \n                \n\n\n        \n    \n\n    src/auth/decorator/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n  return request.user as UserEntity;\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/decorator/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Roles[]) => SetMetadata(ROLE_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/modules/logging/logger.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : winston.format\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
