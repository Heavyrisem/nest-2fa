var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.03,1,2.364]],["body/modules/AppModule.html",[0,1.314,1,4.617,2,1.272,3,2.182,4,2.694,5,2.694,6,3.214,7,0.024,8,3.47,9,3.77,10,3.77,11,3.47,12,2.534,13,1.804,14,1.804,15,0.221,16,0.221,17,0.195,18,3.171,19,2.346,20,0.733,21,3.171,22,4.454,23,5.584,24,0.426,25,3.171,26,0.733,27,0.459,28,0.363,29,0.646,30,3.171,31,0.733,32,2.147,33,0.515,34,4.454,35,4.454,36,4.454,37,0.606,38,4.454,39,4.454,40,2.381,41,3.344,42,1.554,43,3.171,44,2.147,45,3.171,46,3.171,47,2.147,48,3.171,49,3.171,50,3.171,51,3.171,52,1.554,53,1.804,54,3.785,55,3.171,56,2.694,57,1.194,58,3.171,59,1.357,60,0.221,61,0.01,62,1.357,63,3.171,64,3.171,65,0.015,66,0.015]],["title/controllers/AuthController.html",[67,1.84,68,2.364]],["body/controllers/AuthController.html",[7,0.024,15,0.124,16,0.124,17,0.109,20,0.663,24,0.611,26,1.052,27,0.659,28,0.586,29,0.927,31,1.052,33,0.481,37,0.339,42,0.869,52,0.869,57,1.08,60,0.124,61,0.006,65,0.009,66,0.009,67,0.934,68,1.941,69,1.506,70,1.331,71,1.773,72,0.186,73,2.32,74,2.866,75,2.866,76,2.436,77,2.866,78,3.608,79,1.773,80,3.543,81,2.7,82,1.714,83,2.866,84,1.773,85,3.759,86,1.773,87,1.777,88,1.773,89,2.866,90,1.773,91,1.2,92,1.773,93,3.167,94,2.866,95,1.773,96,1.773,97,2.184,98,2.866,99,2.866,100,1.773,101,2.709,102,1.773,103,3.297,104,1.773,105,1.773,106,0.758,107,3.522,108,1.773,109,1.2,110,1.331,111,1.331,112,3.066,113,1.2,114,2.053,115,1.506,116,1.506,117,0.934,118,1.768,119,1.2,120,2.562,121,1.773,122,1.506,123,1.506,124,0.934,125,1.773,126,1.2,127,2.053,128,1.65,129,1.331,130,1.768,131,1.331,132,1.506,133,1.2,134,0.811,135,1.331,136,1.773,137,0.628,138,2.23,139,1.947,140,1.773,141,2.152,142,1.773,143,1.773,144,1.879,145,1.2,146,1.834,147,1.773,148,2.866,149,1.773,150,0.898,151,1.773,152,1.773,153,4.25,154,3.918,155,1.773,156,4.145,157,4.551,158,1.773,159,1.773,160,2.436,161,2.866,162,1.773,163,1.773,164,1.506,165,1.773,166,1.773,167,1.771,168,1.773,169,1.771,170,1.773,171,1.773,172,3.608,173,1.773,174,3.608,175,1.773,176,1.506,177,1.506,178,1.773,179,2.866,180,1.773,181,1.506,182,1.773,183,1.773,184,1.773,185,1.506,186,2.866,187,1.773]],["title/modules/AuthModule.html",[0,1.03,6,1.84]],["body/modules/AuthModule.html",[0,1.399,2,1.392,3,2.323,6,3.567,7,0.024,11,1.974,12,2.697,13,1.974,14,1.974,15,0.242,16,0.242,17,0.214,19,2.498,33,0.529,37,0.663,41,3.56,42,1.7,52,2.323,53,2.697,60,0.242,61,0.011,65,0.016,66,0.016,68,3.656,87,0.963,117,1.828,118,3.344,119,2.349,127,1.974,130,2.323,131,2.605,134,1.587,135,2.605,188,2.949,189,2.949,190,2.949,191,2.949,192,3.569,193,3.756,194,3.47,195,3.21,196,2.949,197,2.349,198,1.7,199,3.47,200,3.47,201,3.47,202,3.47,203,2.949,204,3.47,205,2.949,206,2.949,207,2.949,208,3.47]],["title/injectables/AuthService.html",[118,1.711,209,0.913]],["body/injectables/AuthService.html",[7,0.024,15,0.091,16,0.091,17,0.08,20,0.514,24,0.721,26,1.241,27,0.824,28,0.614,29,1.094,31,1.21,32,0.885,33,0.429,37,0.25,42,0.64,57,1.772,59,1.243,60,0.091,61,0.004,65,0.007,66,0.007,72,0.137,73,2.3,76,2.47,80,1.952,81,1.807,85,0.808,87,1.524,91,2.605,93,2.12,103,2.12,106,0.559,110,0.981,112,3.796,113,0.885,114,2.541,115,1.111,116,1.111,117,0.689,118,1.09,122,1.111,123,1.111,127,2.541,128,2.244,130,2.189,131,0.981,132,1.111,133,0.885,137,0.788,138,2.305,139,1.646,144,1.878,145,1.967,146,2.067,150,1.682,153,3.143,154,3.715,160,1.111,164,1.891,167,0.808,169,2.907,181,1.111,198,0.64,209,0.582,210,0.64,211,1.111,212,2.225,213,2.225,214,2.225,215,2.225,216,2.225,217,2.906,218,2.225,219,2.225,220,2.225,221,2.906,222,1.111,223,2.576,224,1.307,225,1.891,226,2.225,227,3.557,228,1.307,229,2.225,230,2.225,231,1.307,232,2.889,233,2.225,234,3.431,235,1.307,236,1.111,237,2.225,238,1.307,239,2.225,240,2.585,241,1.307,242,3.796,243,1.307,244,1.307,245,1.569,246,1.307,247,1.307,248,2.225,249,1.447,250,1.307,251,2.225,252,1.307,253,2.605,254,0.744,255,2.225,256,1.307,257,1.307,258,0.885,259,1.307,260,0.524,261,1.111,262,1.307,263,1.111,264,0.981,265,1.111,266,1.307,267,2.189,268,1.531,269,2.906,270,3.847,271,1.307,272,1.307,273,0.524,274,1.307,275,1.307,276,1.307,277,1.307,278,1.307,279,1.307,280,2.906,281,2.906,282,2.906,283,2.47,284,2.47,285,1.307,286,1.307,287,1.307,288,2.205,289,2.225,290,1.307,291,1.307,292,1.307,293,1.307,294,2.225,295,0.981,296,2.225,297,1.307,298,1.307,299,2.906,300,1.307,301,1.307,302,1.307,303,1.307,304,1.307,305,1.671,306,1.891,307,2.225,308,3.431,309,2.225,310,1.891,311,1.891,312,1.967,313,2.225,314,2.915,315,2.225,316,2.225,317,2.225,318,2.225,319,1.307,320,2.225,321,1.307,322,1.307,323,1.307,324,1.307,325,1.307,326,0.492,327,1.307,328,1.307,329,1.111,330,1.111,331,0.64]],["title/modules/ConfigurationModule.html",[0,1.03,8,1.987]],["body/modules/ConfigurationModule.html",[0,1.567,2,1.651,7,0.024,8,3.021,15,0.287,16,0.287,17,0.253,19,2.169,33,0.459,37,0.786,59,1.761,60,0.287,61,0.014,65,0.017,66,0.017,113,2.787,332,4.117,333,4.514,334,4.117,335,4.117,336,4.117,337,4.117,338,4.117,339,4.117,340,4.117,341,4.117,342,4.117,343,3.498,344,4.117,345,3.498,346,4.117,347,4.117,348,6.585,349,4.117,350,4.117,351,4.117,352,4.117,353,4.117,354,4.117,355,4.117,356,4.117,357,5.311,358,5.88,359,3.498,360,4.117,361,4.117,362,3.498,363,4.117,364,4.117,365,4.117]],["title/classes/CoreEntity.html",[61,0.011,366,1.987]],["body/classes/CoreEntity.html",[7,0.023,15,0.264,16,0.264,17,0.233,20,1.162,24,0.807,28,0.645,29,1.024,31,0.875,33,0.393,60,0.264,61,0.017,65,0.017,66,0.017,72,0.397,73,2.125,82,2.264,146,1.425,240,2.647,245,2.298,260,1.518,288,2.973,366,2.859,367,1.619,368,3.215,369,1.482,370,4.237,371,4.237,372,6.013,373,6.013,374,5.643,375,3.783,376,3.783,377,3.783,378,5.643,379,3.783,380,3.783,381,3.783,382,5.643,383,3.774,384,4.271,385,3.783,386,1.619,387,4.271,388,5.025,389,5.025,390,3.783]],["title/classes/CreateUserDto.html",[61,0.011,81,1.84]],["body/classes/CreateUserDto.html",[7,0.023,15,0.266,16,0.266,17,0.235,24,0.81,26,0.883,27,0.967,28,0.69,29,0.778,33,0.298,60,0.266,61,0.017,65,0.017,66,0.017,72,0.4,81,2.664,82,2.135,137,1.352,249,2.075,267,3.571,268,3.467,367,1.634,369,1.492,386,1.634,391,5.335,392,3.245,393,4.297,394,3.819,395,3.467,396,3.819,397,3.819,398,3.819,399,3.245,400,3.819,401,2.868]],["title/modules/DatabaseModule.html",[0,1.03,192,1.987]],["body/modules/DatabaseModule.html",[0,1.591,2,1.691,7,0.024,8,3.068,15,0.294,16,0.294,17,0.26,19,2.841,33,0.506,37,0.805,57,1.588,60,0.294,61,0.014,65,0.018,66,0.018,73,1.588,144,1.321,146,1.588,150,1.321,192,3.068,196,3.583,197,2.855,198,2.066,260,1.691,402,4.217,403,5.947,404,4.217,405,3.068,406,4.217,407,4.217,408,4.217,409,4.217,410,4.217,411,4.584,412,4.217,413,4.05,414,4.217,415,4.217,416,4.217]],["title/classes/JWT1669729219582.html",[61,0.011,417,2.622]],["body/classes/JWT1669729219582.html",[7,0.023,15,0.239,16,0.239,17,0.211,20,1.087,24,0.721,26,1.087,27,0.905,28,0.614,29,0.959,31,1.087,33,0.268,60,0.239,61,0.011,62,2.013,65,0.015,66,0.015,72,0.36,73,2.355,87,1.306,145,2.322,146,1.772,154,2.322,167,4.029,245,2.642,249,1.012,260,1.376,267,1.952,268,1.807,288,2.478,367,1.468,369,1.388,370,2.576,371,2.576,417,4.338,418,4.909,419,2.915,420,4.562,421,5.313,422,3.998,423,3.532,424,3.185,425,2.12,426,3.43,427,3.998,428,5.621,429,3.43,430,3.998,431,3.43,432,2.915,433,3.532,434,2.915,435,2.915,436,3.998,437,2.915,438,5.144,439,2.915,440,2.322,441,2.915,442,2.915]],["title/guards/JwtAuthGuard.html",[124,1.84,443,2.364]],["body/guards/JwtAuthGuard.html",[7,0.024,15,0.233,16,0.233,17,0.205,20,1.067,24,0.62,26,1.067,27,0.668,28,0.528,29,0.94,31,0.771,33,0.468,37,0.637,57,1.738,60,0.233,61,0.011,62,1.427,65,0.015,66,0.015,72,0.35,87,1.721,97,2.787,106,1.427,110,2.505,117,1.758,118,3.037,119,2.259,124,2.431,137,1.181,144,1.878,150,1.045,169,2.852,176,2.835,209,1.206,245,2.11,253,3.582,254,2.625,258,3.124,444,2.259,445,3.582,446,2.505,447,4.287,448,2.835,449,3.336,450,3.465,451,3.865,452,2.835,453,2.259,454,3.973,455,2.259,456,2.835,457,2.259,458,2.259,459,3.922,460,2.835,461,2.505,462,2.835,463,5.291,464,3.336,465,2.835,466,3.336,467,3.336,468,3.336]],["title/interfaces/JwtAuthPayload.html",[128,1.597,469,2.158]],["body/interfaces/JwtAuthPayload.html",[7,0.023,15,0.305,16,0.305,17,0.269,28,0.691,33,0.431,60,0.305,65,0.018,66,0.018,72,0.458,128,2.523,167,3.736,240,3.185,254,3.439,288,3.346,305,4.769,326,2.587,369,1.627,469,2.7,470,3.28,471,3.712,472,3.409,473,4.093,474,3.712,475,3.28]],["title/injectables/JwtMiddleware.html",[47,2.364,209,0.913]],["body/injectables/JwtMiddleware.html",[7,0.024,15,0.226,16,0.226,17,0.199,20,1.045,24,0.607,26,1.045,27,0.655,28,0.517,29,0.921,31,0.749,33,0.463,37,0.619,42,1.587,47,3.06,57,1.22,60,0.226,61,0.011,62,1.386,65,0.015,66,0.015,72,0.34,73,1.961,80,3.206,85,3.218,87,1.255,97,2.969,101,2.432,106,1.386,127,3.494,128,2.067,129,2.432,134,2.882,135,2.432,137,1.146,138,1.587,139,1.934,144,1.632,146,1.22,153,3.394,169,2.001,177,4.425,185,2.752,209,1.181,210,1.587,306,2.752,310,2.752,311,2.752,330,2.752,331,1.587,461,2.432,476,2.752,477,3.841,478,3.238,479,3.238,480,3.841,481,4.789,482,4.789,483,3.238,484,3.238,485,3.841,486,2.001,487,3.238,488,3.238,489,3.238,490,3.238,491,3.238,492,3.238,493,3.238,494,3.238,495,3.238,496,3.238,497,2.432]],["title/injectables/LoggerMiddleware.html",[44,2.364,209,0.913]],["body/injectables/LoggerMiddleware.html",[7,0.024,15,0.248,16,0.248,17,0.219,20,1.116,24,0.478,26,0.823,27,0.516,28,0.407,29,0.726,31,0.823,32,2.411,33,0.428,37,0.68,44,3.267,57,1.341,60,0.248,61,0.012,62,1.524,65,0.016,66,0.016,72,0.373,80,3.338,85,3.383,97,3.091,101,2.674,106,1.524,130,2.365,144,2.026,209,1.261,210,1.745,477,4.101,480,4.101,481,4.986,482,4.986,485,4.101,498,3.026,499,3.561,500,3.561,501,3.561,502,4.826,503,3.561,504,3.561,505,3.561,506,3.561,507,3.561,508,3.561,509,3.561,510,3.561,511,3.561,512,3.561,513,4.826,514,3.561,515,3.561,516,3.561,517,3.561,518,3.561,519,3.561]],["title/classes/LoggerService.html",[61,0.011,130,1.711]],["body/classes/LoggerService.html",[7,0.024,15,0.188,16,0.188,17,0.166,20,0.917,24,0.802,26,1.335,27,0.836,28,0.683,29,1.177,31,1.277,32,3.74,33,0.367,37,0.515,57,1.016,59,1.155,60,0.188,61,0.009,62,1.697,65,0.013,66,0.013,72,0.283,130,2.305,137,0.955,138,2.305,144,0.846,249,2.035,367,1.155,369,1.17,411,2.293,520,2.026,521,4.703,522,3.997,523,4.703,524,3.967,525,3.967,526,3.967,527,3.967,528,3.967,529,3.967,530,3.967,531,3.967,532,3.967,533,2.699,534,5.776,535,3.967,536,5.185,537,2.699,538,3.967,539,2.699,540,3.967,541,2.699,542,3.967,543,2.699,544,2.699,545,2.699,546,1.827,547,3.997,548,3.967,549,3.967,550,3.967,551,3.371,552,3.967,553,3.967,554,2.293,555,2.293,556,2.699,557,4.703,558,2.699,559,2.699,560,2.699,561,2.699,562,2.699,563,2.699,564,2.699,565,2.026,566,3.967,567,3.967,568,2.699,569,2.699,570,2.699,571,2.699]],["title/classes/LoginDto.html",[61,0.011,93,2.158]],["body/classes/LoginDto.html",[7,0.023,15,0.289,16,0.289,17,0.255,24,0.792,26,0.958,27,0.6,28,0.675,29,0.845,33,0.324,60,0.289,61,0.018,65,0.018,66,0.018,72,0.435,82,2.009,93,3.297,137,1.467,249,2.043,267,3.666,268,3.535,367,1.773,369,1.574,386,1.773,393,4.533,395,3.395,399,3.522,401,3.112,572,3.522,573,4.145,574,4.145,575,4.145,576,3.522,577,3.112]],["title/entities/Role.html",[273,1.401,578,1.84]],["body/entities/Role.html",[7,0.024,15,0.287,16,0.287,17,0.253,24,0.713,27,0.851,28,0.607,33,0.459,59,2.273,60,0.37,61,0.017,65,0.017,66,0.017,72,0.432,82,2,249,1.567,260,1.651,273,2.13,326,2.214,366,3.021,369,1.567,386,1.761,395,2.798,472,2.544,578,2.798,579,2.544,580,3.091,581,2.689,582,3.091,583,4.117,584,4.117,585,4.117,586,3.498,587,3.981,588,3.498,589,4.117,590,3.498,591,3.091,592,3.498,593,3.091,594,3.498,595,3.091]],["title/classes/Role1670203037069.html",[61,0.011,596,2.622]],["body/classes/Role1670203037069.html",[7,0.022,15,0.156,16,0.156,17,0.138,20,0.796,24,0.564,26,0.796,27,0.859,28,0.48,29,0.702,31,0.796,33,0.175,60,0.156,61,0.007,62,1.473,65,0.011,66,0.011,72,0.665,73,2.026,87,1.607,146,2.547,167,3.917,245,2.157,249,0.66,260,0.897,273,1.684,288,2.485,314,3.568,367,0.957,369,1.016,370,2.586,371,2.586,420,3.568,421,4.571,422,2.926,423,2.586,424,2.843,425,1.382,427,2.926,428,5.044,430,2.926,432,4.008,433,4.9,434,4.328,435,2.926,436,4.008,437,2.926,438,4.008,439,3.568,440,4.018,441,3.568,442,4.917,581,1.575,587,1.514,595,3.542,596,3.542,597,4.008,598,1.9,599,2.236,600,2.236,601,2.236,602,3.444,603,4.199,604,3.444,605,4.917,606,5.935,607,4.716,608,3.444,609,3.444,610,6.061,611,5.093,612,3.444,613,3.444,614,4.199,615,3.444,616,5.379,617,4.199,618,3.444,619,3.444,620,4.199,621,3.444,622,4.716,623,3.444,624,2.236,625,5.093]],["title/entities/RoleGroup.html",[331,1.711,578,1.84]],["body/entities/RoleGroup.html",[7,0.024,15,0.259,16,0.259,17,0.229,24,0.751,27,0.864,28,0.639,33,0.466,59,2.392,60,0.259,61,0.016,65,0.016,66,0.016,72,0.389,82,2.106,249,1.761,260,1.49,273,2.567,326,2.106,331,2.432,366,2.824,369,1.464,383,2.789,386,1.589,395,2.945,472,2.295,578,2.615,579,2.295,581,2.557,582,2.789,587,3.785,588,3.156,595,2.789,605,4.218,626,4.482,627,3.156,628,3.714,629,3.714,630,3.714,631,3.714,632,4.964,633,4.964,634,3.714,635,3.714,636,4.964,637,4.964,638,3.714]],["title/guards/RoleGuard.html",[443,2.364,639,2.364]],["body/guards/RoleGuard.html",[7,0.024,15,0.232,16,0.232,17,0.205,20,1.065,24,0.619,26,1.065,27,0.667,28,0.527,29,0.939,31,0.769,33,0.496,37,0.636,40,2.498,59,1.424,60,0.232,61,0.011,62,1.424,65,0.015,66,0.015,72,0.349,87,1.72,97,2.783,106,1.424,117,1.753,137,1.178,144,1.787,150,1.787,209,1.204,245,2.106,254,2.62,258,3.86,312,3.118,326,1.253,444,2.252,447,4.282,450,3.459,451,3.86,453,2.252,454,3.967,455,2.252,457,2.252,458,2.252,475,2.498,486,2.056,639,3.118,640,2.827,641,3.327,642,6.193,643,3.327,644,3.327,645,2.498,646,3.327,647,5.283,648,3.327,649,3.327,650,4.606,651,3.327,652,3.327,653,3.327,654,3.327]],["title/modules/RoleModule.html",[0,1.03,9,2.158]],["body/modules/RoleModule.html",[0,1.293,2,1.243,3,2.147,7,0.024,9,3.846,12,2.493,13,1.762,14,1.762,15,0.216,16,0.216,17,0.191,19,1.632,20,0.716,24,0.416,27,0.844,31,0.716,33,0.456,37,0.592,53,2.493,57,1.167,59,1.326,60,0.216,61,0.01,62,1.326,65,0.014,66,0.014,73,1.65,87,0.86,130,1.518,139,1.875,144,0.971,146,2.196,195,2.966,197,2.097,198,1.518,273,2.217,326,2.28,331,2.147,486,1.914,522,4.32,551,2.633,555,2.633,581,2.667,591,2.326,593,2.326,655,2.633,656,2.633,657,2.633,658,4.2,659,3.098,660,5.832,661,3.098,662,2.633,663,2.326,664,2.097,665,3.098,666,3.098,667,3.098,668,3.098,669,4.382,670,4.382,671,3.098,672,4.382,673,3.098,674,3.098,675,3.098,676,5.084,677,3.098,678,3.098,679,4.382,680,3.098,681,3.098,682,3.098]],["title/injectables/RoleService.html",[209,0.913,658,2.158]],["body/injectables/RoleService.html",[7,0.024,15,0.173,16,0.173,17,0.153,20,0.861,24,0.752,26,1.294,27,0.947,28,0.64,29,1.141,31,1.232,33,0.454,37,0.473,60,0.173,61,0.008,65,0.012,66,0.012,72,0.26,73,2.484,91,3.608,137,1.318,138,1.824,139,1.593,144,1.67,146,2.007,150,1.67,198,1.214,209,0.973,210,1.214,223,4.361,240,2.356,249,1.319,260,0.994,264,1.861,273,1.494,288,1.306,326,2.108,331,1.214,581,2.274,658,2.301,662,2.106,663,1.861,664,1.678,683,2.106,684,3.723,685,3.723,686,3.723,687,4.472,688,4.472,689,2.478,690,4.472,691,2.478,692,3.723,693,3.723,694,2.478,695,3.723,696,2.478,697,3.723,698,2.478,699,2.478,700,2.478,701,3.366,702,2.478,703,2.478,704,3.366,705,2.478,706,3.723,707,2.478,708,2.478,709,2.478,710,2.478,711,3.723,712,2.478,713,2.478,714,2.478,715,2.478,716,2.478,717,2.478,718,3.723,719,2.478,720,2.478,721,2.478,722,2.478,723,2.478,724,2.478,725,2.478,726,2.478,727,2.478,728,2.478,729,3.723,730,2.478]],["title/classes/SaveRoleDto.html",[61,0.011,701,2.364]],["body/classes/SaveRoleDto.html",[7,0.023,15,0.311,16,0.311,17,0.275,24,0.751,27,0.884,28,0.64,33,0.437,60,0.311,61,0.018,65,0.018,66,0.018,72,0.468,82,2.106,249,1.65,326,2.3,367,1.91,369,1.65,386,1.91,395,3.217,581,2.793,586,3.794,594,4.753,664,3.023,701,3.786,731,4.585,732,3.794,733,4.465,734,4.465]],["title/classes/SaveRoleGroupDto.html",[61,0.011,704,2.364]],["body/classes/SaveRoleGroupDto.html",[7,0.023,15,0.291,16,0.291,17,0.257,24,0.795,27,0.857,28,0.677,33,0.419,60,0.291,61,0.018,65,0.018,66,0.018,72,0.438,82,2.229,249,1.842,273,2.696,326,2.229,367,1.786,369,1.581,383,3.134,386,1.786,395,3.402,581,2.706,664,2.825,704,3.627,731,4.689,735,3.546,736,4.173,737,4.173,738,5.358,739,4.173,740,3.546]],["title/controllers/TestController.html",[67,1.84,741,2.364]],["body/controllers/TestController.html",[7,0.024,15,0.24,16,0.24,17,0.212,20,1.09,24,0.633,26,1.09,27,0.682,28,0.539,29,0.961,31,1.09,33,0.523,37,0.657,52,1.686,60,0.24,61,0.011,65,0.015,66,0.015,67,1.812,70,2.583,72,0.361,80,1.957,82,1.775,85,2.126,87,1.877,106,1.472,109,3.191,111,2.583,117,1.812,120,2.126,124,1.812,126,3.191,139,1.472,141,2.583,150,1.477,273,1.38,326,1.296,445,2.329,465,4.005,475,2.583,486,2.126,639,2.329,741,3.191,742,2.924,743,2.924,744,4.005,745,4.713,746,3.44,747,3.44,748,3.44,749,3.44,750,3.44,751,3.44,752,3.44,753,2.924,754,2.329,755,2.583,756,3.44,757,3.059,758,2.924,759,3.44,760,3.44,761,3.44,762,3.44,763,4.713,764,3.44,765,3.44,766,3.44]],["title/modules/TestModule.html",[0,1.03,10,2.158]],["body/modules/TestModule.html",[0,1.581,2,1.674,3,2.626,6,3.482,7,0.023,10,4.207,12,3.048,13,2.374,14,2.374,15,0.291,16,0.291,17,0.257,19,2.823,33,0.505,37,0.797,41,4.023,42,2.045,52,2.626,53,3.048,60,0.291,61,0.014,65,0.018,66,0.018,127,2.374,741,4.007,757,3.76,758,3.546,767,3.546,768,4.173,769,3.546,770,4.173,771,3.546,772,4.173]],["title/injectables/TestService.html",[209,0.913,757,1.987]],["body/injectables/TestService.html",[7,0.023,15,0.337,16,0.337,17,0.298,20,1.359,24,0.65,31,1.118,33,0.378,37,0.924,60,0.337,61,0.016,65,0.019,66,0.019,72,0.507,150,1.516,209,1.536,210,2.371,249,1.427,744,5.594,757,3.343,773,4.112,774,4.838,775,4.838,776,4.838]],["title/modules/TotpModule.html",[0,1.03,193,2.158]],["body/modules/TotpModule.html",[0,1.749,2,1.68,7,0.024,15,0.292,16,0.292,17,0.258,20,0.968,24,0.562,26,0.968,27,0.606,28,0.479,29,0.853,31,0.968,33,0.488,37,0.8,53,2.382,54,3.559,56,3.559,60,0.292,61,0.014,65,0.018,66,0.018,114,3.372,150,1.312,193,3.663,195,2.835,405,3.055,777,4.188,778,5.37,779,4.188,780,5.37,781,3.864,782,4.188,783,5.928,784,3.635,785,3.559,786,3.559,787,4.188]],["title/interfaces/TotpModuleOptions.html",[469,2.158,781,2.158]],["body/interfaces/TotpModuleOptions.html",[7,0.023,15,0.34,16,0.34,17,0.3,28,0.675,60,0.34,65,0.019,66,0.019,72,0.511,205,5.61,207,5.61,240,3.62,369,1.742,469,3.014,470,3.662,781,3.649,788,4.145]],["title/injectables/TotpService.html",[114,1.987,209,0.913]],["body/injectables/TotpService.html",[7,0.024,15,0.189,16,0.189,17,0.167,20,0.921,24,0.778,26,1.28,27,0.802,28,0.633,29,1.129,31,1.28,33,0.479,37,0.519,60,0.189,61,0.009,65,0.013,66,0.013,72,0.285,80,2.686,106,1.162,114,2.268,137,0.962,138,2.549,139,1.162,144,1.249,150,1.249,209,1.042,210,1.331,240,2.1,249,1.961,312,2.699,405,2.268,424,3.196,425,2.463,440,2.699,546,3.521,565,3.906,577,2.04,781,3.214,784,1.839,785,2.309,786,2.309,789,2.309,790,3.986,791,4.722,792,3.986,793,3.986,794,3.986,795,2.717,796,2.717,797,2.717,798,3.387,799,2.717,800,2.717,801,2.717,802,3.986,803,5.201,804,2.717,805,3.986,806,3.986,807,2.717,808,3.986,809,4.722,810,4.722,811,2.717,812,2.717,813,2.717,814,2.717,815,2.309,816,2.309,817,3.387,818,3.387,819,2.309,820,2.717,821,2.717,822,4.012,823,2.717,824,2.717,825,2.717,826,2.717,827,2.717,828,2.717,829,3.986,830,2.717,831,2.717,832,2.309,833,2.717,834,2.717]],["title/guards/TwoFactorAuthGuard.html",[443,2.364,754,2.364]],["body/guards/TwoFactorAuthGuard.html",[7,0.024,15,0.219,16,0.219,17,0.194,20,1.024,24,0.595,26,1.024,27,0.641,28,0.507,29,0.903,31,0.727,33,0.499,37,0.601,42,1.542,60,0.219,61,0.01,62,1.346,65,0.015,66,0.015,72,0.33,87,1.69,97,2.701,106,1.346,117,1.657,118,2.982,119,2.13,124,2.701,126,2.13,127,3.556,128,1.439,129,2.362,137,1.114,139,1.346,144,1.838,150,1.607,209,1.158,227,2.674,232,2.362,245,2.026,253,2.13,254,2.52,258,2.999,312,2.999,444,2.13,446,2.362,447,4.179,448,2.674,450,3.326,451,3.767,452,2.674,453,2.13,454,3.85,455,2.13,456,2.674,457,2.13,458,2.13,459,3.764,460,2.674,461,2.362,462,2.674,472,2.737,497,2.362,754,2.999,755,3.85,835,3.146,836,3.146,837,3.146,838,3.146,839,2.674]],["title/classes/TwoFactorLoginDto.html",[61,0.011,103,2.158]],["body/classes/TwoFactorLoginDto.html",[7,0.023,15,0.307,16,0.307,17,0.271,24,0.744,26,1.017,27,0.637,28,0.634,29,0.897,33,0.344,60,0.307,61,0.018,65,0.018,66,0.018,72,0.461,82,1.657,103,3.425,137,1.558,206,4.709,249,1.936,295,4.928,367,1.883,369,1.635,386,1.883,576,4.709,577,3.304,840,5.155,841,3.739,842,5.542,843,4.4,844,4.4,845,4.4,846,4.4,847,4.4]],["title/entities/User.html",[87,0.97,578,1.84]],["body/entities/User.html",[7,0.024,15,0.204,16,0.204,17,0.18,24,0.798,27,0.713,28,0.679,29,1.211,33,0.464,59,2.441,60,0.204,61,0.016,65,0.014,66,0.014,72,0.307,73,1.584,82,2.237,87,1.168,145,3.335,146,1.584,150,0.917,154,3.335,245,1.924,249,1.934,260,1.174,267,2.802,268,2.595,331,3.126,359,2.487,366,2.393,369,1.241,384,4.577,386,1.252,387,3.575,395,3.13,401,3.159,472,1.808,578,2.216,579,1.808,582,3.159,587,4.022,626,2.197,663,2.197,740,2.487,848,2.487,849,2.926,850,2.926,851,2.926,852,2.926,853,2.926,854,4.207,855,2.926,856,2.926,857,2.926,858,2.926,859,2.926,860,2.926,861,2.926,862,2.487,863,5.386,864,2.487,865,4.926,866,4.207,867,4.207,868,2.926,869,2.926,870,4.207,871,2.926,872,2.926,873,2.926,874,2.926,875,2.926,876,2.926]],["title/controllers/UserController.html",[67,1.84,877,2.364]],["body/controllers/UserController.html",[7,0.024,15,0.222,16,0.222,17,0.196,20,1.033,24,0.428,26,0.737,27,0.462,28,0.364,29,0.65,31,0.737,33,0.515,37,0.609,52,1.562,60,0.222,61,0.01,65,0.015,66,0.015,67,1.679,70,2.393,72,0.334,73,1.684,81,1.679,82,1.2,87,1.831,107,2.709,109,2.158,111,2.393,120,1.97,124,1.679,126,2.158,128,2.56,133,2.158,134,2.361,139,1.364,141,2.393,144,0.999,146,1.684,150,1.618,232,3.877,254,1.813,265,2.709,305,2.393,445,2.158,473,3.026,486,1.97,753,2.709,839,2.709,877,3.026,878,2.709,879,4.47,880,3.187,881,3.187,882,3.187,883,4.756,884,3.187,885,4.47,886,3.187,887,3.187,888,3.187,889,3.187,890,2.709,891,2.393,892,2.709,893,3.187,894,3.187,895,3.187,896,3.187,897,3.187,898,3.187,899,4.47,900,3.187,901,3.187,902,3.187,903,3.187]],["title/modules/UserModule.html",[0,1.03,11,1.987]],["body/modules/UserModule.html",[0,1.514,2,1.566,3,2.515,6,3.42,7,0.024,11,3.863,12,2.919,13,2.221,14,2.221,15,0.272,16,0.272,17,0.24,19,2.703,33,0.517,37,0.746,52,2.515,53,2.919,60,0.272,61,0.013,65,0.017,66,0.017,87,1.084,134,3.179,192,2.221,195,3.474,197,2.644,198,1.913,203,3.318,771,3.318,877,3.881,891,2.932,892,3.318,904,3.318,905,3.905,906,3.318,907,3.318,908,3.905,909,3.905,910,3.905]],["title/injectables/UserService.html",[134,1.597,209,0.913]],["body/injectables/UserService.html",[7,0.024,15,0.258,16,0.258,17,0.228,20,1.145,24,0.665,26,1.145,27,0.717,28,0.566,29,1.01,31,0.856,33,0.485,37,0.707,57,1.394,60,0.258,61,0.012,65,0.016,66,0.016,72,0.388,73,2.102,81,1.95,87,1.655,133,2.507,134,2.265,137,1.311,138,1.814,139,1.584,144,1.16,146,1.394,150,1.16,169,2.288,198,1.814,209,1.295,210,1.814,222,3.146,223,4.476,225,4.21,236,3.146,240,2.941,242,4.21,245,2.265,260,1.485,261,3.146,263,3.146,264,2.78,283,3.146,284,3.146,288,1.95,329,3.146,405,3.391,890,3.146,891,2.78,911,3.146,912,4.954,913,3.702,914,4.954,915,5.961,916,3.702,917,3.702]],["title/coverage.html",[918,4.047]],["body/coverage.html",[7,0.023,17,0.166,28,0.308,44,1.823,47,1.823,57,1.014,61,0.021,65,0.013,66,0.013,67,2.474,68,1.823,69,2.288,81,1.418,87,0.748,93,1.664,103,1.664,114,1.532,118,1.319,120,1.664,124,1.418,128,1.231,130,1.319,134,1.231,209,1.559,211,2.288,273,1.884,331,1.319,366,1.532,368,2.288,391,2.288,392,2.288,405,1.532,417,2.022,418,2.288,419,2.288,433,2.022,443,3.18,445,1.823,446,2.974,469,2.447,471,2.288,473,1.823,476,2.288,498,2.288,520,2.974,572,2.288,578,2.474,580,2.022,596,2.022,597,2.288,598,2.288,626,2.022,627,2.288,639,1.823,640,2.288,645,2.022,658,1.664,683,2.288,701,1.823,704,1.823,731,2.974,732,2.288,735,2.288,741,1.823,742,2.288,754,1.823,755,2.022,757,1.532,773,2.288,781,1.664,784,1.823,788,2.288,789,2.288,832,6.059,840,2.288,841,2.288,848,2.288,877,1.823,878,2.288,911,2.288,918,2.288,919,2.693,920,2.693,921,2.693,922,5.519,923,2.693,924,2.693,925,2.288,926,6.121,927,6.517,928,3.365,929,2.288,930,6.248,931,3.96,932,2.288,933,2.693,934,2.288,935,3.365,936,2.288,937,4.697,938,2.693,939,2.288,940,3.96,941,2.693]],["title/dependencies.html",[3,2.058,942,2.48]],["body/dependencies.html",[3,2.038,7,0.024,37,0.794,40,3.123,42,2.038,61,0.018,65,0.018,66,0.018,106,1.78,113,2.816,198,2.038,260,1.668,333,3.534,386,1.78,455,2.816,474,3.534,546,2.816,547,4.543,815,3.534,816,3.534,817,3.534,818,3.534,819,3.534,862,3.534,864,3.534,943,5.909,944,4.159,945,5.346,946,4.159,947,4.159,948,5.346,949,4.159,950,4.159,951,4.159,952,4.159,953,4.159,954,4.159,955,4.159,956,4.159,957,4.159,958,4.159,959,4.159,960,4.159,961,4.159,962,4.159,963,4.159,964,4.159,965,4.159,966,4.159,967,4.159]],["title/miscellaneous/enumerations.html",[968,1.66,969,3.569]],["body/miscellaneous/enumerations.html",[7,0.022,65,0.02,66,0.02,72,0.549,326,2.32,425,3.807,580,3.931,590,4.449,591,3.931,592,4.449,593,3.931,968,2.978,969,4.449,970,5.235]],["title/miscellaneous/functions.html",[968,1.66,971,3.569]],["body/miscellaneous/functions.html",[7,0.021,65,0.021,66,0.021,72,0.566,932,4.587,934,5.633,968,3.071,971,4.587,972,5.398]],["title/index.html",[72,0.306,973,2.919,974,2.919]],["body/index.html",[7,0.024,27,0.495,65,0.015,66,0.015,109,3.179,138,1.676,253,2.316,267,2.671,268,2.473,295,2.569,413,2.569,423,2.569,440,2.316,497,2.569,546,2.316,565,4.54,581,1.564,743,2.907,798,2.907,822,3.99,883,2.907,975,3.421,976,3.421,977,3.421,978,3.421,979,3.421,980,3.421,981,3.421,982,3.421,983,3.421,984,3.421,985,3.421,986,5.77,987,3.421,988,5.361,989,4.695,990,4.695,991,3.421,992,3.421,993,3.421,994,3.421,995,3.421,996,3.421,997,3.421,998,2.907,999,3.421,1000,3.421,1001,4.695,1002,3.421,1003,3.421,1004,4.695,1005,4.695,1006,4.695,1007,3.421,1008,4.695,1009,3.421,1010,3.421,1011,3.421,1012,5.77,1013,3.421,1014,2.907,1015,3.421,1016,3.421,1017,3.421,1018,3.421,1019,3.421]],["title/modules.html",[2,1.91]],["body/modules.html",[1,3.224,2,1.91,6,2.509,7,0.019,8,2.709,9,2.943,10,2.943,11,2.709,65,0.019,66,0.019,192,2.709,193,2.943,1020,6.716,1021,6.716,1022,6.716,1023,6.984,1024,6.286,1025,6.286]],["title/overview.html",[1026,4.047]],["body/overview.html",[1,4.629,2,1.408,3,2.341,4,2.983,5,2.983,6,3.602,7,0.023,8,3.091,9,3.89,10,3.981,11,3.729,12,2.718,13,1.997,14,1.997,52,1.72,65,0.016,66,0.016,118,3.156,134,2.946,188,2.983,189,2.983,190,2.983,191,2.983,192,3.091,193,3.357,210,1.72,362,2.983,367,1.502,444,2.376,470,2.635,579,2.169,655,2.983,656,2.983,657,2.983,658,3.981,757,3.091,767,2.983,769,2.983,904,2.983,906,2.983,907,2.983,1014,2.983,1026,2.983,1027,3.51,1028,5.433,1029,3.51]],["title/properties.html",[369,1.239,942,2.48]],["body/properties.html",[7,0.023,65,0.02,66,0.02,369,1.571,581,2.436,1030,5.327,1031,5.327,1032,5.327,1033,5.327,1034,5.327]],["title/miscellaneous/variables.html",[968,1.66,1035,3.569]],["body/miscellaneous/variables.html",[7,0.024,28,0.665,57,1.31,59,1.489,65,0.016,66,0.016,72,0.365,91,3.216,97,2.502,120,2.936,128,1.591,144,1.489,150,1.489,249,1.401,268,1.833,273,1.905,326,2.189,343,4.037,345,2.957,405,2.702,413,2.613,424,4.429,425,4.043,451,3.216,453,3.216,457,3.216,458,2.356,473,3.216,520,2.613,554,2.957,579,2.15,645,3.567,784,3.662,925,2.957,928,2.957,929,2.957,935,2.957,936,4.037,939,2.957,968,1.979,998,2.957,1035,2.957,1036,4.75,1037,3.48,1038,3.48,1039,3.48,1040,4.75,1041,3.48,1042,3.48,1043,3.48,1044,3.48,1045,3.48,1046,3.48,1047,3.48,1048,3.48,1049,3.48,1050,3.48,1051,3.48,1052,3.48,1053,4.75,1054,3.48,1055,3.48,1056,3.48,1057,3.48,1058,4.75,1059,3.48,1060,3.48,1061,3.48]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":832,"title":{},"body":{"injectables/TotpService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1031,"title":{},"body":{"properties.html":{}}}],["0.0.14",{"_index":965,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":961,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["0.3.7",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":927,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":937,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":930,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":922,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":931,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":940,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":938,"title":{},"body":{"coverage.html":{}}}],["0123456789abcdefghijklmnopqrstuvwxtzabcdefghiklmnopqrstuvwxyz",{"_index":830,"title":{},"body":{"injectables/TotpService.html":{}}}],["035579",{"_index":1016,"title":{},"body":{"index.html":{}}}],["1",{"_index":1002,"title":{},"body":{"index.html":{}}}],["1.4.6",{"_index":952,"title":{},"body":{"dependencies.html":{}}}],["1.5.1",{"_index":958,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":957,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":359,"title":{},"body":{"modules/ConfigurationModule.html":{},"entities/User.html":{}}}],["1000",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["10m",{"_index":360,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["17.6.0",{"_index":953,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1014,"title":{},"body":{"index.html":{},"overview.html":{}}}],["2.2.0",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":956,"title":{},"body":{"dependencies.html":{}}}],["2fa",{"_index":565,"title":{},"body":{"classes/LoggerService.html":{},"injectables/TotpService.html":{},"index.html":{}}}],["2fa&algorithm=sha1&digits=6&period=30",{"_index":1011,"title":{},"body":{"index.html":{}}}],["3",{"_index":1028,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":963,"title":{},"body":{"dependencies.html":{}}}],["3.8.1",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":805,"title":{},"body":{"injectables/TotpService.html":{}}}],["423",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["5.1.0",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"classes/TwoFactorLoginDto.html":{}}}],["60",{"_index":358,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["7",{"_index":362,"title":{},"body":{"modules/ConfigurationModule.html":{},"overview.html":{}}}],["7.2.0",{"_index":964,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":363,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["8",{"_index":1027,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":954,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1029,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":461,"title":{},"body":{"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["_auth",{"_index":505,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["_auth}`.replace",{"_index":519,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["_body",{"_index":513,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["_headers",{"_index":507,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["_query",{"_index":510,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["_url",{"_index":516,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["a3vkmvorwzbcs7dayvkxp_nrfxxgbaqetlnjld9zuznc8grei4xgwvviv2utc4f2l3hy6q_krlvxtcfgfsdagqmxokxtg46zfmtkhuxksmtvpchvjfp8ziutwj8cefx2wnkrdalrdr3ukbfnijdtenpobefsgwioweefq1dup",{"_index":1018,"title":{},"body":{"index.html":{}}}],["accesspayload",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtMiddleware.html":{}}}],["accesspayload['id",{"_index":490,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["accesstoken",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{}}}],["action",{"_index":619,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["add",{"_index":611,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["admin",{"_index":680,"title":{},"body":{"modules/RoleModule.html":{}}}],["already",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["api",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["app",{"_index":988,"title":{},"body":{"index.html":{}}}],["app_interceptor",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app_pipe",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["appdatasource",{"_index":936,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["applications",{"_index":983,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arr",{"_index":699,"title":{},"body":{"injectables/RoleService.html":{}}}],["async",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"injectables/JwtMiddleware.html":{},"classes/Role1670203037069.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{}}}],["auth.guard.ts",{"_index":446,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":449,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["auth.guard.ts:14",{"_index":452,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["auth.guard.ts:19",{"_index":835,"title":{},"body":{"guards/TwoFactorAuthGuard.html":{}}}],["auth.interface",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtMiddleware.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["auth.service",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["auth/auth.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/dto/create",{"_index":890,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth/middleware/jwt.middleware",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":68,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":888,"title":{},"body":{"controllers/UserController.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TestModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1034,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":459,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["authorization.split",{"_index":462,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["authservice",{"_index":118,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"coverage.html":{},"overview.html":{}}}],["authuser",{"_index":885,"title":{},"body":{"controllers/UserController.html":{}}}],["auto_increment",{"_index":435,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["available",{"_index":1025,"title":{},"body":{"modules.html":{}}}],["await",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"injectables/JwtMiddleware.html":{},"classes/Role1670203037069.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["base",{"_index":671,"title":{},"body":{"modules/RoleModule.html":{}}}],["base32",{"_index":816,"title":{},"body":{"injectables/TotpService.html":{},"dependencies.html":{}}}],["bcrypt",{"_index":862,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["bearer",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["beforeinsert",{"_index":387,"title":{},"body":{"classes/CoreEntity.html":{},"entities/User.html":{}}}],["beforeinsert()@beforeupdate",{"_index":380,"title":{},"body":{"classes/CoreEntity.html":{}}}],["beforeupdate",{"_index":388,"title":{},"body":{"classes/CoreEntity.html":{}}}],["body",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":934,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1023,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1020,"title":{},"body":{"modules.html":{}}}],["build",{"_index":989,"title":{},"body":{"index.html":{}}}],["building",{"_index":978,"title":{},"body":{"index.html":{}}}],["bytes",{"_index":827,"title":{},"body":{"injectables/TotpService.html":{}}}],["bytes.length",{"_index":834,"title":{},"body":{"injectables/TotpService.html":{}}}],["canactivate",{"_index":447,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["canactivate(context",{"_index":450,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["cascade",{"_index":622,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["catch",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{}}}],["checkpassword(inputpassword",{"_index":875,"title":{},"body":{"entities/User.html":{}}}],["class",{"_index":61,"title":{"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"classes/Role1670203037069.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"classes/TwoFactorLoginDto.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":367,"title":{},"body":{"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"classes/Role1670203037069.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"classes/TwoFactorLoginDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_rolemodule",{"_index":655,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_rolemodule_exports",{"_index":656,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_rolemodule_providers",{"_index":657,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_testmodule",{"_index":767,"title":{},"body":{"modules/TestModule.html":{},"overview.html":{}}}],["cluster_testmodule_imports",{"_index":768,"title":{},"body":{"modules/TestModule.html":{}}}],["cluster_testmodule_providers",{"_index":769,"title":{},"body":{"modules/TestModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":904,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":907,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":905,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":906,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":822,"title":{},"body":{"injectables/TotpService.html":{},"index.html":{}}}],["column",{"_index":587,"title":{},"body":{"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"entities/User.html":{}}}],["combine",{"_index":549,"title":{},"body":{"classes/LoggerService.html":{}}}],["combine(nestwinstonmoduleutilities.format.nestlike('nest",{"_index":564,"title":{},"body":{"classes/LoggerService.html":{}}}],["compare",{"_index":861,"title":{},"body":{"entities/User.html":{}}}],["compare(inputpassword",{"_index":876,"title":{},"body":{"entities/User.html":{}}}],["completed",{"_index":682,"title":{},"body":{"modules/RoleModule.html":{}}}],["compose",{"_index":992,"title":{},"body":{"index.html":{}}}],["config/config.module",{"_index":404,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config_options",{"_index":784,"title":{},"body":{"modules/TotpModule.html":{},"injectables/TotpService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":334,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configmodule.forroot",{"_index":335,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["configservice",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["configurationmodule",{"_index":8,"title":{"modules/ConfigurationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["configure",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["conflictexception('account",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["connect",{"_index":415,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["connecting",{"_index":412,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["console.log",{"_index":411,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/LoggerService.html":{}}}],["console.log('unauthorized",{"_index":466,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["console.log(`generated2facode",{"_index":825,"title":{},"body":{"injectables/TotpService.html":{}}}],["console.log(err",{"_index":494,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["console.log(user",{"_index":465,"title":{},"body":{"guards/JwtAuthGuard.html":{},"controllers/TestController.html":{}}}],["const",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":614,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["constructor",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"guards/RoleGuard.html":{},"injectables/RoleService.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(config_options",{"_index":821,"title":{},"body":{"injectables/TotpService.html":{}}}],["constructor(@injectrepository(user",{"_index":917,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":448,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["constructor(email",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["constructor(jwtservice",{"_index":478,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["constructor(options",{"_index":795,"title":{},"body":{"injectables/TotpService.html":{}}}],["constructor(private",{"_index":486,"title":{},"body":{"injectables/JwtMiddleware.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{}}}],["constructor(readonly",{"_index":456,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["constructor(reflector",{"_index":641,"title":{},"body":{"guards/RoleGuard.html":{}}}],["constructor(rolerepository",{"_index":689,"title":{},"body":{"injectables/RoleService.html":{}}}],["constructor(service",{"_index":528,"title":{},"body":{"classes/LoggerService.html":{}}}],["constructor(twofactorcode",{"_index":842,"title":{},"body":{"classes/TwoFactorLoginDto.html":{}}}],["constructor(userrepository",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["consumer",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(jwtmiddleware).forroutes",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(loggermiddleware).forroutes",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":453,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["context.gethandler",{"_index":649,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":457,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":67,"title":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('/auth",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('/test",{"_index":759,"title":{},"body":{"controllers/TestController.html":{}}}],["controller('/user",{"_index":893,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["coreentity",{"_index":366,"title":{"classes/CoreEntity.html":{}},"body":{"classes/CoreEntity.html":{},"entities/Role.html":{},"entities/RoleGroup.html":{},"entities/User.html":{},"coverage.html":{}}}],["coverage",{"_index":918,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["createdat",{"_index":370,"title":{},"body":{"classes/CoreEntity.html":{},"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["createdatecolumn",{"_index":374,"title":{},"body":{"classes/CoreEntity.html":{}}}],["createparamdecorator((data",{"_index":1058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createrole(@body",{"_index":898,"title":{},"body":{"controllers/UserController.html":{}}}],["createroledto",{"_index":899,"title":{},"body":{"controllers/UserController.html":{}}}],["createuser",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuser(@res",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuser(res",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["createuserdto",{"_index":81,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["crypto",{"_index":813,"title":{},"body":{"injectables/TotpService.html":{}}}],["current_timestamp(6",{"_index":437,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["d",{"_index":993,"title":{},"body":{"index.html":{}}}],["data",{"_index":669,"title":{},"body":{"modules/RoleModule.html":{}}}],["database",{"_index":413,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["databasemodule",{"_index":192,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["datasource",{"_index":403,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["datasource(opt).initialize",{"_index":414,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["datasource(options",{"_index":1042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasourcefactory",{"_index":409,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["datasourceoptions",{"_index":1043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":373,"title":{},"body":{"classes/CoreEntity.html":{}}}],["datetime(6",{"_index":436,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["db",{"_index":995,"title":{},"body":{"index.html":{}}}],["db_host",{"_index":347,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["db_name",{"_index":353,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["db_password",{"_index":352,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["db_port",{"_index":349,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["db_user",{"_index":351,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["debug",{"_index":523,"title":{},"body":{"classes/LoggerService.html":{}}}],["debug(message",{"_index":532,"title":{},"body":{"classes/LoggerService.html":{}}}],["decorator/role.decorator",{"_index":646,"title":{},"body":{"guards/RoleGuard.html":{}}}],["decorator/user.decorator",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"entities/RoleGroup.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":424,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{},"injectables/TotpService.html":{},"miscellaneous/variables.html":{}}}],["defaultmeta",{"_index":560,"title":{},"body":{"classes/LoggerService.html":{}}}],["defined",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"classes/Role1670203037069.html":{}}}],["deletedatecolumn",{"_index":389,"title":{},"body":{"classes/CoreEntity.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":581,"title":{},"body":{"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"index.html":{},"properties.html":{}}}],["destroyedat",{"_index":371,"title":{},"body":{"classes/CoreEntity.html":{},"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["digits",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/TotpModuleOptions.html":{}}}],["dist/**/*.entity.{js,ts",{"_index":1055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dist/migrations/*{.ts,.js",{"_index":1056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["docker",{"_index":991,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["down",{"_index":422,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["down(queryrunner",{"_index":427,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["drop",{"_index":625,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["dto/2fa",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/save",{"_index":706,"title":{},"body":{"injectables/RoleService.html":{}}}],["dynamicmodule",{"_index":783,"title":{},"body":{"modules/TotpModule.html":{}}}],["eager",{"_index":633,"title":{},"body":{"entities/RoleGroup.html":{}}}],["efficient",{"_index":979,"title":{},"body":{"index.html":{}}}],["email",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"index.html":{}}}],["encode",{"_index":814,"title":{},"body":{"injectables/TotpService.html":{}}}],["engine=innodb",{"_index":441,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["entities",{"_index":579,"title":{},"body":{"entities/Role.html":{},"entities/RoleGroup.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":578,"title":{"entities/Role.html":{},"entities/RoleGroup.html":{},"entities/User.html":{}},"body":{"entities/Role.html":{},"entities/RoleGroup.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity/role",{"_index":662,"title":{},"body":{"modules/RoleModule.html":{},"injectables/RoleService.html":{}}}],["entity/role.entity",{"_index":664,"title":{},"body":{"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{}}}],["enum",{"_index":589,"title":{},"body":{"entities/Role.html":{}}}],["enumerations",{"_index":969,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env.${process.env.node_env",{"_index":338,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["envfilepath",{"_index":337,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["err",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{}}}],["error",{"_index":524,"title":{},"body":{"classes/LoggerService.html":{}}}],["error(message",{"_index":535,"title":{},"body":{"classes/LoggerService.html":{}}}],["errors",{"_index":548,"title":{},"body":{"classes/LoggerService.html":{}}}],["example",{"_index":984,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":863,"title":{},"body":{"entities/User.html":{}}}],["exclude()@isoptional()@isnotempty()@isstring()@column({nullable",{"_index":854,"title":{},"body":{"entities/User.html":{}}}],["exclude({toplainonly",{"_index":851,"title":{},"body":{"entities/User.html":{}}}],["executioncontext",{"_index":451,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["existrole",{"_index":711,"title":{},"body":{"injectables/RoleService.html":{}}}],["existrolegroup",{"_index":718,"title":{},"body":{"injectables/RoleService.html":{}}}],["exists",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/TotpModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"guards/RoleGuard.html":{},"controllers/TestController.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"dependencies.html":{}}}],["extends",{"_index":472,"title":{},"body":{"interfaces/JwtAuthPayload.html":{},"entities/Role.html":{},"entities/RoleGroup.html":{},"guards/TwoFactorAuthGuard.html":{},"entities/User.html":{}}}],["eyjhbgcioijsuzi1niisinr5cci6ikpxvcj9.eyjpzci6nywizw1hawwioij0zxn0qgv4yw1wbguuy29tiiwibmftzsi6inrlc3qilcjpyxqioje2njg3ntuymjl9.a3kfquifib5bqesgqn1irbotud7lytkn5vkbjkf0r25q47x_mk25iziioym7gpjkainnca8to_fgeo_c",{"_index":1017,"title":{},"body":{"index.html":{}}}],["failed",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"guards/RoleGuard.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["file",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["filter",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["findbyid",{"_index":912,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(userid",{"_index":914,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneoptions",{"_index":915,"title":{},"body":{"injectables/UserService.html":{}}}],["findrolebyname",{"_index":684,"title":{},"body":{"injectables/RoleService.html":{}}}],["findrolebyname(name",{"_index":693,"title":{},"body":{"injectables/RoleService.html":{}}}],["findrolegroupbyname",{"_index":685,"title":{},"body":{"injectables/RoleService.html":{}}}],["findrolegroupbyname(name",{"_index":695,"title":{},"body":{"injectables/RoleService.html":{}}}],["findrolesbyid",{"_index":686,"title":{},"body":{"injectables/RoleService.html":{}}}],["findrolesbyid(arr",{"_index":697,"title":{},"body":{"injectables/RoleService.html":{}}}],["finduser",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["finduser(filter",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["fk_171d67ef8913e9dc113831b9fad",{"_index":621,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["fk_34e11176bdc021644092329708f",{"_index":615,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["fk_90430aa399740cac39bff3ca7b8",{"_index":623,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["foreign",{"_index":616,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["format",{"_index":557,"title":{},"body":{"classes/LoggerService.html":{}}}],["forroot",{"_index":779,"title":{},"body":{"modules/TotpModule.html":{}}}],["forroot(options",{"_index":780,"title":{},"body":{"modules/TotpModule.html":{}}}],["found",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["framework",{"_index":977,"title":{},"body":{"index.html":{}}}],["function",{"_index":933,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":971,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateaccesstoken",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(payload",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatepayload",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatepayload(user",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateqrcode",{"_index":790,"title":{},"body":{"injectables/TotpService.html":{}}}],["generateqrcode(stream",{"_index":797,"title":{},"body":{"injectables/TotpService.html":{}}}],["generaterefreshtoken",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["generaterefreshtoken(payload",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatesecret",{"_index":791,"title":{},"body":{"injectables/TotpService.html":{}}}],["generatesecretascii",{"_index":792,"title":{},"body":{"injectables/TotpService.html":{}}}],["generatesecretascii(length",{"_index":802,"title":{},"body":{"injectables/TotpService.html":{}}}],["generatetwofactorcode",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["generatetwofactorcode(@res",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["generatetwofactorcode(res",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["generatetwofactorsecretforuser",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatetwofactorsecretforuser(userid",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["generator",{"_index":819,"title":{},"body":{"injectables/TotpService.html":{},"dependencies.html":{}}}],["get('/2fa",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/2fa')@useguards(jwtauthguard)@header('content",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/me",{"_index":894,"title":{},"body":{"controllers/UserController.html":{}}}],["get('/me')@useguards(jwtauthguard",{"_index":881,"title":{},"body":{"controllers/UserController.html":{}}}],["getcode",{"_index":793,"title":{},"body":{"injectables/TotpService.html":{}}}],["getcode(key",{"_index":806,"title":{},"body":{"injectables/TotpService.html":{}}}],["getcurrentuser",{"_index":879,"title":{},"body":{"controllers/UserController.html":{}}}],["getcurrentuser(@authuser",{"_index":902,"title":{},"body":{"controllers/UserController.html":{}}}],["getcurrentuser(@getuser",{"_index":895,"title":{},"body":{"controllers/UserController.html":{}}}],["getcurrentuser(user",{"_index":880,"title":{},"body":{"controllers/UserController.html":{}}}],["gethello",{"_index":744,"title":{},"body":{"controllers/TestController.html":{},"injectables/TestService.html":{}}}],["gethello(@getuser",{"_index":762,"title":{},"body":{"controllers/TestController.html":{}}}],["gethello(user",{"_index":746,"title":{},"body":{"controllers/TestController.html":{}}}],["getting",{"_index":973,"title":{"index.html":{}},"body":{}}],["geturl",{"_index":794,"title":{},"body":{"injectables/TotpService.html":{}}}],["geturl(key",{"_index":808,"title":{},"body":{"injectables/TotpService.html":{}}}],["getuser",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["graph",{"_index":1024,"title":{},"body":{"modules.html":{}}}],["group.dto",{"_index":707,"title":{},"body":{"injectables/RoleService.html":{}}}],["group.dto.ts",{"_index":735,"title":{},"body":{"classes/SaveRoleGroupDto.html":{},"coverage.html":{}}}],["group.dto.ts:12",{"_index":739,"title":{},"body":{"classes/SaveRoleGroupDto.html":{}}}],["group.dto.ts:6",{"_index":737,"title":{},"body":{"classes/SaveRoleGroupDto.html":{}}}],["group.dto.ts:9",{"_index":736,"title":{},"body":{"classes/SaveRoleGroupDto.html":{}}}],["group.entity",{"_index":663,"title":{},"body":{"modules/RoleModule.html":{},"injectables/RoleService.html":{},"entities/User.html":{}}}],["group.entity.ts",{"_index":627,"title":{},"body":{"entities/RoleGroup.html":{},"coverage.html":{}}}],["group.entity.ts:10",{"_index":630,"title":{},"body":{"entities/RoleGroup.html":{}}}],["group.entity.ts:14",{"_index":628,"title":{},"body":{"entities/RoleGroup.html":{}}}],["group.entity.ts:18",{"_index":635,"title":{},"body":{"entities/RoleGroup.html":{}}}],["groups",{"_index":675,"title":{},"body":{"modules/RoleModule.html":{}}}],["guard",{"_index":443,"title":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{}},"body":{"coverage.html":{}}}],["guard/jwt",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards",{"_index":444,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"overview.html":{}}}],["hash",{"_index":860,"title":{},"body":{"entities/User.html":{}}}],["hash(this.password",{"_index":874,"title":{},"body":{"entities/User.html":{}}}],["hashpassword",{"_index":873,"title":{},"body":{"entities/User.html":{}}}],["header",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["header('content",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["hello",{"_index":775,"title":{},"body":{"injectables/TestService.html":{}}}],["hi",{"_index":815,"title":{},"body":{"injectables/TotpService.html":{},"dependencies.html":{}}}],["host",{"_index":1045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:3000/user/login",{"_index":1015,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/user/register",{"_index":1003,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('resource",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["httponly",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/JWT1669729219582.html":{},"interfaces/JwtAuthPayload.html":{},"classes/Role1670203037069.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["idx_171d67ef8913e9dc113831b9fa",{"_index":608,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["idx_34e11176bdc021644092329708",{"_index":612,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["idx_90430aa399740cac39bff3ca7b",{"_index":609,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["idx_ae4578dcaed5adff96595e6166",{"_index":602,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["idx_bae3cfbe67c8cad245cd04a319",{"_index":604,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["image/png",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["implements",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/Role1670203037069.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["import",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":72,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"injectables/TestService.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":820,"title":{},"body":{"injectables/TotpService.html":{}}}],["injectable",{"_index":209,"title":{"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RoleService.html":{},"injectables/TestService.html":{},"injectables/TotpService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"guards/RoleGuard.html":{},"injectables/RoleService.html":{},"injectables/TestService.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RoleService.html":{},"injectables/TestService.html":{},"injectables/TotpService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["injectrepository(role",{"_index":709,"title":{},"body":{"injectables/RoleService.html":{}}}],["injectrepository(rolegroup",{"_index":710,"title":{},"body":{"injectables/RoleService.html":{}}}],["injectrepository(user",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["installation",{"_index":985,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":987,"title":{},"body":{"index.html":{}}}],["int",{"_index":434,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["interface",{"_index":469,"title":{"interfaces/JwtAuthPayload.html":{},"interfaces/TotpModuleOptions.html":{}},"body":{"interfaces/JwtAuthPayload.html":{},"interfaces/TotpModuleOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":470,"title":{},"body":{"interfaces/JwtAuthPayload.html":{},"interfaces/TotpModuleOptions.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":484,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["internalservererrorexception('error",{"_index":495,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["isaccessvalid",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["isdate",{"_index":382,"title":{},"body":{"classes/CoreEntity.html":{}}}],["isenum",{"_index":586,"title":{},"body":{"entities/Role.html":{},"classes/SaveRoleDto.html":{}}}],["isenum(roles",{"_index":594,"title":{},"body":{"entities/Role.html":{},"classes/SaveRoleDto.html":{}}}],["isenum(roles)@column({unique",{"_index":584,"title":{},"body":{"entities/Role.html":{}}}],["isglobal",{"_index":336,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["isinstance",{"_index":740,"title":{},"body":{"classes/SaveRoleGroupDto.html":{},"entities/User.html":{}}}],["isinstance(role",{"_index":738,"title":{},"body":{"classes/SaveRoleGroupDto.html":{}}}],["isinstance(rolegroup",{"_index":871,"title":{},"body":{"entities/User.html":{}}}],["isnotempty",{"_index":865,"title":{},"body":{"entities/User.html":{}}}],["isnumber",{"_index":383,"title":{},"body":{"classes/CoreEntity.html":{},"entities/RoleGroup.html":{},"classes/SaveRoleGroupDto.html":{}}}],["isnumberstring",{"_index":576,"title":{},"body":{"classes/LoginDto.html":{},"classes/TwoFactorLoginDto.html":{}}}],["isnumberstring()@length(6",{"_index":844,"title":{},"body":{"classes/TwoFactorLoginDto.html":{}}}],["isodatetime",{"_index":559,"title":{},"body":{"classes/LoggerService.html":{}}}],["isoptional",{"_index":384,"title":{},"body":{"classes/CoreEntity.html":{},"entities/User.html":{}}}],["isoptional()@deletedatecolumn",{"_index":376,"title":{},"body":{"classes/CoreEntity.html":{}}}],["isoptional()@isinstance(rolegroup)@onetoone(undefined",{"_index":856,"title":{},"body":{"entities/User.html":{}}}],["isrefreshvalid",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["isstring",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"entities/RoleGroup.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"entities/User.html":{}}}],["isstring()@column",{"_index":582,"title":{},"body":{"entities/Role.html":{},"entities/RoleGroup.html":{},"entities/User.html":{}}}],["isstring()@column({unique",{"_index":629,"title":{},"body":{"entities/RoleGroup.html":{}}}],["issue",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["issuer",{"_index":810,"title":{},"body":{"injectables/TotpService.html":{}}}],["isvalidtoken",{"_index":463,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["item.name",{"_index":652,"title":{},"body":{"guards/RoleGuard.html":{}}}],["joi",{"_index":333,"title":{},"body":{"modules/ConfigurationModule.html":{},"dependencies.html":{}}}],["joi.number().default(1000",{"_index":357,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.number().default(30",{"_index":365,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.number().default(3000",{"_index":346,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.number().required",{"_index":350,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.object",{"_index":340,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.string().required",{"_index":348,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joi.string().valid('development",{"_index":342,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["joincolumn",{"_index":866,"title":{},"body":{"entities/User.html":{}}}],["jointable",{"_index":636,"title":{},"body":{"entities/RoleGroup.html":{}}}],["json",{"_index":550,"title":{},"body":{"classes/LoggerService.html":{}}}],["json.stringify(req.body",{"_index":514,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["json.stringify(req.headers",{"_index":508,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["json.stringify(req.query",{"_index":511,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["json.stringify(tempurl",{"_index":517,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["jsonwebtoken",{"_index":474,"title":{},"body":{"interfaces/JwtAuthPayload.html":{},"dependencies.html":{}}}],["jwt",{"_index":497,"title":{},"body":{"injectables/JwtMiddleware.html":{},"guards/TwoFactorAuthGuard.html":{},"index.html":{}}}],["jwt.ts",{"_index":419,"title":{},"body":{"classes/JWT1669729219582.html":{},"coverage.html":{}}}],["jwt.ts:10",{"_index":429,"title":{},"body":{"classes/JWT1669729219582.html":{}}}],["jwt.ts:4",{"_index":426,"title":{},"body":{"classes/JWT1669729219582.html":{}}}],["jwt.ts:6",{"_index":431,"title":{},"body":{"classes/JWT1669729219582.html":{}}}],["jwt1669729219582",{"_index":417,"title":{"classes/JWT1669729219582.html":{}},"body":{"classes/JWT1669729219582.html":{},"coverage.html":{}}}],["jwt_access_expires",{"_index":356,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["jwt_access_secret",{"_index":354,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["jwt_refresh_expires",{"_index":361,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["jwt_refresh_secret",{"_index":355,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["jwtauthguard",{"_index":124,"title":{"guards/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"controllers/TestController.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["jwtauthpayload",{"_index":128,"title":{"interfaces/JwtAuthPayload.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtmiddleware",{"_index":47,"title":{"injectables/JwtMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/JwtMiddleware.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TestModule.html":{}}}],["jwtpayload",{"_index":473,"title":{},"body":{"interfaces/JwtAuthPayload.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtservice",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"modules/TestModule.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["key",{"_index":440,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{},"injectables/TotpService.html":{},"index.html":{}}}],["l",{"_index":833,"title":{},"body":{"injectables/TotpService.html":{}}}],["label",{"_index":809,"title":{},"body":{"injectables/TotpService.html":{}}}],["length",{"_index":577,"title":{},"body":{"classes/LoginDto.html":{},"injectables/TotpService.html":{},"classes/TwoFactorLoginDto.html":{}}}],["length(6",{"_index":847,"title":{},"body":{"classes/TwoFactorLoginDto.html":{}}}],["level",{"_index":563,"title":{},"body":{"classes/LoggerService.html":{}}}],["license",{"_index":1032,"title":{},"body":{"properties.html":{}}}],["locked",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["log",{"_index":525,"title":{},"body":{"classes/LoggerService.html":{}}}],["log(message",{"_index":538,"title":{},"body":{"classes/LoggerService.html":{}}}],["logger",{"_index":522,"title":{},"body":{"classes/LoggerService.html":{},"modules/RoleModule.html":{}}}],["logger('rolemodule",{"_index":667,"title":{},"body":{"modules/RoleModule.html":{}}}],["logger.service",{"_index":500,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["loggermiddleware",{"_index":44,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["loggerservice",{"_index":130,"title":{"classes/LoggerService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"modules/RoleModule.html":{},"coverage.html":{}}}],["loggerservice(req.url.slice(1).split('/')[0",{"_index":501,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["loggerservice.log(`${_url",{"_index":518,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["logging",{"_index":1054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@res",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(res",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["login.dto",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.dto.ts",{"_index":841,"title":{},"body":{"classes/TwoFactorLoginDto.html":{},"coverage.html":{}}}],["login.dto.ts:10",{"_index":845,"title":{},"body":{"classes/TwoFactorLoginDto.html":{}}}],["login.dto.ts:3",{"_index":843,"title":{},"body":{"classes/TwoFactorLoginDto.html":{}}}],["logindto",{"_index":93,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["ls",{"_index":521,"title":{},"body":{"classes/LoggerService.html":{}}}],["manage_user",{"_index":592,"title":{},"body":{"entities/Role.html":{},"miscellaneous/enumerations.html":{}}}],["manageuser",{"_index":593,"title":{},"body":{"entities/Role.html":{},"modules/RoleModule.html":{},"miscellaneous/enumerations.html":{}}}],["manytomany",{"_index":637,"title":{},"body":{"entities/RoleGroup.html":{}}}],["manytomany(undefined",{"_index":631,"title":{},"body":{"entities/RoleGroup.html":{}}}],["matching",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":534,"title":{},"body":{"classes/LoggerService.html":{}}}],["metadata",{"_index":960,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/Role1670203037069.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"controllers/TestController.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["middlewareconsumer",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["migration",{"_index":994,"title":{},"body":{"index.html":{}}}],["migrationinterface",{"_index":420,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["migrations",{"_index":998,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migrations/1669729219582",{"_index":418,"title":{},"body":{"classes/JWT1669729219582.html":{},"coverage.html":{}}}],["migrations/1670203037069",{"_index":597,"title":{},"body":{"classes/Role1670203037069.html":{},"coverage.html":{}}}],["migrationsrun",{"_index":1057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":968,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/TotpModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/TotpModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/TotpModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth",{"_index":886,"title":{},"body":{"controllers/UserController.html":{}}}],["modules/auth/auth.guard",{"_index":889,"title":{},"body":{"controllers/UserController.html":{}}}],["modules/config/config.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/database/core.entity",{"_index":588,"title":{},"body":{"entities/Role.html":{},"entities/RoleGroup.html":{}}}],["modules/database/database.module",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["modules/logging/logger.middleware",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/logging/logger.service",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["modules/totp/totp.module",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["modules/totp/totp.service",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["ms",{"_index":552,"title":{},"body":{"classes/LoggerService.html":{}}}],["mysql",{"_index":1044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":955,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"index.html":{}}}],["nest",{"_index":546,"title":{},"body":{"classes/LoggerService.html":{},"injectables/TotpService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"modules/DatabaseModule.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"modules/TestModule.html":{},"guards/TwoFactorAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":485,"title":{},"body":{"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["nestmodule",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["nestwinstonmoduleutilities",{"_index":545,"title":{},"body":{"classes/LoggerService.html":{}}}],["new",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"modules/RoleModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newaccesstoken",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["newrefreshtoken",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["newrole",{"_index":713,"title":{},"body":{"injectables/RoleService.html":{}}}],["newrole.description",{"_index":716,"title":{},"body":{"injectables/RoleService.html":{}}}],["newrole.name",{"_index":715,"title":{},"body":{"injectables/RoleService.html":{}}}],["newrolegroup",{"_index":722,"title":{},"body":{"injectables/RoleService.html":{}}}],["newrolegroup.description",{"_index":725,"title":{},"body":{"injectables/RoleService.html":{}}}],["newrolegroup.name",{"_index":724,"title":{},"body":{"injectables/RoleService.html":{}}}],["newrolegroup.roles",{"_index":726,"title":{},"body":{"injectables/RoleService.html":{}}}],["next",{"_index":481,"title":{},"body":{"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["nextfunction",{"_index":482,"title":{},"body":{"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["nngharshozgva5cqjzbhmucujbgwwzrukr3do6bvkbthqt2koj3q",{"_index":1007,"title":{},"body":{"index.html":{}}}],["node.js",{"_index":976,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":341,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["notfoundexception",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('otp",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception('user",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["null",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JWT1669729219582.html":{},"interfaces/JwtAuthPayload.html":{},"classes/Role1670203037069.html":{}}}],["nullable",{"_index":870,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/RoleService.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"injectables/UserService.html":{}}}],["number(process.env.db_port",{"_index":1047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number(process.env.two_factor_period",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["object",{"_index":489,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["observable",{"_index":454,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["onetoone",{"_index":867,"title":{},"body":{"entities/User.html":{}}}],["onmoduleinit",{"_index":660,"title":{},"body":{"modules/RoleModule.html":{}}}],["opt",{"_index":410,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["optional",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"classes/Role1670203037069.html":{},"guards/RoleGuard.html":{},"injectables/RoleService.html":{},"controllers/TestController.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["options",{"_index":405,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["otp",{"_index":1012,"title":{},"body":{"index.html":{}}}],["otpauth://totp/${label}:?secret=${key}&issuer=${issuer}&algorithm=sha1&digits=${this.options.digits}&period=${this.options.period",{"_index":826,"title":{},"body":{"injectables/TotpService.html":{}}}],["otpauth://totp/nest",{"_index":1009,"title":{},"body":{"index.html":{}}}],["otpurl",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["out",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["output",{"_index":831,"title":{},"body":{"injectables/TotpService.html":{}}}],["override",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["overview",{"_index":1026,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":942,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"classes/Role1670203037069.html":{},"guards/RoleGuard.html":{},"injectables/RoleService.html":{},"controllers/TestController.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["params",{"_index":566,"title":{},"body":{"classes/LoggerService.html":{}}}],["parser",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["parsing",{"_index":496,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["partial",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["password",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["payload",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{}}}],["payload.exp",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.iat",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.id",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["payload.twofactorauthenticated",{"_index":839,"title":{},"body":{"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{}}}],["period",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/TotpModuleOptions.html":{}}}],["port",{"_index":345,"title":{},"body":{"modules/ConfigurationModule.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"index.html":{}}}],["post('/')@role(roles.test_role)@useguards(roleguard)@useguards(jwtauthguard",{"_index":747,"title":{},"body":{"controllers/TestController.html":{}}}],["post('/2fa",{"_index":764,"title":{},"body":{"controllers/TestController.html":{}}}],["post('/2fa')@useguards(twofactorauthguard",{"_index":750,"title":{},"body":{"controllers/TestController.html":{}}}],["post('/login",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login/2fa",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login/2fa')@useguards(jwtauthguard",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/re",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/role/create",{"_index":897,"title":{},"body":{"controllers/UserController.html":{}}}],["prefix",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{}}}],["prettyprint",{"_index":553,"title":{},"body":{"classes/LoggerService.html":{}}}],["primary",{"_index":439,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["primarygeneratedcolumn",{"_index":378,"title":{},"body":{"classes/CoreEntity.html":{}}}],["private",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"classes/LoggerService.html":{},"injectables/RoleService.html":{},"injectables/TotpService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["process.env.db_host",{"_index":1046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":1051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_password",{"_index":1050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":1049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":1053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":343,"title":{},"body":{"modules/ConfigurationModule.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":975,"title":{},"body":{"index.html":{}}}],["promise",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"classes/Role1670203037069.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["promise.all(arr.map((id",{"_index":728,"title":{},"body":{"injectables/RoleService.html":{}}}],["properties",{"_index":369,"title":{"properties.html":{}},"body":{"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"interfaces/JwtAuthPayload.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"interfaces/TotpModuleOptions.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/TotpModule.html":{}}}],["provided",{"_index":467,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["providers",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/TotpModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":421,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["pw",{"_index":1005,"title":{},"body":{"index.html":{}}}],["qr",{"_index":1013,"title":{},"body":{"index.html":{}}}],["qrcode",{"_index":817,"title":{},"body":{"injectables/TotpService.html":{},"dependencies.html":{}}}],["queryrunner",{"_index":428,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["queryrunner.query(`alter",{"_index":610,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["queryrunner.query(`create",{"_index":432,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["queryrunner.query(`drop",{"_index":442,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["randombytes",{"_index":812,"title":{},"body":{"injectables/TotpService.html":{}}}],["randombytes(length",{"_index":828,"title":{},"body":{"injectables/TotpService.html":{}}}],["readonly",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"controllers/TestController.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["references",{"_index":617,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["reflect",{"_index":959,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":642,"title":{},"body":{"guards/RoleGuard.html":{}}}],["refreshpayload",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JWT1669729219582.html":{},"entities/User.html":{}}}],["register",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(undefined",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["registered",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["reissuetoken",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{}}}],["reissuetoken(@req",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["reissuetoken(req",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["rel_34e11176bdc021644092329708",{"_index":613,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["relatedroles",{"_index":720,"title":{},"body":{"injectables/RoleService.html":{}}}],["relations",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{}}}],["repository",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["req",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["req.baseurl.split('?')[0",{"_index":504,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.body",{"_index":515,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.cookies['refreshtoken']?.replace('bearer",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.headers",{"_index":509,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.headers.authorization",{"_index":506,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.headers.authorization?.replace('bearer",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.headers.authorization?.split",{"_index":487,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["req.method",{"_index":503,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req.query",{"_index":512,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["req['payload",{"_index":493,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["req['user",{"_index":492,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["request",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["request.headers",{"_index":460,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["request.payload",{"_index":1060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user",{"_index":458,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["requiredroles",{"_index":647,"title":{},"body":{"guards/RoleGuard.html":{}}}],["requiredroles.every((role",{"_index":653,"title":{},"body":{"guards/RoleGuard.html":{}}}],["res",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"controllers/TestController.html":{}}}],["res.cookie('refreshtoken",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.send",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"controllers/TestController.html":{},"injectables/TotpService.html":{}}}],["result",{"_index":883,"title":{},"body":{"controllers/UserController.html":{},"index.html":{}}}],["result.twofactorauthenticated",{"_index":896,"title":{},"body":{"controllers/UserController.html":{}}}],["results",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"injectables/RoleService.html":{},"controllers/TestController.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/Role1670203037069.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"controllers/TestController.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":962,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":273,"title":{"entities/Role.html":{}},"body":{"injectables/AuthService.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["role(roles.test_role",{"_index":760,"title":{},"body":{"controllers/TestController.html":{}}}],["role.dto",{"_index":708,"title":{},"body":{"injectables/RoleService.html":{}}}],["role.dto.ts",{"_index":732,"title":{},"body":{"classes/SaveRoleDto.html":{},"coverage.html":{}}}],["role.dto.ts:6",{"_index":734,"title":{},"body":{"classes/SaveRoleDto.html":{}}}],["role.dto.ts:9",{"_index":733,"title":{},"body":{"classes/SaveRoleDto.html":{}}}],["role.entity",{"_index":638,"title":{},"body":{"entities/RoleGroup.html":{}}}],["role.id",{"_index":632,"title":{},"body":{"entities/RoleGroup.html":{}}}],["role.name",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["role.service",{"_index":665,"title":{},"body":{"modules/RoleModule.html":{}}}],["role.ts",{"_index":598,"title":{},"body":{"classes/Role1670203037069.html":{},"coverage.html":{}}}],["role.ts:18",{"_index":600,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["role.ts:4",{"_index":599,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["role.ts:6",{"_index":601,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["role/role.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["role1670203037069",{"_index":596,"title":{"classes/Role1670203037069.html":{}},"body":{"classes/Role1670203037069.html":{},"coverage.html":{}}}],["role\\`(\\`id",{"_index":624,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["role_group",{"_index":603,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["role_group\\`(\\`id",{"_index":618,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["role_group_join",{"_index":605,"title":{},"body":{"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{}}}],["role_key",{"_index":645,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolegroup",{"_index":331,"title":{"entities/RoleGroup.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{},"entities/RoleGroup.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"entities/User.html":{},"coverage.html":{}}}],["rolegroup.id",{"_index":872,"title":{},"body":{"entities/User.html":{}}}],["rolegroup.id)@joincolumn",{"_index":857,"title":{},"body":{"entities/User.html":{}}}],["rolegroupid",{"_index":606,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["rolegrouprepository",{"_index":690,"title":{},"body":{"injectables/RoleService.html":{}}}],["roleguard",{"_index":639,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"controllers/TestController.html":{},"coverage.html":{}}}],["roleid",{"_index":607,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["rolemodule",{"_index":9,"title":{"modules/RoleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoleModule.html":{},"modules.html":{},"overview.html":{}}}],["rolename",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["rolerepository",{"_index":692,"title":{},"body":{"injectables/RoleService.html":{}}}],["roles",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtAuthPayload.html":{},"entities/Role.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roles.manage_user",{"_index":673,"title":{},"body":{"modules/RoleModule.html":{}}}],["roles.manageuser",{"_index":678,"title":{},"body":{"modules/RoleModule.html":{}}}],["roles.map((rolename",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["roles.test_role",{"_index":674,"title":{},"body":{"modules/RoleModule.html":{}}}],["roles.testrole",{"_index":679,"title":{},"body":{"modules/RoleModule.html":{}}}],["roleservice",{"_index":658,"title":{"injectables/RoleService.html":{}},"body":{"modules/RoleModule.html":{},"injectables/RoleService.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":999,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":455,"title":{},"body":{"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"dependencies.html":{}}}],["saverole",{"_index":687,"title":{},"body":{"injectables/RoleService.html":{}}}],["saverole(undefined",{"_index":700,"title":{},"body":{"injectables/RoleService.html":{}}}],["saveroledto",{"_index":701,"title":{"classes/SaveRoleDto.html":{}},"body":{"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"coverage.html":{}}}],["saverolegroup",{"_index":688,"title":{},"body":{"injectables/RoleService.html":{}}}],["saverolegroup(undefined",{"_index":703,"title":{},"body":{"injectables/RoleService.html":{}}}],["saverolegroupdto",{"_index":704,"title":{"classes/SaveRoleGroupDto.html":{}},"body":{"injectables/RoleService.html":{},"classes/SaveRoleGroupDto.html":{},"coverage.html":{}}}],["scalable",{"_index":980,"title":{},"body":{"index.html":{}}}],["schema",{"_index":996,"title":{},"body":{"index.html":{}}}],["secret",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["secret=nngharshozgva5cqjzbhmucujbgwwzrukr3do6bvkbthqt2koj3q&issuer=nest",{"_index":1010,"title":{},"body":{"index.html":{}}}],["server",{"_index":981,"title":{},"body":{"index.html":{}}}],["servertwofactorcode",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["service",{"_index":530,"title":{},"body":{"classes/LoggerService.html":{}}}],["set",{"_index":829,"title":{},"body":{"injectables/TotpService.html":{}}}],["setmetadata(role_key",{"_index":1061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setrefreshcookie",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["setrefreshcookie(res",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["side",{"_index":982,"title":{},"body":{"index.html":{}}}],["source",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["src/.../jwt.decorator.ts",{"_index":1039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.service.ts",{"_index":1041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":972,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../role.decorator.ts",{"_index":1040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.entity.ts",{"_index":970,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../totp.constants.ts",{"_index":1037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../typeorm.datasource.ts",{"_index":1036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":18,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:37",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:43",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:50",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:58",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:67",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:82",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.interface",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["src/auth/auth.interface.ts",{"_index":471,"title":{},"body":{"interfaces/JwtAuthPayload.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":771,"title":{},"body":{"modules/TestModule.html":{},"modules/UserModule.html":{}}}],["src/auth/auth.module.ts",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:105",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:113",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:123",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:133",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:145",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:151",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:160",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:34",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:56",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:72",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:84",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorator/jwt.decorator",{"_index":884,"title":{},"body":{"controllers/UserController.html":{}}}],["src/auth/decorator/jwt.decorator.ts",{"_index":925,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/role.decorator",{"_index":752,"title":{},"body":{"controllers/TestController.html":{}}}],["src/auth/decorator/role.decorator.ts",{"_index":928,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorator/user.decorator",{"_index":753,"title":{},"body":{"controllers/TestController.html":{},"controllers/UserController.html":{}}}],["src/auth/decorator/user.decorator.ts",{"_index":929,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/2fa",{"_index":840,"title":{},"body":{"classes/TwoFactorLoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/create",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":572,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:10",{"_index":574,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:13",{"_index":575,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:3",{"_index":573,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/guard/2fa",{"_index":755,"title":{},"body":{"controllers/TestController.html":{},"guards/TwoFactorAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/jwt",{"_index":445,"title":{},"body":{"guards/JwtAuthGuard.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["src/auth/guard/role.guard",{"_index":756,"title":{},"body":{"controllers/TestController.html":{}}}],["src/auth/guard/role.guard.ts",{"_index":640,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/auth/guard/role.guard.ts:12",{"_index":643,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/guard/role.guard.ts:15",{"_index":644,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/middleware/jwt.middleware.ts",{"_index":476,"title":{},"body":{"injectables/JwtMiddleware.html":{},"coverage.html":{}}}],["src/auth/middleware/jwt.middleware.ts:11",{"_index":479,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["src/auth/middleware/jwt.middleware.ts:14",{"_index":483,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["src/main.ts",{"_index":932,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/config/config.module.ts",{"_index":332,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["src/modules/database/core.entity",{"_index":868,"title":{},"body":{"entities/User.html":{}}}],["src/modules/database/core.entity.ts",{"_index":368,"title":{},"body":{"classes/CoreEntity.html":{},"coverage.html":{}}}],["src/modules/database/core.entity.ts:13",{"_index":379,"title":{},"body":{"classes/CoreEntity.html":{}}}],["src/modules/database/core.entity.ts:17",{"_index":375,"title":{},"body":{"classes/CoreEntity.html":{}}}],["src/modules/database/core.entity.ts:22",{"_index":377,"title":{},"body":{"classes/CoreEntity.html":{}}}],["src/modules/database/core.entity.ts:26",{"_index":381,"title":{},"body":{"classes/CoreEntity.html":{}}}],["src/modules/database/database.module",{"_index":909,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/database/database.module.ts",{"_index":402,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/modules/database/typeorm.datasource.ts",{"_index":935,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/logging/logger.middleware.ts",{"_index":498,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/modules/logging/logger.middleware.ts:9",{"_index":499,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/modules/logging/logger.service.ts",{"_index":520,"title":{},"body":{"classes/LoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/logging/logger.service.ts:34",{"_index":539,"title":{},"body":{"classes/LoggerService.html":{}}}],["src/modules/logging/logger.service.ts:37",{"_index":537,"title":{},"body":{"classes/LoggerService.html":{}}}],["src/modules/logging/logger.service.ts:40",{"_index":543,"title":{},"body":{"classes/LoggerService.html":{}}}],["src/modules/logging/logger.service.ts:43",{"_index":533,"title":{},"body":{"classes/LoggerService.html":{}}}],["src/modules/logging/logger.service.ts:46",{"_index":541,"title":{},"body":{"classes/LoggerService.html":{}}}],["src/modules/logging/logger.service.ts:9",{"_index":529,"title":{},"body":{"classes/LoggerService.html":{}}}],["src/modules/totp/totp.constants.ts",{"_index":939,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/totp/totp.interface.ts",{"_index":788,"title":{},"body":{"interfaces/TotpModuleOptions.html":{},"coverage.html":{}}}],["src/modules/totp/totp.module.ts",{"_index":777,"title":{},"body":{"modules/TotpModule.html":{}}}],["src/modules/totp/totp.module.ts:9",{"_index":782,"title":{},"body":{"modules/TotpModule.html":{}}}],["src/modules/totp/totp.service.ts",{"_index":789,"title":{},"body":{"injectables/TotpService.html":{},"coverage.html":{}}}],["src/modules/totp/totp.service.ts:14",{"_index":796,"title":{},"body":{"injectables/TotpService.html":{}}}],["src/modules/totp/totp.service.ts:17",{"_index":807,"title":{},"body":{"injectables/TotpService.html":{}}}],["src/modules/totp/totp.service.ts:25",{"_index":811,"title":{},"body":{"injectables/TotpService.html":{}}}],["src/modules/totp/totp.service.ts:29",{"_index":804,"title":{},"body":{"injectables/TotpService.html":{}}}],["src/modules/totp/totp.service.ts:43",{"_index":801,"title":{},"body":{"injectables/TotpService.html":{}}}],["src/modules/totp/totp.service.ts:48",{"_index":799,"title":{},"body":{"injectables/TotpService.html":{}}}],["src/role/dto/save",{"_index":731,"title":{},"body":{"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"coverage.html":{}}}],["src/role/entity/role",{"_index":626,"title":{},"body":{"entities/RoleGroup.html":{},"entities/User.html":{},"coverage.html":{}}}],["src/role/entity/role.entity",{"_index":475,"title":{},"body":{"interfaces/JwtAuthPayload.html":{},"guards/RoleGuard.html":{},"controllers/TestController.html":{}}}],["src/role/entity/role.entity.ts",{"_index":580,"title":{},"body":{"entities/Role.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/role/entity/role.entity.ts:14",{"_index":585,"title":{},"body":{"entities/Role.html":{}}}],["src/role/entity/role.entity.ts:18",{"_index":583,"title":{},"body":{"entities/Role.html":{}}}],["src/role/role.module.ts",{"_index":659,"title":{},"body":{"modules/RoleModule.html":{}}}],["src/role/role.module.ts:18",{"_index":661,"title":{},"body":{"modules/RoleModule.html":{}}}],["src/role/role.service.ts",{"_index":683,"title":{},"body":{"injectables/RoleService.html":{},"coverage.html":{}}}],["src/role/role.service.ts:10",{"_index":691,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:16",{"_index":702,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:26",{"_index":705,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:38",{"_index":698,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:42",{"_index":694,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:46",{"_index":696,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/test/test.controller.ts",{"_index":742,"title":{},"body":{"controllers/TestController.html":{},"coverage.html":{}}}],["src/test/test.controller.ts:22",{"_index":748,"title":{},"body":{"controllers/TestController.html":{}}}],["src/test/test.controller.ts:29",{"_index":751,"title":{},"body":{"controllers/TestController.html":{}}}],["src/test/test.module.ts",{"_index":770,"title":{},"body":{"modules/TestModule.html":{}}}],["src/test/test.service.ts",{"_index":773,"title":{},"body":{"injectables/TestService.html":{},"coverage.html":{}}}],["src/test/test.service.ts:5",{"_index":774,"title":{},"body":{"injectables/TestService.html":{}}}],["src/user/user.controller.ts",{"_index":878,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:20",{"_index":882,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.entity",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"controllers/TestController.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["src/user/user.entity.ts",{"_index":848,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:13",{"_index":849,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:17",{"_index":850,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:22",{"_index":853,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:29",{"_index":859,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:36",{"_index":855,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:42",{"_index":858,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.module",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/user/user.module.ts",{"_index":908,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtMiddleware.html":{}}}],["src/user/user.service.ts",{"_index":911,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:10",{"_index":913,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:13",{"_index":916,"title":{},"body":{"injectables/UserService.html":{}}}],["stack",{"_index":558,"title":{},"body":{"classes/LoggerService.html":{}}}],["start",{"_index":990,"title":{},"body":{"index.html":{}}}],["start:produsage",{"_index":1000,"title":{},"body":{"index.html":{}}}],["started",{"_index":974,"title":{"index.html":{}},"body":{}}],["statements",{"_index":921,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":778,"title":{},"body":{"modules/TotpModule.html":{}}}],["step",{"_index":1001,"title":{},"body":{"index.html":{}}}],["stream",{"_index":800,"title":{},"body":{"injectables/TotpService.html":{}}}],["string",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"injectables/TestService.html":{},"injectables/TotpService.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["success",{"_index":416,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["super(authservice",{"_index":836,"title":{},"body":{"guards/TwoFactorAuthGuard.html":{}}}],["super.canactivate(context",{"_index":837,"title":{},"body":{"guards/TwoFactorAuthGuard.html":{}}}],["superadmin",{"_index":677,"title":{},"body":{"modules/RoleModule.html":{}}}],["support",{"_index":1021,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1022,"title":{},"body":{"modules.html":{}}}],["symbols",{"_index":803,"title":{},"body":{"injectables/TotpService.html":{}}}],["synchronize",{"_index":1052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":433,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":941,"title":{},"body":{"coverage.html":{}}}],["tempurl",{"_index":502,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["test",{"_index":743,"title":{},"body":{"controllers/TestController.html":{},"index.html":{}}}],["test').required",{"_index":344,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["test.controller",{"_index":772,"title":{},"body":{"modules/TestModule.html":{}}}],["test.service",{"_index":758,"title":{},"body":{"controllers/TestController.html":{},"modules/TestModule.html":{}}}],["test/test.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["test@example.com",{"_index":1004,"title":{},"body":{"index.html":{}}}],["test_role",{"_index":590,"title":{},"body":{"entities/Role.html":{},"miscellaneous/enumerations.html":{}}}],["testcontroller",{"_index":741,"title":{"controllers/TestController.html":{}},"body":{"controllers/TestController.html":{},"modules/TestModule.html":{},"coverage.html":{}}}],["testmodule",{"_index":10,"title":{"modules/TestModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TestModule.html":{},"modules.html":{},"overview.html":{}}}],["testrole",{"_index":591,"title":{},"body":{"entities/Role.html":{},"modules/RoleModule.html":{},"miscellaneous/enumerations.html":{}}}],["testservice",{"_index":757,"title":{"injectables/TestService.html":{}},"body":{"controllers/TestController.html":{},"modules/TestModule.html":{},"injectables/TestService.html":{},"coverage.html":{},"overview.html":{}}}],["this.authservice.generateaccesstoken(accesspayload",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.generaterefreshtoken(refreshpayload",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.generatetwofactorsecretforuser(user.id",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(logindto",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(createuserdto",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.setrefreshcookie(res",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyaccesstoken(accesstoken",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyaccesstoken(token",{"_index":464,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["this.authservice.verifyrefreshtoken(user.id",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifytwofactorcode",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('jwt_access_expires",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_access_secret",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_expires",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_secret",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.email",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["this.findrolebyname(name",{"_index":712,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.findrolegroupbyname(name",{"_index":719,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.findrolesbyid(roles",{"_index":721,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.finduser",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generateaccesstoken(payload",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generatepayload(user",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.generaterefreshtoken(payload",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.decode(accesstoken",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtMiddleware.html":{}}}],["this.jwtservice.decode(refreshtoken",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.decode(token",{"_index":838,"title":{},"body":{"guards/TwoFactorAuthGuard.html":{}}}],["this.jwtservice.sign(payload",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger",{"_index":555,"title":{},"body":{"classes/LoggerService.html":{},"modules/RoleModule.html":{}}}],["this.logger.debug(message",{"_index":567,"title":{},"body":{"classes/LoggerService.html":{}}}],["this.logger.error(message",{"_index":569,"title":{},"body":{"classes/LoggerService.html":{}}}],["this.logger.info(message",{"_index":568,"title":{},"body":{"classes/LoggerService.html":{}}}],["this.logger.log('creating",{"_index":670,"title":{},"body":{"modules/RoleModule.html":{}}}],["this.logger.log('initialize",{"_index":681,"title":{},"body":{"modules/RoleModule.html":{}}}],["this.logger.log('initializing",{"_index":668,"title":{},"body":{"modules/RoleModule.html":{}}}],["this.logger.verbose(message",{"_index":571,"title":{},"body":{"classes/LoggerService.html":{}}}],["this.logger.warning(message",{"_index":570,"title":{},"body":{"classes/LoggerService.html":{}}}],["this.loggerservice.debug('re",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.loggerservice.log(`generatedcode",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.name",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["this.options",{"_index":824,"title":{},"body":{"injectables/TotpService.html":{}}}],["this.password",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/User.html":{}}}],["this.reflector.get(role_key",{"_index":648,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.rolegrouprepository.create",{"_index":723,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolegrouprepository.findone",{"_index":730,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolegrouprepository.save(newrolegroup",{"_index":727,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolerepository.create",{"_index":714,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolerepository.findone",{"_index":729,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolerepository.save(newrole",{"_index":717,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.roleservice.saverole",{"_index":672,"title":{},"body":{"modules/RoleModule.html":{}}}],["this.roleservice.saverolegroup",{"_index":676,"title":{},"body":{"modules/RoleModule.html":{}}}],["this.testservice.gethello",{"_index":763,"title":{},"body":{"controllers/TestController.html":{}}}],["this.totpservice.generateqrcode(res",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.totpservice.generatesecret",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.totpservice.getcode(user.twofactorsecret",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.totpservice.geturl(twofactorsecret",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.twofactorcode",{"_index":846,"title":{},"body":{"classes/TwoFactorLoginDto.html":{}}}],["this.userrepository.create",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.findone",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.save(user",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.update",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrolerepository.find",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.createrole(createroledto",{"_index":900,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findbyid(accesspayload.id",{"_index":491,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["this.userservice.findbyid(authuser.id",{"_index":903,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"injectables/UserService.html":{}}}],["timestamp",{"_index":551,"title":{},"body":{"classes/LoggerService.html":{},"modules/RoleModule.html":{}}}],["todo",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["token",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"guards/TwoFactorAuthGuard.html":{},"index.html":{}}}],["toplainonly",{"_index":869,"title":{},"body":{"entities/User.html":{}}}],["totp",{"_index":818,"title":{},"body":{"injectables/TotpService.html":{},"dependencies.html":{}}}],["totp(key",{"_index":823,"title":{},"body":{"injectables/TotpService.html":{}}}],["totp.constants",{"_index":785,"title":{},"body":{"modules/TotpModule.html":{},"injectables/TotpService.html":{}}}],["totp.interface",{"_index":786,"title":{},"body":{"modules/TotpModule.html":{},"injectables/TotpService.html":{}}}],["totp.service",{"_index":787,"title":{},"body":{"modules/TotpModule.html":{}}}],["totpmodule",{"_index":193,"title":{"modules/TotpModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/TotpModule.html":{},"modules.html":{},"overview.html":{}}}],["totpmodule.forroot",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["totpmoduleoptions",{"_index":781,"title":{"interfaces/TotpModuleOptions.html":{}},"body":{"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"coverage.html":{}}}],["totpservice",{"_index":114,"title":{"injectables/TotpService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/TotpModule.html":{},"injectables/TotpService.html":{},"coverage.html":{}}}],["trace",{"_index":536,"title":{},"body":{"classes/LoggerService.html":{}}}],["transaction",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["transformer",{"_index":864,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["transports",{"_index":561,"title":{},"body":{"classes/LoggerService.html":{}}}],["true",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/ConfigurationModule.html":{},"classes/LoggerService.html":{},"entities/Role.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring()@column",{"_index":852,"title":{},"body":{"entities/User.html":{}}}],["true})@jointable({name",{"_index":634,"title":{},"body":{"entities/RoleGroup.html":{}}}],["try",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtMiddleware.html":{}}}],["two_factor_period",{"_index":364,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["twofactorauthenticated",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtAuthPayload.html":{},"controllers/UserController.html":{}}}],["twofactorauthguard",{"_index":754,"title":{"guards/TwoFactorAuthGuard.html":{}},"body":{"controllers/TestController.html":{},"guards/TwoFactorAuthGuard.html":{},"coverage.html":{}}}],["twofactorcode",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"classes/TwoFactorLoginDto.html":{},"index.html":{}}}],["twofactorkey",{"_index":1006,"title":{},"body":{"index.html":{}}}],["twofactorlogindto",{"_index":103,"title":{"classes/TwoFactorLoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TwoFactorLoginDto.html":{},"coverage.html":{}}}],["twofactorsecret",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JWT1669729219582.html":{},"entities/User.html":{}}}],["twofactortest",{"_index":745,"title":{},"body":{"controllers/TestController.html":{}}}],["twofactortest(@getuser",{"_index":766,"title":{},"body":{"controllers/TestController.html":{}}}],["twofactortest(user",{"_index":749,"title":{},"body":{"controllers/TestController.html":{}}}],["twofactorurl",{"_index":1008,"title":{},"body":{"index.html":{}}}],["type",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"interfaces/JwtAuthPayload.html":{},"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"guards/RoleGuard.html":{},"injectables/RoleService.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"controllers/TestController.html":{},"modules/TotpModule.html":{},"interfaces/TotpModuleOptions.html":{},"injectables/TotpService.html":{},"guards/TwoFactorAuthGuard.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":488,"title":{},"body":{"injectables/JwtMiddleware.html":{}}}],["typeorm",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"classes/CoreEntity.html":{},"modules/DatabaseModule.html":{},"classes/JWT1669729219582.html":{},"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{},"injectables/RoleService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeorm.datasource",{"_index":406,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeorm:run",{"_index":997,"title":{},"body":{"index.html":{}}}],["typeormmodule",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":666,"title":{},"body":{"modules/RoleModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":407,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["unauthorizedexception",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{}}}],["unauthorizedexception('2fa",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('no",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorizedexception('notokenprovided",{"_index":468,"title":{},"body":{"guards/JwtAuthGuard.html":{}}}],["unauthorizedexception('password",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('tokenexpired",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"guards/JwtAuthGuard.html":{}}}],["undefined",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"guards/JwtAuthGuard.html":{},"guards/RoleGuard.html":{},"guards/TwoFactorAuthGuard.html":{}}}],["unique",{"_index":595,"title":{},"body":{"entities/Role.html":{},"classes/Role1670203037069.html":{},"entities/RoleGroup.html":{}}}],["unknown",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RoleService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1033,"title":{},"body":{"properties.html":{}}}],["up",{"_index":423,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{},"index.html":{}}}],["up(queryrunner",{"_index":430,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["update",{"_index":620,"title":{},"body":{"classes/Role1670203037069.html":{}}}],["url",{"_index":798,"title":{},"body":{"injectables/TotpService.html":{},"index.html":{}}}],["use",{"_index":477,"title":{},"body":{"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["use(req",{"_index":480,"title":{},"body":{"injectables/JwtMiddleware.html":{},"injectables/LoggerMiddleware.html":{}}}],["useclass",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":408,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["useguards",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":901,"title":{},"body":{"controllers/UserController.html":{}}}],["useguards(jwtauthguard",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TestController.html":{},"controllers/UserController.html":{}}}],["useguards(roleguard",{"_index":761,"title":{},"body":{"controllers/TestController.html":{}}}],["useguards(twofactorauthguard",{"_index":765,"title":{},"body":{"controllers/TestController.html":{}}}],["user",{"_index":87,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JWT1669729219582.html":{},"guards/JwtAuthGuard.html":{},"injectables/JwtMiddleware.html":{},"classes/Role1670203037069.html":{},"guards/RoleGuard.html":{},"modules/RoleModule.html":{},"controllers/TestController.html":{},"guards/TwoFactorAuthGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.checkpassword(password",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.controller",{"_index":910,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator",{"_index":887,"title":{},"body":{"controllers/UserController.html":{}}}],["user.dto",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:14",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:17",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":891,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.id",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user.rolegroup?.roles.map((item",{"_index":651,"title":{},"body":{"guards/RoleGuard.html":{}}}],["user.rolegroup?.roles.map((role",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":892,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.twofactorsecret",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/user.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["user?.refreshtoken",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["usercontroller",{"_index":877,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userentity",{"_index":1059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":11,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":1048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["userroles",{"_index":650,"title":{},"body":{"guards/RoleGuard.html":{}}}],["userroles.includes(role",{"_index":654,"title":{},"body":{"guards/RoleGuard.html":{}}}],["userservice",{"_index":134,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtMiddleware.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usertwofactorcode",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["usevalue",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/TotpModule.html":{}}}],["utilities",{"_index":544,"title":{},"body":{"classes/LoggerService.html":{}}}],["validate",{"_index":372,"title":{},"body":{"classes/CoreEntity.html":{}}}],["validateorreject",{"_index":385,"title":{},"body":{"classes/CoreEntity.html":{}}}],["validateorreject(this",{"_index":390,"title":{},"body":{"classes/CoreEntity.html":{}}}],["validationpipe",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["validationschema",{"_index":339,"title":{},"body":{"modules/ConfigurationModule.html":{}}}],["validator",{"_index":386,"title":{},"body":{"classes/CoreEntity.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Role.html":{},"entities/RoleGroup.html":{},"classes/SaveRoleDto.html":{},"classes/SaveRoleGroupDto.html":{},"classes/TwoFactorLoginDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["value",{"_index":425,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{},"injectables/TotpService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar(255",{"_index":438,"title":{},"body":{"classes/JWT1669729219582.html":{},"classes/Role1670203037069.html":{}}}],["variable",{"_index":926,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1035,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verbose",{"_index":526,"title":{},"body":{"classes/LoggerService.html":{}}}],["verbose(message",{"_index":540,"title":{},"body":{"classes/LoggerService.html":{}}}],["verifyaccesstoken",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyaccesstoken(token",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyrefreshtoken",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyrefreshtoken(userid",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifytwofactor",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifytwofactor(res",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifytwofactorcode",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifytwofactorcode(userid",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":1030,"title":{},"body":{"properties.html":{}}}],["void",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"classes/LoggerService.html":{}}}],["warn",{"_index":527,"title":{},"body":{"classes/LoggerService.html":{}}}],["warn(message",{"_index":542,"title":{},"body":{"classes/LoggerService.html":{}}}],["whitelist",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["winston",{"_index":547,"title":{},"body":{"classes/LoggerService.html":{},"dependencies.html":{}}}],["winston.createlogger",{"_index":556,"title":{},"body":{"classes/LoggerService.html":{}}}],["winston.format",{"_index":554,"title":{},"body":{"classes/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["winston.logger",{"_index":531,"title":{},"body":{"classes/LoggerService.html":{}}}],["winston.transports.console",{"_index":562,"title":{},"body":{"classes/LoggerService.html":{}}}],["world",{"_index":776,"title":{},"body":{"injectables/TestService.html":{}}}],["wrong",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["yarn",{"_index":986,"title":{},"body":{"index.html":{}}}],["yes",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["zoom",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/RoleModule.html":{},"modules/TestModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["ztmpdhdqu8la7yknbn4xtfreioedmhdwmr6_by6igcrjdckxborgh6ruph4mterdqeecxcozzyfpp3jipvzqqyrhm7w",{"_index":1019,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nTestModule\n\nTestModule\n\nAppModule -->\n\nTestModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConfigurationModule\n                        \n                        \n                            RoleModule\n                        \n                        \n                            TestModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  ClassSerializerInterceptor,\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { APP_INTERCEPTOR, APP_PIPE } from '@nestjs/core';\nimport { JwtModule } from '@nestjs/jwt';\n\nimport { ConfigurationModule } from '~modules/config/config.module';\nimport { LoggerMiddleware } from '~modules/logging/logger.middleware';\n\nimport { AuthModule } from './auth/auth.module';\nimport { JwtMiddleware } from './auth/middleware/jwt.middleware';\nimport { TestModule } from './test/test.module';\nimport { UserModule } from './user/user.module';\nimport { RoleModule } from './role/role.module';\n\n@Module({\n  imports: [ConfigurationModule, UserModule, TestModule, AuthModule, JwtModule, RoleModule],\n  controllers: [],\n  providers: [\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: ClassSerializerInterceptor,\n    },\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe({\n        whitelist: true,\n      }),\n    },\n  ],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware).forRoutes('*');\n    consumer.apply(JwtMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                generateTwoFactorCode\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                reIssueToken\n                            \n                            \n                                    Async\n                                verifyTwoFactor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(res: Response, createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateTwoFactorCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorCode(res: Response, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/2fa')@UseGuards(JwtAuthGuard)@Header('Content-Type', 'image/png')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(res: Response, loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reIssueToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    reIssueToken(req: Request, res: Response, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/re-issue')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyTwoFactor\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyTwoFactor(res: Response, user: User, twoFactorLoginDto: TwoFactorLoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login/2fa')@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    twoFactorLoginDto\n                                    \n                                                TwoFactorLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Request, Response } from 'express';\n\nimport {\n  Body,\n  Controller,\n  Get,\n  Header,\n  Post,\n  Req,\n  Res,\n  UnauthorizedException,\n  UseGuards,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { TotpService } from '~modules/totp/totp.service';\nimport { LoginDto } from '~src/auth/dto/login.dto';\nimport { User } from '~src/user/user.entity';\n\nimport { AuthService } from './auth.service';\nimport { GetUser } from './decorator/user.decorator';\nimport { TwoFactorLoginDto } from './dto/2fa-login.dto';\nimport { JwtAuthGuard } from './guard/jwt-auth.guard';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtAuthPayload } from './auth.interface';\nimport { LoggerService } from '~modules/logging/logger.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UserService } from '~src/user/user.service';\n\n@Controller('/auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly totpService: TotpService,\n    private readonly configService: ConfigService,\n    private readonly jwtService: JwtService,\n    private readonly loggerService: LoggerService,\n  ) {}\n\n  @Get('/2fa')\n  @UseGuards(JwtAuthGuard)\n  @Header('Content-Type', 'image/png')\n  async generateTwoFactorCode(@Res() res: Response, @GetUser() user: User) {\n    const twoFactorSecret = await this.authService.generateTwoFactorSecretForUser(user.id);\n    const otpURL = this.totpService.getURL(twoFactorSecret);\n    return this.totpService.generateQrCode(res, otpURL);\n  }\n\n  @Post('/register')\n  async createUser(@Res() res: Response, @Body() createUserDto: CreateUserDto) {\n    const { accessToken, refreshToken } = await this.authService.register(createUserDto);\n\n    this.authService.setRefreshCookie(res, refreshToken);\n    res.send({ accessToken });\n  }\n\n  @Post('/login')\n  async login(@Res() res: Response, @Body() loginDto: LoginDto) {\n    const { accessToken, refreshToken } = await this.authService.login(loginDto);\n    this.authService.setRefreshCookie(res, refreshToken);\n\n    res.send({ accessToken }); // TODO: API 응답 형식 통일\n  }\n\n  @Post('/login/2fa')\n  @UseGuards(JwtAuthGuard)\n  async verifyTwoFactor(\n    @Res() res: Response,\n    @GetUser() user: User,\n    @Body() twoFactorLoginDto: TwoFactorLoginDto,\n  ) {\n    const { accessToken, refreshToken } = await this.authService.verifyTwoFactorCode(\n      user.id,\n      twoFactorLoginDto,\n    );\n\n    this.authService.setRefreshCookie(res, refreshToken);\n    res.send({ accessToken }); // TODO: API 응답 형식 통일\n  }\n\n  @Post('/re-issue')\n  async reIssueToken(@Req() req: Request, @Res() res: Response, @GetUser() user: User) {\n    const accessToken = req.headers.authorization?.replace('Bearer ', '') || null;\n    const refreshToken = req.cookies['refreshToken']?.replace('Bearer ', '') || null;\n    if (!accessToken || !refreshToken) throw new UnauthorizedException('No Param');\n\n    const isAccessValid = this.authService.verifyAccessToken(accessToken);\n    const isRefreshValid = await this.authService.verifyRefreshToken(user.id, refreshToken);\n    if (!isAccessValid && !isRefreshValid) throw new UnauthorizedException('TokenExpired');\n\n    const accessPayload = this.jwtService.decode(refreshToken) as JwtAuthPayload;\n    const newAccessToken = this.authService.generateAccessToken(accessPayload);\n\n    if (isAccessValid && !isRefreshValid && refreshToken === user?.refreshToken) {\n      this.loggerService.debug('Re-Create refreshToken');\n      const refreshPayload = this.jwtService.decode(accessToken) as JwtAuthPayload;\n      const newRefreshToken = await this.authService.generateRefreshToken(refreshPayload);\n\n      this.authService.setRefreshCookie(res, newRefreshToken);\n      res.send({ accessToken });\n      return;\n    }\n\n    res.send({ accessToken: newAccessToken });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\n\n\nTotpModule\n\nTotpModule\n\nAuthModule -->\n\nTotpModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            TotpModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { DatabaseModule } from '~modules/database/database.module';\nimport { LoggerService } from '~modules/logging/logger.service';\nimport { TotpModule } from '~modules/totp/totp.module';\nimport { User } from '~src/user/user.entity';\nimport { UserModule } from '~src/user/user.module';\nimport { UserService } from '~src/user/user.service';\n\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\n\n@Module({\n  imports: [\n    DatabaseModule,\n    TypeOrmModule.forFeature([User]),\n    TotpModule.ForRoot({ digits: 6, period: Number(process.env.TWO_FACTOR_PERIOD) }),\n    JwtModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LoggerService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                findUser\n                            \n                            \n                                generateAccessToken\n                            \n                            \n                                generatePayload\n                            \n                            \n                                    Async\n                                generateRefreshToken\n                            \n                            \n                                    Async\n                                generateTwoFactorSecretForUser\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                setRefreshCookie\n                            \n                            \n                                verifyAccessToken\n                            \n                            \n                                    Async\n                                verifyRefreshToken\n                            \n                            \n                                    Async\n                                verifyTwoFactorCode\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, jwtService: JwtService, totpService: TotpService, configService: ConfigService, loggerService: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        totpService\n                                                  \n                                                        \n                                                                        TotpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loggerService\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUser(filter: Partial>)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                Partial>\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \ngenerateAccessToken(payload: JwtAuthPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generatePayload\n                        \n                    \n                \n            \n            \n                \ngeneratePayload(user: User, override?: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    override\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         JwtAuthPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateRefreshToken(payload: JwtAuthPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateTwoFactorSecretForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorSecretForUser(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(undefined: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRefreshCookie\n                        \n                    \n                \n            \n            \n                \nsetRefreshCookie(res: Response, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyAccessToken\n                        \n                    \n                \n            \n            \n                \nverifyAccessToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyRefreshToken(userId: number, token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        verifyTwoFactorCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyTwoFactorCode(userId: number, undefined: TwoFactorLoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Repository } from 'typeorm';\n\nimport {\n  ConflictException,\n  HttpException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\n\nimport { TotpService } from '~modules/totp/totp.service';\nimport { JwtAuthPayload } from '~src/auth/auth.interface';\nimport { LoginDto } from '~src/auth/dto/login.dto';\nimport { User } from '~src/user/user.entity';\n\nimport { TwoFactorLoginDto } from './dto/2fa-login.dto';\nimport { LoggerService } from '~modules/logging/logger.service';\nimport { Response } from 'express';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository,\n    private readonly jwtService: JwtService,\n    private readonly totpService: TotpService,\n    private readonly configService: ConfigService,\n    private readonly loggerService: LoggerService,\n  ) {}\n\n  async register({\n    email,\n    password,\n    name,\n  }: CreateUserDto): Promise {\n    const exists = await this.findUser({ email });\n    if (exists) throw new ConflictException('Account Already Exists');\n\n    // const role = await this.userRoleRepository.find({\n    //   where: roles.map((roleName) => ({ name: roleName })),\n    // });\n    // TODO: transaction 추가\n    const user = this.userRepository.create({ email, password, name });\n    await this.userRepository.save(user);\n\n    const payload = this.generatePayload(user);\n\n    const accessToken = this.generateAccessToken(payload);\n    const refreshToken = await this.generateRefreshToken(payload);\n    return { accessToken, refreshToken };\n  }\n\n  async login({\n    email,\n    password,\n  }: LoginDto): Promise {\n    const user = await this.findUser({ email });\n    if (!user) throw new NotFoundException('User Not Found');\n    if (!(await user.checkPassword(password))) throw new UnauthorizedException('Password is Wrong');\n\n    const payload = this.generatePayload(user);\n\n    const accessToken = this.generateAccessToken(payload);\n    const refreshToken = await this.generateRefreshToken(payload);\n\n    return { accessToken, refreshToken };\n  }\n\n  async generateTwoFactorSecretForUser(userId: number) {\n    const user = await this.findUser({ id: userId });\n    if (!user) throw new NotFoundException('User Not Found');\n\n    if (user.twoFactorSecret) throw new HttpException('Resource Locked', 423);\n\n    const twoFactorSecret = this.totpService.generateSecret();\n    await this.userRepository.update({ id: user.id }, { twoFactorSecret });\n\n    return twoFactorSecret;\n  }\n\n  async verifyTwoFactorCode(\n    userId: number,\n    { twoFactorCode: userTwoFactorCode }: TwoFactorLoginDto,\n  ) {\n    const user = await this.findUser({ id: userId });\n    if (!user) throw new NotFoundException('User Not Found');\n    if (!user.twoFactorSecret) throw new NotFoundException('OTP is not registered');\n\n    const serverTwoFactorCode = this.totpService.getCode(user.twoFactorSecret);\n    this.loggerService.log(`GeneratedCode ${serverTwoFactorCode}`);\n    if (serverTwoFactorCode !== userTwoFactorCode)\n      throw new UnauthorizedException('2FA authentication failed');\n\n    const payload = this.generatePayload(user, { twoFactorAuthenticated: true });\n\n    const accessToken = this.generateAccessToken(payload);\n    const refreshToken = await this.generateRefreshToken(payload);\n\n    return { accessToken, refreshToken };\n  }\n\n  verifyAccessToken(token: string) {\n    try {\n      this.jwtService.verify(token, { secret: this.configService.get('JWT_ACCESS_SECRET') });\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n  async verifyRefreshToken(userId: number, token: string) {\n    try {\n      this.jwtService.verify(token, { secret: this.configService.get('JWT_REFRESH_SECRET') });\n      const user = await this.findUser({ id: userId });\n      return user?.refreshToken === token;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  generateAccessToken(payload: JwtAuthPayload) {\n    delete payload.exp;\n    delete payload.iat;\n\n    return this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_ACCESS_SECRET'),\n      expiresIn: this.configService.get('JWT_ACCESS_EXPIRES') / 1000,\n    });\n  }\n\n  async generateRefreshToken(payload: JwtAuthPayload) {\n    delete payload.exp;\n    delete payload.iat;\n\n    const refreshToken = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_SECRET'),\n      expiresIn: this.configService.get('JWT_REFRESH_EXPIRES') / 1000,\n    });\n    await this.userRepository.update({ id: payload.id }, { refreshToken });\n    return refreshToken;\n  }\n\n  setRefreshCookie(res: Response, refreshToken: string) {\n    res.cookie('refreshToken', `Bearer ${refreshToken}`, {\n      httpOnly: true,\n    });\n  }\n\n  generatePayload(user: User, override?: Partial): JwtAuthPayload {\n    return {\n      id: user.id,\n      twoFactorAuthenticated: false,\n      roles: user.roleGroup?.roles.map((role) => role.name) || null,\n      ...override,\n    };\n  }\n\n  private async findUser(filter: Partial>) {\n    return this.userRepository.findOne({ where: { ...filter }, relations: ['roleGroup'] });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigurationModule.html":{"url":"modules/ConfigurationModule.html","title":"module - ConfigurationModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigurationModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/config/config.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import * as Joi from 'joi';\n\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: `.env.${process.env.NODE_ENV}`,\n      validationSchema: Joi.object({\n        NODE_ENV: Joi.string().valid('development', 'production', 'test').required(),\n        PORT: Joi.number().default(3000),\n        DB_HOST: Joi.string().required(),\n        DB_PORT: Joi.number().required(),\n        DB_USER: Joi.string().required(),\n        DB_PASSWORD: Joi.string().required(),\n        DB_NAME: Joi.string().required(),\n        JWT_ACCESS_SECRET: Joi.string().required(),\n        JWT_REFRESH_SECRET: Joi.string().required(),\n        JWT_ACCESS_EXPIRES: Joi.number().default(1000 * 60 * 10), // 10m\n        JWT_REFRESH_EXPIRES: Joi.number().default(1000 * 60 * 60 * 7), // 7d\n        TWO_FACTOR_PERIOD: Joi.number().default(30),\n      }),\n    }),\n  ],\n})\nexport class ConfigurationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CoreEntity.html":{"url":"classes/CoreEntity.html","title":"class - CoreEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CoreEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/database/core.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                    Optional\n                                destroyedAt\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/database/core.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        destroyedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/database/core.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/database/core.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeInsert()@BeforeUpdate()\n                \n            \n\n            \n                \n                    Defined in src/modules/database/core.entity.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsNumber, IsOptional, validateOrReject } from 'class-validator';\nimport {\n  BeforeInsert,\n  BeforeUpdate,\n  CreateDateColumn,\n  DeleteDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\nexport class CoreEntity {\n  // @IsNumber()\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  // @IsDate()\n  @CreateDateColumn()\n  createdAt: Date;\n\n  // @IsDate()\n  @IsOptional()\n  @DeleteDateColumn()\n  destroyedAt?: Date;\n\n  @BeforeInsert()\n  @BeforeUpdate()\n  async validate(): Promise {\n    await validateOrReject(this);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(email: string, name: string, password: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/create-user.dto.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        password\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from 'class-validator';\n\nexport class CreateUserDto {\n  constructor(email: string, name: string, password: string) {\n    this.email = email;\n    this.name = name;\n    this.password = password;\n  }\n\n  @IsString()\n  email: string;\n\n  @IsString()\n  name: string;\n\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { DataSource } from 'typeorm';\n\nimport { Global, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { ConfigurationModule } from '../config/config.module';\n\nimport { options } from './typeorm.datasource';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigurationModule],\n      useFactory: () => options,\n      dataSourceFactory: async (opt) => {\n        console.log('♺ Connecting to DataBase');\n        const dataSource = await new DataSource(opt).initialize();\n        console.log('✔ DataBase connect Success ');\n        return dataSource;\n      },\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JWT1669729219582.html":{"url":"classes/JWT1669729219582.html","title":"class - JWT1669729219582","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JWT1669729219582\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1669729219582-JWT.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'JWT1669729219582'\n                    \n                \n                    \n                        \n                                Defined in migrations/1669729219582-JWT.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1669729219582-JWT.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1669729219582-JWT.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class JWT1669729219582 implements MigrationInterface {\n    name = 'JWT1669729219582'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`user\\` (\\`id\\` int NOT NULL AUTO_INCREMENT, \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`destroyedAt\\` datetime(6) NULL, \\`email\\` varchar(255) NOT NULL, \\`name\\` varchar(255) NOT NULL, \\`password\\` varchar(255) NOT NULL, \\`twoFactorSecret\\` varchar(255) NULL, \\`refreshToken\\` varchar(255) NULL, PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`DROP TABLE \\`user\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/JwtAuthGuard.html":{"url":"guards/JwtAuthGuard.html","title":"guard - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/jwt-auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/jwt-auth.guard.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Request } from 'express';\nimport { Observable } from 'rxjs';\n\nimport { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\n\nimport { User } from '~src/user/user.entity';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class JwtAuthGuard implements CanActivate {\n  constructor(readonly authService: AuthService) {}\n\n  canActivate(context: ExecutionContext): boolean | Promise | Observable {\n    const request: Request & { user?: User } = context.switchToHttp().getRequest();\n    const user: User | undefined = request.user;\n\n    const { authorization } = request.headers;\n    if (authorization) {\n      const [_, token] = authorization.split(' ');\n      const isValidToken = this.authService.verifyAccessToken(token);\n      // console.log(user, isValidToken, token);\n      if (!isValidToken) throw new UnauthorizedException('TokenExpired');\n      return user !== undefined;\n    }\n\n    console.log('UnAuthorized no token provided');\n    throw new UnauthorizedException('NoTokenProvided');\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtAuthPayload.html":{"url":"interfaces/JwtAuthPayload.html","title":"interface - JwtAuthPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtAuthPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        JwtPayload\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            twoFactorAuthenticated\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:         Roles[] | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Roles[] | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        twoFactorAuthenticated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        twoFactorAuthenticated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { JwtPayload } from 'jsonwebtoken';\nimport { Roles } from '~src/role/entity/role.entity';\n\nexport interface JwtAuthPayload extends JwtPayload {\n  id: number;\n  twoFactorAuthenticated: boolean;\n  roles: Roles[] | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtMiddleware.html":{"url":"injectables/JwtMiddleware.html","title":"injectable - JwtMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/middleware/jwt.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/middleware/jwt.middleware.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/middleware/jwt.middleware.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { NextFunction, Request, Response } from 'express';\n\nimport { Injectable, InternalServerErrorException, NestMiddleware } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UserService } from '~src/user/user.service';\n\nimport { JwtAuthPayload } from '../auth.interface';\n\n@Injectable()\nexport class JwtMiddleware implements NestMiddleware {\n  constructor(private readonly jwtService: JwtService, private readonly userService: UserService) {}\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    try {\n      const [_, accessToken] = req.headers.authorization?.split(' ') || [];\n      if (accessToken) {\n        const accessPayload = this.jwtService.decode(accessToken) as JwtAuthPayload;\n\n        if (typeof accessPayload === 'object' && accessPayload['id']) {\n          const user = await this.userService.findById(accessPayload.id, {\n            relations: ['roleGroup'],\n          });\n          req['user'] = user;\n          req['payload'] = accessPayload;\n        }\n      }\n\n      next();\n    } catch (err) {\n      console.log(err);\n      throw new InternalServerErrorException('Error With Parsing JWT');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/logging/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logging/logger.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { NextFunction, Request, Response } from 'express';\n\nimport { Injectable, NestMiddleware } from '@nestjs/common';\n\nimport { LoggerService } from './logger.service';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const loggerService = new LoggerService(req.url.slice(1).split('/')[0]);\n    const tempUrl = req.method + ' ' + req.baseUrl.split('?')[0];\n    const _auth = req.headers.authorization;\n    // const _headers = JSON.stringify(req.headers ? req.headers : {});\n    // const _query = JSON.stringify(req.query ? req.query : {});\n    const _body = JSON.stringify(req.body ? req.body : {});\n    const _url = JSON.stringify(tempUrl ? tempUrl : {});\n\n    loggerService.log(`${_url} ${_body} ${_auth}`.replace(/\\\\/, ''));\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerService.html":{"url":"classes/LoggerService.html","title":"class - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/logging/logger.service.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        LS\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(service: string)\n                    \n                \n                        \n                            \n                                Defined in src/modules/logging/logger.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        service\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Type :     winston.Logger\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/logging/logger.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logging/logger.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, trace: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logging/logger.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logging/logger.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logging/logger.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/logging/logger.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { utilities as nestWinstonModuleUtilities } from 'nest-winston';\nimport * as winston from 'winston';\n\nimport { LoggerService as LS } from '@nestjs/common';\n\nconst { errors, combine, json, timestamp, ms, prettyPrint } = winston.format;\n\nexport class LoggerService implements LS {\n  private logger: winston.Logger;\n\n  constructor(service: string) {\n    this.logger = winston.createLogger({\n      format: combine(\n        errors({ stack: true }),\n        json(),\n        timestamp({ format: 'isoDateTime' }),\n        ms(),\n        prettyPrint(),\n      ),\n      defaultMeta: { service },\n      transports: [\n        new winston.transports.Console({\n          level: 'debug',\n          format: combine(nestWinstonModuleUtilities.format.nestLike('Nest-2FA')),\n        }),\n      ],\n    });\n\n    // console.log = (message: any, ...params: any) => {\n    //   this.logger.debug(message, ...params);\n    // };\n  }\n\n  log(message: string) {\n    this.logger.info(message);\n  }\n  error(message: string, trace: string) {\n    this.logger.error(message, trace);\n  }\n  warn(message: string) {\n    this.logger.warning(message);\n  }\n  debug(message: string) {\n    this.logger.debug(message);\n  }\n  verbose(message: string) {\n    this.logger.verbose(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(email: string, password: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/login.dto.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        email\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        password\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString, IsString, Length } from 'class-validator';\n\nexport class LoginDto {\n  constructor(email: string, password: string) {\n    this.email = email;\n    this.password = password;\n  }\n\n  @IsString()\n  email: string;\n\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/entity/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/entity/role.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Roles)@Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/entity/role.entity.ts:14\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsEnum, IsString } from 'class-validator';\nimport { Column, Entity } from 'typeorm';\nimport { CoreEntity } from '~modules/database/core.entity';\n\nexport enum Roles {\n  TEST_ROLE = 'TestRole',\n  MANAGE_USER = 'ManageUser',\n}\n\n@Entity()\nexport class Role extends CoreEntity {\n  @IsEnum(Roles)\n  @Column({ unique: true })\n  name: Roles;\n\n  @IsString()\n  @Column()\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Role1670203037069.html":{"url":"classes/Role1670203037069.html","title":"class - Role1670203037069","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Role1670203037069\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            migrations/1670203037069-Role.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Role1670203037069'\n                    \n                \n                    \n                        \n                                Defined in migrations/1670203037069-Role.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                    \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1670203037069-Role.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                    \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in migrations/1670203037069-Role.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class Role1670203037069 implements MigrationInterface {\n    name = 'Role1670203037069'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`CREATE TABLE \\`role\\` (\\`id\\` int NOT NULL AUTO_INCREMENT, \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`destroyedAt\\` datetime(6) NULL, \\`name\\` varchar(255) NOT NULL, \\`description\\` varchar(255) NOT NULL, UNIQUE INDEX \\`IDX_ae4578dcaed5adff96595e6166\\` (\\`name\\`), PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`role_group\\` (\\`id\\` int NOT NULL AUTO_INCREMENT, \\`createdAt\\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6), \\`destroyedAt\\` datetime(6) NULL, \\`name\\` varchar(255) NOT NULL, \\`description\\` varchar(255) NOT NULL, UNIQUE INDEX \\`IDX_bae3cfbe67c8cad245cd04a319\\` (\\`name\\`), PRIMARY KEY (\\`id\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`CREATE TABLE \\`role_group_join\\` (\\`roleGroupId\\` int NOT NULL, \\`roleId\\` int NOT NULL, INDEX \\`IDX_171d67ef8913e9dc113831b9fa\\` (\\`roleGroupId\\`), INDEX \\`IDX_90430aa399740cac39bff3ca7b\\` (\\`roleId\\`), PRIMARY KEY (\\`roleGroupId\\`, \\`roleId\\`)) ENGINE=InnoDB`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD \\`roleGroupId\\` int NULL`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD UNIQUE INDEX \\`IDX_34e11176bdc021644092329708\\` (\\`roleGroupId\\`)`);\n        await queryRunner.query(`CREATE UNIQUE INDEX \\`REL_34e11176bdc021644092329708\\` ON \\`user\\` (\\`roleGroupId\\`)`);\n        await queryRunner.query(`ALTER TABLE \\`user\\` ADD CONSTRAINT \\`FK_34e11176bdc021644092329708f\\` FOREIGN KEY (\\`roleGroupId\\`) REFERENCES \\`role_group\\`(\\`id\\`) ON DELETE NO ACTION ON UPDATE NO ACTION`);\n        await queryRunner.query(`ALTER TABLE \\`role_group_join\\` ADD CONSTRAINT \\`FK_171d67ef8913e9dc113831b9fad\\` FOREIGN KEY (\\`roleGroupId\\`) REFERENCES \\`role_group\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE CASCADE`);\n        await queryRunner.query(`ALTER TABLE \\`role_group_join\\` ADD CONSTRAINT \\`FK_90430aa399740cac39bff3ca7b8\\` FOREIGN KEY (\\`roleId\\`) REFERENCES \\`role\\`(\\`id\\`) ON DELETE CASCADE ON UPDATE CASCADE`);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`ALTER TABLE \\`role_group_join\\` DROP FOREIGN KEY \\`FK_90430aa399740cac39bff3ca7b8\\``);\n        await queryRunner.query(`ALTER TABLE \\`role_group_join\\` DROP FOREIGN KEY \\`FK_171d67ef8913e9dc113831b9fad\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP FOREIGN KEY \\`FK_34e11176bdc021644092329708f\\``);\n        await queryRunner.query(`DROP INDEX \\`REL_34e11176bdc021644092329708\\` ON \\`user\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP INDEX \\`IDX_34e11176bdc021644092329708\\``);\n        await queryRunner.query(`ALTER TABLE \\`user\\` DROP COLUMN \\`roleGroupId\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_90430aa399740cac39bff3ca7b\\` ON \\`role_group_join\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_171d67ef8913e9dc113831b9fa\\` ON \\`role_group_join\\``);\n        await queryRunner.query(`DROP TABLE \\`role_group_join\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_bae3cfbe67c8cad245cd04a319\\` ON \\`role_group\\``);\n        await queryRunner.query(`DROP TABLE \\`role_group\\``);\n        await queryRunner.query(`DROP INDEX \\`IDX_ae4578dcaed5adff96595e6166\\` ON \\`role\\``);\n        await queryRunner.query(`DROP TABLE \\`role\\``);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RoleGroup.html":{"url":"entities/RoleGroup.html","title":"entity - RoleGroup","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RoleGroup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/entity/role-group.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/entity/role-group.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/entity/role-group.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, role => role.id, {eager: true})@JoinTable({name: 'role_group_join'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/entity/role-group.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsNumber, IsString } from 'class-validator';\nimport { Column, Entity, JoinTable, ManyToMany } from 'typeorm';\nimport { CoreEntity } from '~modules/database/core.entity';\nimport { Role } from './role.entity';\n\n@Entity()\nexport class RoleGroup extends CoreEntity {\n  @IsString()\n  @Column({ unique: true })\n  name: string;\n\n  @IsString()\n  @Column()\n  description: string;\n\n  @ManyToMany(() => Role, (role) => role.id, { eager: true })\n  @JoinTable({ name: 'role_group_join' })\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/role.guard.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/role.guard.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Request } from 'express';\nimport { Observable } from 'rxjs';\n\nimport { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\nimport { User } from '~src/user/user.entity';\n\nimport { Roles } from '~src/role/entity/role.entity';\nimport { Reflector } from '@nestjs/core';\nimport { ROLE_KEY } from '../decorator/role.decorator';\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean | Promise | Observable {\n    const request: Request & { user?: User } = context.switchToHttp().getRequest();\n    const user: User | undefined = request.user;\n    if (!user) return false;\n\n    const requiredRoles = this.reflector.get(ROLE_KEY, context.getHandler());\n    const userRoles = user.roleGroup?.roles.map((item) => item.name);\n    if (requiredRoles === undefined) return true;\n    if (userRoles === undefined || requiredRoles === undefined) return false;\n\n    return requiredRoles.every((role) => userRoles.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoleModule.html":{"url":"modules/RoleModule.html","title":"module - RoleModule","body":"\n                   \n\n\n\n\n    Modules\n    RoleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_exports\n\n\n\ncluster_RoleModule_providers\n\n\n\n\nRoleService \n\nRoleService \n\n\n\nRoleModule\n\nRoleModule\n\nRoleService  -->\n\nRoleModule->RoleService \n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/role/role.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoleService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RoleService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.module.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { Logger, LoggerService, Module, OnModuleInit } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { RoleGroup } from './entity/role-group.entity';\nimport { Role, Roles } from './entity/role.entity';\nimport { RoleService } from './role.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role, RoleGroup])],\n  providers: [RoleService],\n  exports: [RoleService],\n})\nexport class RoleModule implements OnModuleInit {\n  readonly logger: Logger;\n  constructor(private readonly roleService: RoleService) {\n    this.logger = new Logger('RoleModule', { timestamp: true });\n  }\n\n  async onModuleInit() {\n    this.logger.log('Initializing Role data');\n\n    this.logger.log('Creating base roles');\n    const roles = {\n      ManageUser: await this.roleService.saveRole({\n        name: Roles.MANAGE_USER,\n        description: '유저 관리 권한',\n      }),\n      TestRole: await this.roleService.saveRole({\n        name: Roles.TEST_ROLE,\n        description: '테스트 권한',\n      }),\n    };\n\n    this.logger.log('Creating role groups');\n    await this.roleService.saveRoleGroup({\n      name: 'SuperAdmin',\n      description: '슈퍼 어드민',\n      roles: [roles.ManageUser, roles.TestRole],\n    });\n    await this.roleService.saveRoleGroup({\n      name: 'Admin',\n      description: '어드민',\n      roles: [roles.TestRole],\n    });\n    await this.roleService.saveRoleGroup({\n      name: 'User',\n      description: '기본 유저',\n      roles: [],\n    });\n\n    this.logger.log('Initialize Role data Completed');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoleService.html":{"url":"injectables/RoleService.html","title":"injectable - RoleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/role.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findRoleByName\n                            \n                            \n                                    Async\n                                findRoleGroupByName\n                            \n                            \n                                    Async\n                                findRolesById\n                            \n                            \n                                    Async\n                                saveRole\n                            \n                            \n                                    Async\n                                saveRoleGroup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(roleRepository: Repository, roleGroupRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/role/role.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        roleRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roleGroupRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRoleByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRoleByName(name: Roles)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                Roles\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRoleGroupByName\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRoleGroupByName(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRolesById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRolesById(arr: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arr\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveRole(undefined: SaveRoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SaveRoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveRoleGroup\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveRoleGroup(undefined: SaveRoleGroupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SaveRoleGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { SaveRoleGroupDto } from './dto/save-role-group.dto';\nimport { SaveRoleDto } from './dto/save-role.dto';\nimport { RoleGroup } from './entity/role-group.entity';\nimport { Role, Roles } from './entity/role.entity';\n\n@Injectable()\nexport class RoleService {\n  constructor(\n    @InjectRepository(Role) private readonly roleRepository: Repository,\n    @InjectRepository(RoleGroup) private readonly roleGroupRepository: Repository,\n  ) {}\n\n  async saveRole({ name, description }: SaveRoleDto) {\n    const existRole = await this.findRoleByName(name);\n\n    const newRole = existRole || this.roleRepository.create();\n    newRole.name = name;\n    newRole.description = description;\n\n    return await this.roleRepository.save(newRole);\n  }\n\n  async saveRoleGroup({ name, description, roles }: SaveRoleGroupDto) {\n    const existRoleGroup = await this.findRoleGroupByName(name);\n\n    // const relatedRoles = await this.findRolesById(roles);\n    const newRoleGroup = existRoleGroup || this.roleGroupRepository.create();\n    newRoleGroup.name = name;\n    newRoleGroup.description = description;\n    newRoleGroup.roles = roles;\n\n    return await this.roleGroupRepository.save(newRoleGroup);\n  }\n\n  async findRolesById(arr: number[]) {\n    return Promise.all(arr.map((id) => this.roleRepository.findOne({ where: { id } })));\n  }\n\n  async findRoleByName(name: Roles) {\n    return this.roleRepository.findOne({ where: { name } });\n  }\n\n  async findRoleGroupByName(name: string) {\n    return this.roleGroupRepository.findOne({ where: { name } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveRoleDto.html":{"url":"classes/SaveRoleDto.html","title":"class - SaveRoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveRoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/dto/save-role.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/dto/save-role.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(Roles)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/dto/save-role.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsString } from 'class-validator';\nimport { Roles } from '../entity/role.entity';\n\nexport class SaveRoleDto {\n  @IsEnum(Roles)\n  name: Roles;\n\n  @IsString()\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SaveRoleGroupDto.html":{"url":"classes/SaveRoleGroupDto.html","title":"class - SaveRoleGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SaveRoleGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/dto/save-role-group.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                name\n                            \n                            \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/dto/save-role-group.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/dto/save-role-group.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInstance(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/dto/save-role-group.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInstance, IsNumber, IsString } from 'class-validator';\nimport { Role } from '../entity/role.entity';\n\nexport class SaveRoleGroupDto {\n  @IsString()\n  name: string;\n\n  @IsString()\n  description: string;\n\n  @IsInstance(Role)\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TestController.html":{"url":"controllers/TestController.html","title":"controller - TestController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TestController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/test/test.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /test\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                            \n                                twoFactorTest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/')@Role(Roles.TEST_ROLE)@UseGuards(RoleGuard)@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/test/test.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        twoFactorTest\n                        \n                    \n                \n            \n            \n                \ntwoFactorTest(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/2fa')@UseGuards(TwoFactorAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/test/test.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Res, UseGuards } from '@nestjs/common';\nimport { Response } from 'express';\nimport { Role } from '~src/auth/decorator/role.decorator';\n\nimport { GetUser } from '~src/auth/decorator/user.decorator';\nimport { TwoFactorAuthGuard } from '~src/auth/guard/2fa-auth.guard';\nimport { JwtAuthGuard } from '~src/auth/guard/jwt-auth.guard';\nimport { RoleGuard } from '~src/auth/guard/role.guard';\nimport { Roles } from '~src/role/entity/role.entity';\nimport { User } from '~src/user/user.entity';\n\nimport { TestService } from './test.service';\n\n@Controller('/test')\nexport class TestController {\n  constructor(private readonly testService: TestService) {}\n\n  @Post('/')\n  @Role(Roles.TEST_ROLE)\n  @UseGuards(RoleGuard)\n  @UseGuards(JwtAuthGuard)\n  getHello(@GetUser() user: User) {\n    // console.log(user);\n    return this.testService.getHello();\n  }\n\n  @Post('/2fa')\n  @UseGuards(TwoFactorAuthGuard)\n  twoFactorTest(@GetUser() user: User) {\n    console.log(user);\n    return this.testService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TestModule.html":{"url":"modules/TestModule.html","title":"module - TestModule","body":"\n                   \n\n\n\n\n    Modules\n    TestModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TestModule\n\n\n\ncluster_TestModule_imports\n\n\n\ncluster_TestModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTestModule\n\nTestModule\n\nTestModule -->\n\nAuthModule->TestModule\n\n\n\n\n\nTestService\n\nTestService\n\nTestModule -->\n\nTestService->TestModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/test/test.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TestService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TestController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\n\nimport { AuthModule } from '~src/auth/auth.module';\n\nimport { TestController } from './test.controller';\nimport { TestService } from './test.service';\n\n@Module({\n  imports: [AuthModule, JwtModule],\n  controllers: [TestController],\n  providers: [TestService],\n})\nexport class TestModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TestService.html":{"url":"injectables/TestService.html","title":"injectable - TestService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TestService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/test/test.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/test/test.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class TestService {\n  getHello() {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TotpModule.html":{"url":"modules/TotpModule.html","title":"module - TotpModule","body":"\n                   \n\n\n\n\n    Modules\n    TotpModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/totp/totp.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        ForRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    ForRoot(options: TotpModuleOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/totp/totp.module.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                TotpModuleOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     DynamicModule\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DynamicModule, Module } from '@nestjs/common';\n\nimport { CONFIG_OPTIONS } from './totp.constants';\nimport { TotpModuleOptions } from './totp.interface';\nimport { TotpService } from './totp.service';\n\n@Module({})\nexport class TotpModule {\n  static ForRoot(options: TotpModuleOptions): DynamicModule {\n    return {\n      module: TotpModule,\n      providers: [\n        {\n          provide: CONFIG_OPTIONS,\n          useValue: options,\n        },\n        TotpService,\n      ],\n      exports: [TotpService],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TotpModuleOptions.html":{"url":"interfaces/TotpModuleOptions.html","title":"interface - TotpModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TotpModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/totp/totp.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            digits\n                                        \n                                \n                                \n                                        \n                                            period\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        digits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        digits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        period\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        period:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TotpModuleOptions {\n  period: number;\n  digits: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TotpService.html":{"url":"injectables/TotpService.html","title":"injectable - TotpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TotpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/totp/totp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                generateQrCode\n                            \n                            \n                                generateSecret\n                            \n                            \n                                    Private\n                                generateSecretASCII\n                            \n                            \n                                getCode\n                            \n                            \n                                getURL\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: TotpModuleOptions)\n                    \n                \n                        \n                            \n                                Defined in src/modules/totp/totp.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        TotpModuleOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateQrCode\n                        \n                    \n                \n            \n            \n                \ngenerateQrCode(stream: Response, url: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/totp/totp.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateSecret\n                        \n                    \n                \n            \n            \n                \ngenerateSecret()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/totp/totp.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generateSecretASCII\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateSecretASCII(length: number, symbols)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/totp/totp.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    length\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        32\n                                    \n\n                                \n                                \n                                    symbols\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCode\n                        \n                    \n                \n            \n            \n                \ngetCode(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/totp/totp.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getURL\n                        \n                    \n                \n            \n            \n                \ngetURL(key: string, label: string, issuer: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/totp/totp.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    label\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'Nest-2FA 테스트'\n                                    \n\n                                \n                                \n                                    issuer\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'NEST-2FA'\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomBytes } from 'crypto';\n\nimport { Response } from 'express';\nimport { encode } from 'hi-base32';\nimport QRCode from 'qrcode';\nimport { default as totp } from 'totp-generator';\n\nimport { Inject, Injectable } from '@nestjs/common';\n\nimport { CONFIG_OPTIONS } from './totp.constants';\nimport { TotpModuleOptions } from './totp.interface';\n\n@Injectable()\nexport class TotpService {\n  constructor(@Inject(CONFIG_OPTIONS) private readonly options: TotpModuleOptions) {}\n\n  getCode(key: string) {\n    const code = totp(key, {\n      ...this.options,\n    });\n    // console.log(`Generated2FAcode ${code}`);\n    return code;\n  }\n\n  getURL(key: string, label = 'Nest-2FA 테스트', issuer = 'NEST-2FA') {\n    return `otpauth://totp/${label}:?secret=${key}&issuer=${issuer}&algorithm=SHA1&digits=${this.options.digits}&period=${this.options.period}`;\n  }\n\n  private generateSecretASCII(length = 32, symbols = false) {\n    const bytes = randomBytes(length);\n    let set = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz';\n    if (symbols) {\n      set += '!@#$%^&*()<>?/[]{},.:;';\n    }\n\n    let output = '';\n    for (let i = 0, l = bytes.length; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/TwoFactorAuthGuard.html":{"url":"guards/TwoFactorAuthGuard.html","title":"guard - TwoFactorAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    TwoFactorAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guard/2fa-auth.guard.ts\n            \n\n\n\n                \n                Extends\n                \n                \n                            JwtAuthGuard\n                \n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guard/2fa-auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/2fa-auth.guard.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Request } from 'express';\nimport { Observable } from 'rxjs';\n\nimport { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { User } from '~src/user/user.entity';\n\nimport { JwtAuthPayload } from '../auth.interface';\nimport { AuthService } from '../auth.service';\nimport { JwtAuthGuard } from './jwt-auth.guard';\n\n@Injectable()\nexport class TwoFactorAuthGuard extends JwtAuthGuard implements CanActivate {\n  constructor(readonly authService: AuthService, readonly jwtService: JwtService) {\n    super(authService);\n  }\n\n  canActivate(context: ExecutionContext): boolean | Promise | Observable {\n    if (!super.canActivate(context)) return false;\n\n    const request: Request & { user?: User } = context.switchToHttp().getRequest();\n    const user: User | undefined = request.user;\n\n    const { authorization } = request.headers;\n    if (authorization) {\n      const [_, token] = authorization.split(' ');\n      const payload = this.jwtService.decode(token) as Partial;\n\n      return user !== undefined && payload.twoFactorAuthenticated;\n    }\n\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TwoFactorLoginDto.html":{"url":"classes/TwoFactorLoginDto.html","title":"class - TwoFactorLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TwoFactorLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/2fa-login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                twoFactorCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(twoFactorCode: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dto/2fa-login.dto.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        twoFactorCode\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        twoFactorCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()@Length(6, 6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/2fa-login.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString, Length } from 'class-validator';\n\nexport class TwoFactorLoginDto {\n  constructor(twoFactorCode: string) {\n    this.twoFactorCode = twoFactorCode;\n  }\n\n  @IsNumberString()\n  @Length(6, 6)\n  twoFactorCode: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                    Optional\n                                refreshToken\n                            \n                            \n                                    Optional\n                                roleGroup\n                            \n                            \n                                    Optional\n                                twoFactorSecret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude({toPlainOnly: true})@IsString()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@IsOptional()@IsNotEmpty()@IsString()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        roleGroup\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RoleGroup\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInstance(RoleGroup)@OneToOne(undefined, roleGroup => roleGroup.id)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        twoFactorSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@IsOptional()@IsNotEmpty()@IsString()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { hash, compare } from 'bcrypt';\nimport { Exclude } from 'class-transformer';\nimport { IsInstance, IsNotEmpty, IsOptional, IsString } from 'class-validator';\nimport { BeforeInsert, Column, Entity, JoinColumn, OneToOne } from 'typeorm';\n\nimport { CoreEntity } from '~src/modules/database/core.entity';\nimport { RoleGroup } from '~src/role/entity/role-group.entity';\n\n@Entity()\nexport class User extends CoreEntity {\n  @IsString()\n  @Column()\n  email: string;\n\n  @IsString()\n  @Column()\n  name: string;\n\n  @Exclude({ toPlainOnly: true })\n  @IsString()\n  @Column()\n  password: string;\n\n  @Exclude()\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @Column({ nullable: true })\n  twoFactorSecret?: string;\n\n  @Exclude()\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @Column({ nullable: true })\n  refreshToken?: string;\n\n  @IsOptional()\n  @IsInstance(RoleGroup)\n  @OneToOne(() => RoleGroup, (roleGroup) => roleGroup.id)\n  @JoinColumn()\n  roleGroup?: RoleGroup;\n\n  @BeforeInsert()\n  async hashPassword(): Promise {\n    this.password = await hash(this.password, 10);\n  }\n\n  async checkPassword(inputPassword: string): Promise {\n    return await compare(inputPassword, this.password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \ngetCurrentUser(user: User, payload: JwtAuthPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/me')@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                JwtAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { result: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { JwtAuthPayload } from '~src/auth/auth.interface';\nimport { JwtPayload } from '~src/auth/decorator/jwt.decorator';\nimport { GetUser } from '~src/auth/decorator/user.decorator';\nimport { JwtAuthGuard } from '~src/auth/guard/jwt-auth.guard';\n\n// import { AuthUser } from '~modules/auth/auth-user.decorator';\n// import { AuthGuard } from '~modules/auth/auth.guard';\n\nimport { CreateUserDto } from '../auth/dto/create-user.dto';\nimport { User } from './user.entity';\nimport { UserService } from './user.service';\n\n@Controller('/user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get('/me')\n  @UseGuards(JwtAuthGuard)\n  getCurrentUser(@GetUser() user: User, @JwtPayload() payload: JwtAuthPayload) {\n    const result: User & { twoFactorAuthenticated?: boolean } = user;\n    result.twoFactorAuthenticated = payload.twoFactorAuthenticated;\n\n    return { result };\n  }\n\n  //   @Post('/role/create')\n  //   async createRole(@Body() createRoleDto: CreateRoleDto) {\n  //     return { result: await this.userService.createRole(createRoleDto) };\n  //   }\n\n  //   @UseGuards(AuthGuard)\n  //   @Get()\n  //   async getCurrentUser(@AuthUser() authUser: User) {\n  //     return await this.userService.findById(authUser.id);\n  //   }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from '~src/auth/auth.module';\n\nimport { DatabaseModule } from '~src/modules/database/database.module';\n\nimport { UserController } from './user.controller';\nimport { User } from './user.entity';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]), AuthModule],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(userId: number, options?: FindOneOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                FindOneOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FindOneOptions, Repository } from 'typeorm';\n\nimport { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\n\nimport { CreateUserDto } from '../auth/dto/create-user.dto';\nimport { User } from './user.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(@InjectRepository(User) private readonly userRepository: Repository) {}\n\n  async findById(userId: number, options?: FindOneOptions): Promise {\n    const user = await this.userRepository.findOne({\n      where: { id: userId },\n      ...options,\n    });\n    if (!user) throw new NotFoundException('User Not Found');\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                migrations/1669729219582-JWT.ts\n            \n            class\n            JWT1669729219582\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                migrations/1670203037069-Role.ts\n            \n            class\n            Role1670203037069\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.interface.ts\n            \n            interface\n            JwtAuthPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/auth/decorator/jwt.decorator.ts\n            \n            variable\n            JwtPayload\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorator/role.decorator.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorator/role.decorator.ts\n            \n            variable\n            ROLE_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorator/user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/2fa-login.dto.ts\n            \n            class\n            TwoFactorLoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guard/2fa-auth.guard.ts\n            \n            guard\n            TwoFactorAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guard/jwt-auth.guard.ts\n            \n            guard\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guard/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/middleware/jwt.middleware.ts\n            \n            injectable\n            JwtMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/database/core.entity.ts\n            \n            class\n            CoreEntity\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/database/typeorm.datasource.ts\n            \n            variable\n            AppDataSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/database/typeorm.datasource.ts\n            \n            variable\n            options\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/logging/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/logging/logger.service.ts\n            \n            class\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/logging/logger.service.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/totp/totp.constants.ts\n            \n            variable\n            CONFIG_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/totp/totp.interface.ts\n            \n            interface\n            TotpModuleOptions\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/totp/totp.service.ts\n            \n            injectable\n            TotpService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/role/dto/save-role-group.dto.ts\n            \n            class\n            SaveRoleGroupDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/role/dto/save-role.dto.ts\n            \n            class\n            SaveRoleDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/role/entity/role-group.entity.ts\n            \n            entity\n            RoleGroup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/role/entity/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/role/role.service.ts\n            \n            injectable\n            RoleService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/test/test.controller.ts\n            \n            controller\n            TestController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/test/test.service.ts\n            \n            injectable\n            TestService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/typeorm : ^9.0.0\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            hi-base32 : ^0.5.1\n        \n            joi : ^17.6.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            mysql2 : ^2.3.3\n        \n            nest-winston : ^1.7.0\n        \n            qrcode : ^1.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            totp-generator : ^0.0.14\n        \n            typeorm : ^0.3.7\n        \n            winston : ^3.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Roles   (src/.../role.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/role/entity/role.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Roles\n                    \n                \n                        \n                            \n                                 TEST_ROLE\n                            \n                        \n                        \n                            \n                                Value : TestRole\n                            \n                        \n                        \n                            \n                                 MANAGE_USER\n                            \n                        \n                        \n                            \n                                Value : ManageUser\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest 2FA Example\nInstallation\n$ yarn installRunning the app\n# build app\n$ yarn build\n\n# start database\n$ docker-compose up -d\n\n# migration db schema\n$ yarn typeorm:run-migrations\n\n# start app\n$ yarn run start:prodUsage\nStep 1\n계정 등록을 위해 서버로 계정 등록 요청을 보냅니다 \nPOST http://localhost:3000/user/register\n{\n  \"email\": \"test@example.com\",\n  \"name\": \"test\",\n  \"password\": \"pw\",\n}정상적으로 등록이 된 경우, 2fa private Key와 등록이 가능한 2fa url이 반환됩니다.\n{\n  \"result\": {\n    \"twoFactorKey\": \"NNGHARSHOZGVA5CQJZBHMUCUJBGWWZRUKR3DO6BVKBTHQT2KOJ3Q\",\n    \"twoFactorUrl\": \"otpauth://totp/Nest-2FA 테스트?secret=NNGHARSHOZGVA5CQJZBHMUCUJBGWWZRUKR3DO6BVKBTHQT2KOJ3Q&issuer=NEST-2FA&algorithm=SHA1&digits=6&period=30\"\n  }\n}twoFactorKey를 바로 OTP클라이언트에 등록하거나, twoFactorUrl을 QR 형태로 변환하여 OTP클라이언트에 등록 가능합니다.\nStep 2\nOTP 클라이언트에 표시된 OTP CODE를 앞서 등록한 계정 정보와 함께 전송합니다. \nPOST http://localhost:3000/user/login \n{\n  \"email\": \"test@example.com\",\n  \"password\": \"pw\",\n  \"twoFactorCode\": \"035579\" // YOUR 2FA CODE\n}정상적으로 인증이 완료되면 jwt 토큰 정보가 반환됩니다.\n{\n  \"token\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NywiZW1haWwiOiJ0ZXN0QGV4YW1wbGUuY29tIiwibmFtZSI6InRlc3QiLCJpYXQiOjE2Njg3NTUyMjl9.a3kfquIFIB5BQEsGQn1IRbOTud7LyTkn5VkBjkF0R25Q47x_mK25IZIIoYM7gpJkaInNCA8To_FgeO_c-A3vKmVOrWzBCS7dAYVKxp_nrFxXGBAqeTlnJlD9ZUzNC8grEi4XGwvvIv2uTC4F2L3hy6Q_kRLvXtCFgfSDAGQmXOKXtG46ZFmtkHuxksmtVpchVjFP8zIUTWj8cefx2WNkrdalRdR3UKbFNIjdTenPobEFsgwIOwEefQ1dUP-ztMPdHdQu8lA7YkNbn4XTfrEIOeDmHDwMR6_bY6igCrJDcKxbOrGH6ruPh4mtERdqEeCXCoZZyFpP3jipvzQqYrHm7w\"\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigurationModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TestModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TotpModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_exports\n\n\n\ncluster_RoleModule_providers\n\n\n\ncluster_TestModule\n\n\n\ncluster_TestModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTestModule\n\nTestModule\n\nTestModule -->\n\nAuthModule->TestModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nConfigurationModule\n\nConfigurationModule\n\nAppModule -->\n\nConfigurationModule->AppModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nRoleService \n\nRoleService \n\nRoleService  -->\n\nRoleModule->RoleService \n\n\n\nAppModule -->\n\nTestModule->AppModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\n\n\nTotpModule\n\nTotpModule\n\nAuthModule -->\n\nTotpModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\nTestService\n\nTestService\n\nTestModule -->\n\nTestService->TestModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppDataSource   (src/.../typeorm.datasource.ts)\n                        \n                        \n                            CONFIG_OPTIONS   (src/.../totp.constants.ts)\n                        \n                        \n                            GetUser   (src/.../user.decorator.ts)\n                        \n                        \n                            JwtPayload   (src/.../jwt.decorator.ts)\n                        \n                        \n                            options   (src/.../typeorm.datasource.ts)\n                        \n                        \n                            Role   (src/.../role.decorator.ts)\n                        \n                        \n                            ROLE_KEY   (src/.../role.decorator.ts)\n                        \n                        \n                               (src/.../logger.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/database/typeorm.datasource.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppDataSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource(options)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataSourceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  host: process.env.DB_HOST,\n  port: Number(process.env.DB_PORT),\n  username: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME,\n  // synchronize: process.env.NODE_ENV !== 'production',\n  // logging: process.env.NODE_ENV !== 'production',\n  entities: ['dist/**/*.entity.{js,ts}'],\n  migrations: ['dist/migrations/*{.ts,.js}'],\n  migrationsRun: true,\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/totp/totp.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CONFIG_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CONFIG_OPTIONS'\n                    \n                \n\n\n        \n    \n\n    src/auth/decorator/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n  return request.user as UserEntity;\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/decorator/jwt.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JwtPayload\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: unknown, context: ExecutionContext) => {\n  const request = context.switchToHttp().getRequest();\n  return request.payload as JwtAuthPayload;\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/decorator/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Roles[]) => SetMetadata(ROLE_KEY, roles)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROLE_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'roles'\n                    \n                \n\n\n        \n    \n\n    src/modules/logging/logger.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : winston.format\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
